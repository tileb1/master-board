
new_ioc_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009874  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  08009a48  08009a48  00019a48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009e60  08009e60  00019e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009e68  08009e68  00019e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009e6c  08009e6c  00019e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  20000000  08009e70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       000001a0  2000007c  08009eec  0002007c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00004814  2000021c  0800a08c  0002021c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20004a30  0800a08c  00024a30  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00046d0b  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00008ec6  00000000  00000000  00066f57  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00016a82  00000000  00000000  0006fe1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b28  00000000  00000000  000868a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002590  00000000  00000000  000883c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000119ec  00000000  00000000  0008a958  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00009d82  00000000  00000000  0009c344  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000a60c6  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000569c  00000000  00000000  000a6144  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000021c 	.word	0x2000021c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009a2c 	.word	0x08009a2c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000220 	.word	0x20000220
 800020c:	08009a2c 	.word	0x08009a2c

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800034e:	f1a4 0401 	sub.w	r4, r4, #1
 8000352:	d1e9      	bne.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f092 0f00 	teq	r2, #0
 80004fa:	bf14      	ite	ne
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e720      	b.n	8000354 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aedc 	beq.w	8000302 <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6c1      	b.n	8000302 <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000be4:	f000 b97a 	b.w	8000edc <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	468c      	mov	ip, r1
 8000c06:	460d      	mov	r5, r1
 8000c08:	4604      	mov	r4, r0
 8000c0a:	9e08      	ldr	r6, [sp, #32]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d151      	bne.n	8000cb4 <__udivmoddi4+0xb4>
 8000c10:	428a      	cmp	r2, r1
 8000c12:	4617      	mov	r7, r2
 8000c14:	d96d      	bls.n	8000cf2 <__udivmoddi4+0xf2>
 8000c16:	fab2 fe82 	clz	lr, r2
 8000c1a:	f1be 0f00 	cmp.w	lr, #0
 8000c1e:	d00b      	beq.n	8000c38 <__udivmoddi4+0x38>
 8000c20:	f1ce 0c20 	rsb	ip, lr, #32
 8000c24:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c28:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c2c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c30:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c34:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c38:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c3c:	0c25      	lsrs	r5, r4, #16
 8000c3e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c42:	fa1f f987 	uxth.w	r9, r7
 8000c46:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c4a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c4e:	fb08 f309 	mul.w	r3, r8, r9
 8000c52:	42ab      	cmp	r3, r5
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x6c>
 8000c56:	19ed      	adds	r5, r5, r7
 8000c58:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000c5c:	f080 8123 	bcs.w	8000ea6 <__udivmoddi4+0x2a6>
 8000c60:	42ab      	cmp	r3, r5
 8000c62:	f240 8120 	bls.w	8000ea6 <__udivmoddi4+0x2a6>
 8000c66:	f1a8 0802 	sub.w	r8, r8, #2
 8000c6a:	443d      	add	r5, r7
 8000c6c:	1aed      	subs	r5, r5, r3
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c74:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c78:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c7c:	fb00 f909 	mul.w	r9, r0, r9
 8000c80:	45a1      	cmp	r9, r4
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x98>
 8000c84:	19e4      	adds	r4, r4, r7
 8000c86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8a:	f080 810a 	bcs.w	8000ea2 <__udivmoddi4+0x2a2>
 8000c8e:	45a1      	cmp	r9, r4
 8000c90:	f240 8107 	bls.w	8000ea2 <__udivmoddi4+0x2a2>
 8000c94:	3802      	subs	r0, #2
 8000c96:	443c      	add	r4, r7
 8000c98:	eba4 0409 	sub.w	r4, r4, r9
 8000c9c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d061      	beq.n	8000d6a <__udivmoddi4+0x16a>
 8000ca6:	fa24 f40e 	lsr.w	r4, r4, lr
 8000caa:	2300      	movs	r3, #0
 8000cac:	6034      	str	r4, [r6, #0]
 8000cae:	6073      	str	r3, [r6, #4]
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	d907      	bls.n	8000cc8 <__udivmoddi4+0xc8>
 8000cb8:	2e00      	cmp	r6, #0
 8000cba:	d054      	beq.n	8000d66 <__udivmoddi4+0x166>
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e886 0021 	stmia.w	r6, {r0, r5}
 8000cc2:	4608      	mov	r0, r1
 8000cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc8:	fab3 f183 	clz	r1, r3
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	f040 808e 	bne.w	8000dee <__udivmoddi4+0x1ee>
 8000cd2:	42ab      	cmp	r3, r5
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xdc>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80fa 	bhi.w	8000ed0 <__udivmoddi4+0x2d0>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb65 0503 	sbc.w	r5, r5, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	46ac      	mov	ip, r5
 8000ce6:	2e00      	cmp	r6, #0
 8000ce8:	d03f      	beq.n	8000d6a <__udivmoddi4+0x16a>
 8000cea:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	b912      	cbnz	r2, 8000cfa <__udivmoddi4+0xfa>
 8000cf4:	2701      	movs	r7, #1
 8000cf6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cfa:	fab7 fe87 	clz	lr, r7
 8000cfe:	f1be 0f00 	cmp.w	lr, #0
 8000d02:	d134      	bne.n	8000d6e <__udivmoddi4+0x16e>
 8000d04:	1beb      	subs	r3, r5, r7
 8000d06:	0c3a      	lsrs	r2, r7, #16
 8000d08:	fa1f fc87 	uxth.w	ip, r7
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d12:	0c25      	lsrs	r5, r4, #16
 8000d14:	fb02 3318 	mls	r3, r2, r8, r3
 8000d18:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d1c:	fb0c f308 	mul.w	r3, ip, r8
 8000d20:	42ab      	cmp	r3, r5
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x134>
 8000d24:	19ed      	adds	r5, r5, r7
 8000d26:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x132>
 8000d2c:	42ab      	cmp	r3, r5
 8000d2e:	f200 80d1 	bhi.w	8000ed4 <__udivmoddi4+0x2d4>
 8000d32:	4680      	mov	r8, r0
 8000d34:	1aed      	subs	r5, r5, r3
 8000d36:	b2a3      	uxth	r3, r4
 8000d38:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d3c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d40:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d44:	fb0c fc00 	mul.w	ip, ip, r0
 8000d48:	45a4      	cmp	ip, r4
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x15c>
 8000d4c:	19e4      	adds	r4, r4, r7
 8000d4e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x15a>
 8000d54:	45a4      	cmp	ip, r4
 8000d56:	f200 80b8 	bhi.w	8000eca <__udivmoddi4+0x2ca>
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	eba4 040c 	sub.w	r4, r4, ip
 8000d60:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d64:	e79d      	b.n	8000ca2 <__udivmoddi4+0xa2>
 8000d66:	4631      	mov	r1, r6
 8000d68:	4630      	mov	r0, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	f1ce 0420 	rsb	r4, lr, #32
 8000d72:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d76:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d7a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d7e:	0c3a      	lsrs	r2, r7, #16
 8000d80:	fa25 f404 	lsr.w	r4, r5, r4
 8000d84:	ea48 0803 	orr.w	r8, r8, r3
 8000d88:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d8c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d90:	fb02 4411 	mls	r4, r2, r1, r4
 8000d94:	fa1f fc87 	uxth.w	ip, r7
 8000d98:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d9c:	fb01 f30c 	mul.w	r3, r1, ip
 8000da0:	42ab      	cmp	r3, r5
 8000da2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000da6:	d909      	bls.n	8000dbc <__udivmoddi4+0x1bc>
 8000da8:	19ed      	adds	r5, r5, r7
 8000daa:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000dae:	f080 808a 	bcs.w	8000ec6 <__udivmoddi4+0x2c6>
 8000db2:	42ab      	cmp	r3, r5
 8000db4:	f240 8087 	bls.w	8000ec6 <__udivmoddi4+0x2c6>
 8000db8:	3902      	subs	r1, #2
 8000dba:	443d      	add	r5, r7
 8000dbc:	1aeb      	subs	r3, r5, r3
 8000dbe:	fa1f f588 	uxth.w	r5, r8
 8000dc2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000dc6:	fb02 3310 	mls	r3, r2, r0, r3
 8000dca:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dce:	fb00 f30c 	mul.w	r3, r0, ip
 8000dd2:	42ab      	cmp	r3, r5
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x1e6>
 8000dd6:	19ed      	adds	r5, r5, r7
 8000dd8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ddc:	d26f      	bcs.n	8000ebe <__udivmoddi4+0x2be>
 8000dde:	42ab      	cmp	r3, r5
 8000de0:	d96d      	bls.n	8000ebe <__udivmoddi4+0x2be>
 8000de2:	3802      	subs	r0, #2
 8000de4:	443d      	add	r5, r7
 8000de6:	1aeb      	subs	r3, r5, r3
 8000de8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dec:	e78f      	b.n	8000d0e <__udivmoddi4+0x10e>
 8000dee:	f1c1 0720 	rsb	r7, r1, #32
 8000df2:	fa22 f807 	lsr.w	r8, r2, r7
 8000df6:	408b      	lsls	r3, r1
 8000df8:	fa05 f401 	lsl.w	r4, r5, r1
 8000dfc:	ea48 0303 	orr.w	r3, r8, r3
 8000e00:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e04:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e08:	40fd      	lsrs	r5, r7
 8000e0a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e0e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e12:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e16:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e1a:	fa1f f883 	uxth.w	r8, r3
 8000e1e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e22:	fb09 f408 	mul.w	r4, r9, r8
 8000e26:	42ac      	cmp	r4, r5
 8000e28:	fa02 f201 	lsl.w	r2, r2, r1
 8000e2c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x244>
 8000e32:	18ed      	adds	r5, r5, r3
 8000e34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e38:	d243      	bcs.n	8000ec2 <__udivmoddi4+0x2c2>
 8000e3a:	42ac      	cmp	r4, r5
 8000e3c:	d941      	bls.n	8000ec2 <__udivmoddi4+0x2c2>
 8000e3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e42:	441d      	add	r5, r3
 8000e44:	1b2d      	subs	r5, r5, r4
 8000e46:	fa1f fe8e 	uxth.w	lr, lr
 8000e4a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e4e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e52:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e56:	fb00 f808 	mul.w	r8, r0, r8
 8000e5a:	45a0      	cmp	r8, r4
 8000e5c:	d907      	bls.n	8000e6e <__udivmoddi4+0x26e>
 8000e5e:	18e4      	adds	r4, r4, r3
 8000e60:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000e64:	d229      	bcs.n	8000eba <__udivmoddi4+0x2ba>
 8000e66:	45a0      	cmp	r8, r4
 8000e68:	d927      	bls.n	8000eba <__udivmoddi4+0x2ba>
 8000e6a:	3802      	subs	r0, #2
 8000e6c:	441c      	add	r4, r3
 8000e6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e72:	eba4 0408 	sub.w	r4, r4, r8
 8000e76:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7a:	454c      	cmp	r4, r9
 8000e7c:	46c6      	mov	lr, r8
 8000e7e:	464d      	mov	r5, r9
 8000e80:	d315      	bcc.n	8000eae <__udivmoddi4+0x2ae>
 8000e82:	d012      	beq.n	8000eaa <__udivmoddi4+0x2aa>
 8000e84:	b156      	cbz	r6, 8000e9c <__udivmoddi4+0x29c>
 8000e86:	ebba 030e 	subs.w	r3, sl, lr
 8000e8a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e8e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e92:	40cb      	lsrs	r3, r1
 8000e94:	431f      	orrs	r7, r3
 8000e96:	40cc      	lsrs	r4, r1
 8000e98:	6037      	str	r7, [r6, #0]
 8000e9a:	6074      	str	r4, [r6, #4]
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	e6f8      	b.n	8000c98 <__udivmoddi4+0x98>
 8000ea6:	4690      	mov	r8, r2
 8000ea8:	e6e0      	b.n	8000c6c <__udivmoddi4+0x6c>
 8000eaa:	45c2      	cmp	sl, r8
 8000eac:	d2ea      	bcs.n	8000e84 <__udivmoddi4+0x284>
 8000eae:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb2:	eb69 0503 	sbc.w	r5, r9, r3
 8000eb6:	3801      	subs	r0, #1
 8000eb8:	e7e4      	b.n	8000e84 <__udivmoddi4+0x284>
 8000eba:	4628      	mov	r0, r5
 8000ebc:	e7d7      	b.n	8000e6e <__udivmoddi4+0x26e>
 8000ebe:	4640      	mov	r0, r8
 8000ec0:	e791      	b.n	8000de6 <__udivmoddi4+0x1e6>
 8000ec2:	4681      	mov	r9, r0
 8000ec4:	e7be      	b.n	8000e44 <__udivmoddi4+0x244>
 8000ec6:	4601      	mov	r1, r0
 8000ec8:	e778      	b.n	8000dbc <__udivmoddi4+0x1bc>
 8000eca:	3802      	subs	r0, #2
 8000ecc:	443c      	add	r4, r7
 8000ece:	e745      	b.n	8000d5c <__udivmoddi4+0x15c>
 8000ed0:	4608      	mov	r0, r1
 8000ed2:	e708      	b.n	8000ce6 <__udivmoddi4+0xe6>
 8000ed4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed8:	443d      	add	r5, r7
 8000eda:	e72b      	b.n	8000d34 <__udivmoddi4+0x134>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee2:	4a0e      	ldr	r2, [pc, #56]	; (8000f1c <HAL_InitTick+0x3c>)
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <HAL_InitTick+0x40>)
{
 8000ee6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee8:	7818      	ldrb	r0, [r3, #0]
 8000eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eee:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ef2:	6810      	ldr	r0, [r2, #0]
 8000ef4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ef8:	f000 fab8 	bl	800146c <HAL_SYSTICK_Config>
 8000efc:	4604      	mov	r4, r0
 8000efe:	b958      	cbnz	r0, 8000f18 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f00:	2d0f      	cmp	r5, #15
 8000f02:	d809      	bhi.n	8000f18 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f04:	4602      	mov	r2, r0
 8000f06:	4629      	mov	r1, r5
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f0c:	f000 fa6e 	bl	80013ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f10:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <HAL_InitTick+0x44>)
 8000f12:	4620      	mov	r0, r4
 8000f14:	601d      	str	r5, [r3, #0]
 8000f16:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000f18:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000f1a:	bd38      	pop	{r3, r4, r5, pc}
 8000f1c:	20000010 	.word	0x20000010
 8000f20:	20000000 	.word	0x20000000
 8000f24:	20000004 	.word	0x20000004

08000f28 <HAL_Init>:
{
 8000f28:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <HAL_Init+0x30>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f32:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f3a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f42:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f44:	2003      	movs	r0, #3
 8000f46:	f000 fa3f 	bl	80013c8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f4a:	200f      	movs	r0, #15
 8000f4c:	f7ff ffc8 	bl	8000ee0 <HAL_InitTick>
  HAL_MspInit();
 8000f50:	f006 fe42 	bl	8007bd8 <HAL_MspInit>
}
 8000f54:	2000      	movs	r0, #0
 8000f56:	bd08      	pop	{r3, pc}
 8000f58:	40023c00 	.word	0x40023c00

08000f5c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f5c:	4a03      	ldr	r2, [pc, #12]	; (8000f6c <HAL_IncTick+0x10>)
 8000f5e:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <HAL_IncTick+0x14>)
 8000f60:	6811      	ldr	r1, [r2, #0]
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	440b      	add	r3, r1
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20003fa0 	.word	0x20003fa0
 8000f70:	20000000 	.word	0x20000000

08000f74 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f74:	4b01      	ldr	r3, [pc, #4]	; (8000f7c <HAL_GetTick+0x8>)
 8000f76:	6818      	ldr	r0, [r3, #0]
}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20003fa0 	.word	0x20003fa0

08000f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f80:	b538      	push	{r3, r4, r5, lr}
 8000f82:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f84:	f7ff fff6 	bl	8000f74 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f88:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8a:	bf1c      	itt	ne
 8000f8c:	4b05      	ldrne	r3, [pc, #20]	; (8000fa4 <HAL_Delay+0x24>)
 8000f8e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000f90:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000f92:	bf18      	it	ne
 8000f94:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f96:	f7ff ffed 	bl	8000f74 <HAL_GetTick>
 8000f9a:	1b40      	subs	r0, r0, r5
 8000f9c:	4284      	cmp	r4, r0
 8000f9e:	d8fa      	bhi.n	8000f96 <HAL_Delay+0x16>
  {
  }
}
 8000fa0:	bd38      	pop	{r3, r4, r5, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000000 	.word	0x20000000

08000fa8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000fa8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check CAN handle */
  if (hcan == NULL)
 8000faa:	4604      	mov	r4, r0
 8000fac:	2800      	cmp	r0, #0
 8000fae:	d06e      	beq.n	800108e <HAL_CAN_Init+0xe6>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 8000fb0:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000fb4:	b90b      	cbnz	r3, 8000fba <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000fb6:	f005 f96f 	bl	8006298 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000fba:	6822      	ldr	r2, [r4, #0]
 8000fbc:	6813      	ldr	r3, [r2, #0]
 8000fbe:	f023 0302 	bic.w	r3, r3, #2
 8000fc2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fc4:	f7ff ffd6 	bl	8000f74 <HAL_GetTick>
 8000fc8:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 8000fca:	6823      	ldr	r3, [r4, #0]
 8000fcc:	685a      	ldr	r2, [r3, #4]
 8000fce:	0791      	lsls	r1, r2, #30
 8000fd0:	d451      	bmi.n	8001076 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	f042 0201 	orr.w	r2, r2, #1
 8000fd8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fda:	f7ff ffcb 	bl	8000f74 <HAL_GetTick>
 8000fde:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 8000fe0:	6823      	ldr	r3, [r4, #0]
 8000fe2:	685a      	ldr	r2, [r3, #4]
 8000fe4:	07d2      	lsls	r2, r2, #31
 8000fe6:	d554      	bpl.n	8001092 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000fe8:	7e22      	ldrb	r2, [r4, #24]
 8000fea:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	bf0c      	ite	eq
 8000ff0:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ff4:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8000ff8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ffa:	7e62      	ldrb	r2, [r4, #25]
 8000ffc:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	bf0c      	ite	eq
 8001002:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001006:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 800100a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800100c:	7ea2      	ldrb	r2, [r4, #26]
 800100e:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	bf0c      	ite	eq
 8001014:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001018:	f022 0220 	bicne.w	r2, r2, #32
 800101c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800101e:	7ee2      	ldrb	r2, [r4, #27]
 8001020:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	bf0c      	ite	eq
 8001026:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800102a:	f042 0210 	orrne.w	r2, r2, #16
 800102e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001030:	7f22      	ldrb	r2, [r4, #28]
 8001032:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	bf0c      	ite	eq
 8001038:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800103c:	f022 0208 	bicne.w	r2, r2, #8
 8001040:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001042:	7f62      	ldrb	r2, [r4, #29]
 8001044:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	bf0c      	ite	eq
 800104a:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800104e:	f022 0204 	bicne.w	r2, r2, #4
 8001052:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001054:	68e1      	ldr	r1, [r4, #12]
 8001056:	68a2      	ldr	r2, [r4, #8]
 8001058:	430a      	orrs	r2, r1
 800105a:	6921      	ldr	r1, [r4, #16]
 800105c:	430a      	orrs	r2, r1
 800105e:	6961      	ldr	r1, [r4, #20]
 8001060:	430a      	orrs	r2, r1
 8001062:	6861      	ldr	r1, [r4, #4]
 8001064:	3901      	subs	r1, #1
 8001066:	430a      	orrs	r2, r1
 8001068:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800106a:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800106c:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800106e:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8001070:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8001074:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001076:	f7ff ff7d 	bl	8000f74 <HAL_GetTick>
 800107a:	1b40      	subs	r0, r0, r5
 800107c:	280a      	cmp	r0, #10
 800107e:	d9a4      	bls.n	8000fca <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001080:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001082:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001086:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8001088:	2305      	movs	r3, #5
 800108a:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 800108e:	2001      	movs	r0, #1
}
 8001090:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001092:	f7ff ff6f 	bl	8000f74 <HAL_GetTick>
 8001096:	1b40      	subs	r0, r0, r5
 8001098:	280a      	cmp	r0, #10
 800109a:	d9a1      	bls.n	8000fe0 <HAL_CAN_Init+0x38>
 800109c:	e7f0      	b.n	8001080 <HAL_CAN_Init+0xd8>
	...

080010a0 <HAL_CAN_ConfigFilter>:
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos = 0U;
  CAN_TypeDef *can_ip = hcan->Instance;

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80010a0:	f890 3020 	ldrb.w	r3, [r0, #32]
 80010a4:	2b01      	cmp	r3, #1
{
 80010a6:	b530      	push	{r4, r5, lr}
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80010a8:	d003      	beq.n	80010b2 <HAL_CAN_ConfigFilter+0x12>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 80010aa:	f890 3020 	ldrb.w	r3, [r0, #32]
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d177      	bne.n	80011a2 <HAL_CAN_ConfigFilter+0x102>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010b2:	4b3f      	ldr	r3, [pc, #252]	; (80011b0 <HAL_CAN_ConfigFilter+0x110>)
 80010b4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80010b8:	f042 0201 	orr.w	r2, r2, #1
 80010bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80010c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80010c4:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80010c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80010cc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80010d0:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80010d2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80010d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (1U) << sFilterConfig->FilterBank;
 80010da:	6948      	ldr	r0, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80010dc:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (1U) << sFilterConfig->FilterBank;
 80010e0:	2401      	movs	r4, #1
 80010e2:	4084      	lsls	r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80010e4:	43e2      	mvns	r2, r4
 80010e6:	4015      	ands	r5, r2
 80010e8:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80010ec:	69cd      	ldr	r5, [r1, #28]
 80010ee:	2d00      	cmp	r5, #0
 80010f0:	d136      	bne.n	8001160 <HAL_CAN_ConfigFilter+0xc0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80010f2:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 80010f6:	4015      	ands	r5, r2
 80010f8:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
 80010fc:	00c0      	lsls	r0, r0, #3

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80010fe:	68cd      	ldr	r5, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001100:	888b      	ldrh	r3, [r1, #4]
 8001102:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001106:	f500 40c8 	add.w	r0, r0, #25600	; 0x6400
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800110a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800110e:	f8c0 3240 	str.w	r3, [r0, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001112:	688d      	ldr	r5, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001114:	880b      	ldrh	r3, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001116:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800111a:	f8c0 3244 	str.w	r3, [r0, #580]	; 0x244
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800111e:	6988      	ldr	r0, [r1, #24]
 8001120:	4b23      	ldr	r3, [pc, #140]	; (80011b0 <HAL_CAN_ConfigFilter+0x110>)
 8001122:	2800      	cmp	r0, #0
 8001124:	d135      	bne.n	8001192 <HAL_CAN_ConfigFilter+0xf2>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001126:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 800112a:	4010      	ands	r0, r2
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800112c:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001130:	6908      	ldr	r0, [r1, #16]
 8001132:	bb90      	cbnz	r0, 800119a <HAL_CAN_ConfigFilter+0xfa>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001134:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8001138:	4002      	ands	r2, r0
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800113a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == ENABLE)
 800113e:	6a0b      	ldr	r3, [r1, #32]
 8001140:	4a1b      	ldr	r2, [pc, #108]	; (80011b0 <HAL_CAN_ConfigFilter+0x110>)
 8001142:	2b01      	cmp	r3, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001144:	bf02      	ittt	eq
 8001146:	f8d2 321c 	ldreq.w	r3, [r2, #540]	; 0x21c
 800114a:	4323      	orreq	r3, r4
 800114c:	f8c2 321c 	streq.w	r3, [r2, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001150:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8001154:	f023 0301 	bic.w	r3, r3, #1
 8001158:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800115c:	2000      	movs	r0, #0
 800115e:	bd30      	pop	{r4, r5, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001160:	2d01      	cmp	r5, #1
 8001162:	d1dc      	bne.n	800111e <HAL_CAN_ConfigFilter+0x7e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001164:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8001168:	4325      	orrs	r5, r4
 800116a:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800116e:	680b      	ldr	r3, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001170:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001172:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8001176:	00c3      	lsls	r3, r0, #3
 8001178:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800117c:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001180:	8988      	ldrh	r0, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001182:	f8c3 5240 	str.w	r5, [r3, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001186:	688d      	ldr	r5, [r1, #8]
 8001188:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800118c:	f8c3 0244 	str.w	r0, [r3, #580]	; 0x244
 8001190:	e7c5      	b.n	800111e <HAL_CAN_ConfigFilter+0x7e>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001192:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8001196:	4320      	orrs	r0, r4
 8001198:	e7c8      	b.n	800112c <HAL_CAN_ConfigFilter+0x8c>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800119a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800119e:	4322      	orrs	r2, r4
 80011a0:	e7cb      	b.n	800113a <HAL_CAN_ConfigFilter+0x9a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80011a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a8:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80011aa:	2001      	movs	r0, #1
  }
}
 80011ac:	bd30      	pop	{r4, r5, pc}
 80011ae:	bf00      	nop
 80011b0:	40006400 	.word	0x40006400

080011b4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80011b4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  if (hcan->State == HAL_CAN_STATE_READY)
 80011b6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80011ba:	2b01      	cmp	r3, #1
{
 80011bc:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 80011be:	d11f      	bne.n	8001200 <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011c0:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 80011c2:	2302      	movs	r3, #2
 80011c4:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011c8:	6813      	ldr	r3, [r2, #0]
 80011ca:	f023 0301 	bic.w	r3, r3, #1
 80011ce:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80011d0:	f7ff fed0 	bl	8000f74 <HAL_GetTick>
 80011d4:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != RESET)
 80011d6:	6823      	ldr	r3, [r4, #0]
 80011d8:	6858      	ldr	r0, [r3, #4]
 80011da:	f010 0001 	ands.w	r0, r0, #1
 80011de:	d101      	bne.n	80011e4 <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011e0:	6260      	str	r0, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80011e2:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011e4:	f7ff fec6 	bl	8000f74 <HAL_GetTick>
 80011e8:	1b40      	subs	r0, r0, r5
 80011ea:	280a      	cmp	r0, #10
 80011ec:	d9f3      	bls.n	80011d6 <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f4:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80011f6:	2305      	movs	r3, #5
 80011f8:	f884 3020 	strb.w	r3, [r4, #32]
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
 80011fc:	2001      	movs	r0, #1
  }
}
 80011fe:	bd38      	pop	{r3, r4, r5, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001200:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001202:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001206:	6243      	str	r3, [r0, #36]	; 0x24
 8001208:	e7f8      	b.n	80011fc <HAL_CAN_Start+0x48>

0800120a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800120a:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 800120c:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001210:	2c01      	cmp	r4, #1
 8001212:	d003      	beq.n	800121c <HAL_CAN_AddTxMessage+0x12>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8001214:	f890 4020 	ldrb.w	r4, [r0, #32]
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8001218:	2c02      	cmp	r4, #2
 800121a:	d141      	bne.n	80012a0 <HAL_CAN_AddTxMessage+0x96>
  {
    /* Check that all the Tx mailboxes are not full */
    if (((hcan->Instance->TSR & CAN_TSR_TME0) != RESET) ||
 800121c:	6804      	ldr	r4, [r0, #0]
 800121e:	68a5      	ldr	r5, [r4, #8]
 8001220:	016f      	lsls	r7, r5, #5
 8001222:	d405      	bmi.n	8001230 <HAL_CAN_AddTxMessage+0x26>
        ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 8001224:	68a5      	ldr	r5, [r4, #8]
    if (((hcan->Instance->TSR & CAN_TSR_TME0) != RESET) ||
 8001226:	012e      	lsls	r6, r5, #4
 8001228:	d402      	bmi.n	8001230 <HAL_CAN_AddTxMessage+0x26>
        ((hcan->Instance->TSR & CAN_TSR_TME2) != RESET))
 800122a:	68a5      	ldr	r5, [r4, #8]
        ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 800122c:	00ed      	lsls	r5, r5, #3
 800122e:	d531      	bpl.n	8001294 <HAL_CAN_AddTxMessage+0x8a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (hcan->Instance->TSR & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001230:	68a0      	ldr	r0, [r4, #8]

      /* Store the Tx mailbox */
      *pTxMailbox = 1U << transmitmailbox;
 8001232:	2501      	movs	r5, #1
      transmitmailbox = (hcan->Instance->TSR & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001234:	f3c0 6001 	ubfx	r0, r0, #24, #2
      *pTxMailbox = 1U << transmitmailbox;
 8001238:	4085      	lsls	r5, r0
 800123a:	601d      	str	r5, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800123c:	688d      	ldr	r5, [r1, #8]
 800123e:	68cf      	ldr	r7, [r1, #12]
 8001240:	f100 0318 	add.w	r3, r0, #24
 8001244:	bb0d      	cbnz	r5, 800128a <HAL_CAN_AddTxMessage+0x80>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001246:	680d      	ldr	r5, [r1, #0]
 8001248:	ea47 5545 	orr.w	r5, r7, r5, lsl #21
                                                           pHeader->RTR);
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800124c:	011b      	lsls	r3, r3, #4
 800124e:	0100      	lsls	r0, r0, #4
 8001250:	50e5      	str	r5, [r4, r3]
 8001252:	1823      	adds	r3, r4, r0
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001254:	690d      	ldr	r5, [r1, #16]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001256:	7d09      	ldrb	r1, [r1, #20]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001258:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 800125c:	2901      	cmp	r1, #1
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800125e:	bf02      	ittt	eq
 8001260:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 8001264:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8001268:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800126c:	4404      	add	r4, r0
 800126e:	6851      	ldr	r1, [r2, #4]
 8001270:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001274:	6812      	ldr	r2, [r2, #0]
 8001276:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800127a:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800127e:	f042 0201 	orr.w	r2, r2, #1
 8001282:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

      /* Return function status */
      return HAL_OK;
 8001286:	2000      	movs	r0, #0
 8001288:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800128a:	684e      	ldr	r6, [r1, #4]
                                                           pHeader->IDE |
 800128c:	433d      	orrs	r5, r7
 800128e:	ea45 05c6 	orr.w	r5, r5, r6, lsl #3
 8001292:	e7db      	b.n	800124c <HAL_CAN_AddTxMessage+0x42>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001294:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001296:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800129a:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800129c:	2001      	movs	r0, #1
  }
}
 800129e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80012a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a6:	e7f8      	b.n	800129a <HAL_CAN_AddTxMessage+0x90>

080012a8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80012a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80012aa:	f890 4020 	ldrb.w	r4, [r0, #32]
 80012ae:	2c01      	cmp	r4, #1
 80012b0:	d003      	beq.n	80012ba <HAL_CAN_GetRxMessage+0x12>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 80012b2:	f890 4020 	ldrb.w	r4, [r0, #32]
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80012b6:	2c02      	cmp	r4, #2
 80012b8:	d170      	bne.n	800139c <HAL_CAN_GetRxMessage+0xf4>
 80012ba:	6806      	ldr	r6, [r0, #0]
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80012bc:	b941      	cbnz	r1, 80012d0 <HAL_CAN_GetRxMessage+0x28>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == RESET)
 80012be:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == RESET)
 80012c0:	07a4      	lsls	r4, r4, #30
 80012c2:	d109      	bne.n	80012d8 <HAL_CAN_GetRxMessage+0x30>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80012c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012ca:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80012cc:	2001      	movs	r0, #1
 80012ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
 80012d0:	2901      	cmp	r1, #1
 80012d2:	d101      	bne.n	80012d8 <HAL_CAN_GetRxMessage+0x30>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == RESET)
 80012d4:	6934      	ldr	r4, [r6, #16]
 80012d6:	e7f3      	b.n	80012c0 <HAL_CAN_GetRxMessage+0x18>
 80012d8:	010c      	lsls	r4, r1, #4
 80012da:	1935      	adds	r5, r6, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80012dc:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80012e0:	f007 0704 	and.w	r7, r7, #4
 80012e4:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80012e6:	2f00      	cmp	r7, #0
 80012e8:	d14b      	bne.n	8001382 <HAL_CAN_GetRxMessage+0xda>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80012ea:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80012ee:	0d7f      	lsrs	r7, r7, #21
 80012f0:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 80012f2:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80012f6:	f3c7 0740 	ubfx	r7, r7, #1, #1
 80012fa:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80012fc:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 8001300:	f007 070f 	and.w	r7, r7, #15
 8001304:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001306:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800130a:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    aData[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos;
 800130e:	4426      	add	r6, r4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001310:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001314:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001316:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001318:	6155      	str	r5, [r2, #20]
    aData[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos;
 800131a:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 800131e:	701a      	strb	r2, [r3, #0]
    aData[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos;
 8001320:	6802      	ldr	r2, [r0, #0]
 8001322:	4422      	add	r2, r4
 8001324:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8001328:	0a12      	lsrs	r2, r2, #8
 800132a:	705a      	strb	r2, [r3, #1]
    aData[2] = (CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos;
 800132c:	6802      	ldr	r2, [r0, #0]
 800132e:	4422      	add	r2, r4
 8001330:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8001334:	0c12      	lsrs	r2, r2, #16
 8001336:	709a      	strb	r2, [r3, #2]
    aData[3] = (CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos;
 8001338:	6802      	ldr	r2, [r0, #0]
 800133a:	4422      	add	r2, r4
 800133c:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8001340:	0e12      	lsrs	r2, r2, #24
 8001342:	70da      	strb	r2, [r3, #3]
    aData[4] = (CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos;
 8001344:	6802      	ldr	r2, [r0, #0]
 8001346:	4422      	add	r2, r4
 8001348:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800134c:	711a      	strb	r2, [r3, #4]
    aData[5] = (CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos;
 800134e:	6802      	ldr	r2, [r0, #0]
 8001350:	4422      	add	r2, r4
 8001352:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8001356:	0a12      	lsrs	r2, r2, #8
 8001358:	715a      	strb	r2, [r3, #5]
    aData[6] = (CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos;
 800135a:	6802      	ldr	r2, [r0, #0]
 800135c:	4422      	add	r2, r4
 800135e:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8001362:	0c12      	lsrs	r2, r2, #16
 8001364:	719a      	strb	r2, [r3, #6]
    aData[7] = (CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos;
 8001366:	6802      	ldr	r2, [r0, #0]
 8001368:	4414      	add	r4, r2
 800136a:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 800136e:	0e12      	lsrs	r2, r2, #24
 8001370:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001372:	b959      	cbnz	r1, 800138c <HAL_CAN_GetRxMessage+0xe4>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001374:	6802      	ldr	r2, [r0, #0]
 8001376:	68d3      	ldr	r3, [r2, #12]
 8001378:	f043 0320 	orr.w	r3, r3, #32
 800137c:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 800137e:	2000      	movs	r0, #0
  }
}
 8001380:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001382:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8001386:	08ff      	lsrs	r7, r7, #3
 8001388:	6057      	str	r7, [r2, #4]
 800138a:	e7b2      	b.n	80012f2 <HAL_CAN_GetRxMessage+0x4a>
    else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
 800138c:	2901      	cmp	r1, #1
 800138e:	d1f6      	bne.n	800137e <HAL_CAN_GetRxMessage+0xd6>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001390:	6802      	ldr	r2, [r0, #0]
 8001392:	6913      	ldr	r3, [r2, #16]
 8001394:	f043 0320 	orr.w	r3, r3, #32
 8001398:	6113      	str	r3, [r2, #16]
 800139a:	e7f0      	b.n	800137e <HAL_CAN_GetRxMessage+0xd6>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800139c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800139e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a2:	e792      	b.n	80012ca <HAL_CAN_GetRxMessage+0x22>

080013a4 <HAL_CAN_GetRxFifoFillLevel>:
  uint32_t filllevel = 0U;

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80013a4:	f890 3020 	ldrb.w	r3, [r0, #32]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d003      	beq.n	80013b4 <HAL_CAN_GetRxFifoFillLevel+0x10>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 80013ac:	f890 3020 	ldrb.w	r3, [r0, #32]
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d107      	bne.n	80013c4 <HAL_CAN_GetRxFifoFillLevel+0x20>
 80013b4:	6803      	ldr	r3, [r0, #0]
  {
    if (RxFifo == CAN_RX_FIFO0)
 80013b6:	b919      	cbnz	r1, 80013c0 <HAL_CAN_GetRxFifoFillLevel+0x1c>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80013b8:	68d8      	ldr	r0, [r3, #12]
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80013ba:	f000 0003 	and.w	r0, r0, #3
 80013be:	4770      	bx	lr
 80013c0:	6918      	ldr	r0, [r3, #16]
 80013c2:	e7fa      	b.n	80013ba <HAL_CAN_GetRxFifoFillLevel+0x16>
  uint32_t filllevel = 0U;
 80013c4:	2000      	movs	r0, #0
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
}
 80013c6:	4770      	bx	lr

080013c8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c8:	4a07      	ldr	r2, [pc, #28]	; (80013e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80013ca:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013cc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013d0:	041b      	lsls	r3, r3, #16
 80013d2:	0c1b      	lsrs	r3, r3, #16
 80013d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80013d8:	0200      	lsls	r0, r0, #8
 80013da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013de:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80013e2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80013e4:	60d3      	str	r3, [r2, #12]
 80013e6:	4770      	bx	lr
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013ec:	4b17      	ldr	r3, [pc, #92]	; (800144c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ee:	b530      	push	{r4, r5, lr}
 80013f0:	68dc      	ldr	r4, [r3, #12]
 80013f2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013fc:	2b04      	cmp	r3, #4
 80013fe:	bf28      	it	cs
 8001400:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001402:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001404:	f04f 0501 	mov.w	r5, #1
 8001408:	fa05 f303 	lsl.w	r3, r5, r3
 800140c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001410:	bf8c      	ite	hi
 8001412:	3c03      	subhi	r4, #3
 8001414:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001416:	4019      	ands	r1, r3
 8001418:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800141a:	fa05 f404 	lsl.w	r4, r5, r4
 800141e:	3c01      	subs	r4, #1
 8001420:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001422:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	ea42 0201 	orr.w	r2, r2, r1
 8001428:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142c:	bfaf      	iteee	ge
 800142e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001432:	f000 000f 	andlt.w	r0, r0, #15
 8001436:	4b06      	ldrlt	r3, [pc, #24]	; (8001450 <HAL_NVIC_SetPriority+0x64>)
 8001438:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143a:	bfa5      	ittet	ge
 800143c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001440:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001442:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001444:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001448:	bd30      	pop	{r4, r5, pc}
 800144a:	bf00      	nop
 800144c:	e000ed00 	.word	0xe000ed00
 8001450:	e000ed14 	.word	0xe000ed14

08001454 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001454:	0942      	lsrs	r2, r0, #5
 8001456:	2301      	movs	r3, #1
 8001458:	f000 001f 	and.w	r0, r0, #31
 800145c:	fa03 f000 	lsl.w	r0, r3, r0
 8001460:	4b01      	ldr	r3, [pc, #4]	; (8001468 <HAL_NVIC_EnableIRQ+0x14>)
 8001462:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001466:	4770      	bx	lr
 8001468:	e000e100 	.word	0xe000e100

0800146c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800146c:	3801      	subs	r0, #1
 800146e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001472:	d20a      	bcs.n	800148a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001476:	4a07      	ldr	r2, [pc, #28]	; (8001494 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001478:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147a:	21f0      	movs	r1, #240	; 0xf0
 800147c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001480:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001482:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001484:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800148a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000e010 	.word	0xe000e010
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001498:	6803      	ldr	r3, [r0, #0]
 800149a:	b2da      	uxtb	r2, r3
 800149c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014a0:	f023 0303 	bic.w	r3, r3, #3
 80014a4:	2118      	movs	r1, #24
 80014a6:	3a10      	subs	r2, #16
 80014a8:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014ac:	4904      	ldr	r1, [pc, #16]	; (80014c0 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80014ae:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80014b0:	bf88      	it	hi
 80014b2:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014b4:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80014b6:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014b8:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 80014ba:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	08009c18 	.word	0x08009c18

080014c4 <HAL_DMA_Init>:
{
 80014c4:	b570      	push	{r4, r5, r6, lr}
 80014c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80014c8:	f7ff fd54 	bl	8000f74 <HAL_GetTick>
 80014cc:	4605      	mov	r5, r0
  if(hdma == NULL)
 80014ce:	2c00      	cmp	r4, #0
 80014d0:	d071      	beq.n	80015b6 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80014d2:	2300      	movs	r3, #0
 80014d4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80014d8:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80014da:	2302      	movs	r3, #2
 80014dc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80014e0:	6813      	ldr	r3, [r2, #0]
 80014e2:	f023 0301 	bic.w	r3, r3, #1
 80014e6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014e8:	6821      	ldr	r1, [r4, #0]
 80014ea:	680b      	ldr	r3, [r1, #0]
 80014ec:	07d8      	lsls	r0, r3, #31
 80014ee:	d43c      	bmi.n	800156a <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 80014f0:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014f2:	4d32      	ldr	r5, [pc, #200]	; (80015bc <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014f4:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f6:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014f8:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014fa:	68a3      	ldr	r3, [r4, #8]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	68e2      	ldr	r2, [r4, #12]
 8001500:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001502:	6922      	ldr	r2, [r4, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	6962      	ldr	r2, [r4, #20]
 8001508:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800150a:	69e2      	ldr	r2, [r4, #28]
 800150c:	4303      	orrs	r3, r0
 800150e:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001510:	6a22      	ldr	r2, [r4, #32]
 8001512:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001514:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001516:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001518:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800151c:	bf01      	itttt	eq
 800151e:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8001520:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8001522:	4335      	orreq	r5, r6
 8001524:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8001526:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8001528:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800152a:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800152c:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001530:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001534:	d10b      	bne.n	800154e <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8001536:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001538:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800153a:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800153c:	b13d      	cbz	r5, 800154e <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800153e:	b9f8      	cbnz	r0, 8001580 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8001540:	2a01      	cmp	r2, #1
 8001542:	d02d      	beq.n	80015a0 <HAL_DMA_Init+0xdc>
 8001544:	d301      	bcc.n	800154a <HAL_DMA_Init+0x86>
 8001546:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001548:	d101      	bne.n	800154e <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800154a:	01ea      	lsls	r2, r5, #7
 800154c:	d42b      	bmi.n	80015a6 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 800154e:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001550:	4620      	mov	r0, r4
 8001552:	f7ff ffa1 	bl	8001498 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001556:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001558:	233f      	movs	r3, #63	; 0x3f
 800155a:	4093      	lsls	r3, r2
 800155c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800155e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001560:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001562:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001564:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001568:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800156a:	f7ff fd03 	bl	8000f74 <HAL_GetTick>
 800156e:	1b40      	subs	r0, r0, r5
 8001570:	2805      	cmp	r0, #5
 8001572:	d9b9      	bls.n	80014e8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001574:	2320      	movs	r3, #32
 8001576:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001578:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 800157a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800157e:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001580:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001584:	d113      	bne.n	80015ae <HAL_DMA_Init+0xea>
    switch (tmp)
 8001586:	2a03      	cmp	r2, #3
 8001588:	d8e1      	bhi.n	800154e <HAL_DMA_Init+0x8a>
 800158a:	a001      	add	r0, pc, #4	; (adr r0, 8001590 <HAL_DMA_Init+0xcc>)
 800158c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001590:	080015a7 	.word	0x080015a7
 8001594:	0800154b 	.word	0x0800154b
 8001598:	080015a7 	.word	0x080015a7
 800159c:	080015a1 	.word	0x080015a1
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015a0:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80015a4:	d1d3      	bne.n	800154e <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015a6:	2340      	movs	r3, #64	; 0x40
 80015a8:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80015aa:	2001      	movs	r0, #1
 80015ac:	e7e5      	b.n	800157a <HAL_DMA_Init+0xb6>
    switch (tmp)
 80015ae:	2a02      	cmp	r2, #2
 80015b0:	d9f9      	bls.n	80015a6 <HAL_DMA_Init+0xe2>
 80015b2:	2a03      	cmp	r2, #3
 80015b4:	e7c8      	b.n	8001548 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 80015b6:	2001      	movs	r0, #1
 80015b8:	bd70      	pop	{r4, r5, r6, pc}
 80015ba:	bf00      	nop
 80015bc:	f010803f 	.word	0xf010803f

080015c0 <HAL_DMA_Start_IT>:
{
 80015c0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80015c2:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80015c6:	2c01      	cmp	r4, #1
 80015c8:	d036      	beq.n	8001638 <HAL_DMA_Start_IT+0x78>
 80015ca:	2401      	movs	r4, #1
 80015cc:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80015d0:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015d4:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 80015d6:	2c01      	cmp	r4, #1
 80015d8:	f04f 0500 	mov.w	r5, #0
 80015dc:	f04f 0402 	mov.w	r4, #2
 80015e0:	d128      	bne.n	8001634 <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 80015e2:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80015e6:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015e8:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80015ea:	6825      	ldr	r5, [r4, #0]
 80015ec:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80015f0:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80015f2:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015f4:	6883      	ldr	r3, [r0, #8]
 80015f6:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 80015f8:	bf0e      	itee	eq
 80015fa:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80015fc:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80015fe:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001600:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8001602:	bf08      	it	eq
 8001604:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001606:	233f      	movs	r3, #63	; 0x3f
 8001608:	4093      	lsls	r3, r2
 800160a:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800160c:	6823      	ldr	r3, [r4, #0]
 800160e:	f043 0316 	orr.w	r3, r3, #22
 8001612:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001614:	6963      	ldr	r3, [r4, #20]
 8001616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800161a:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 800161c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800161e:	b11b      	cbz	r3, 8001628 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001620:	6823      	ldr	r3, [r4, #0]
 8001622:	f043 0308 	orr.w	r3, r3, #8
 8001626:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001628:	6823      	ldr	r3, [r4, #0]
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001630:	2000      	movs	r0, #0
 8001632:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8001634:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8001638:	2002      	movs	r0, #2
}
 800163a:	bd70      	pop	{r4, r5, r6, pc}

0800163c <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800163c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001640:	2b02      	cmp	r3, #2
 8001642:	d003      	beq.n	800164c <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001648:	2001      	movs	r0, #1
 800164a:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 800164c:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800164e:	2305      	movs	r3, #5
 8001650:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001654:	6813      	ldr	r3, [r2, #0]
 8001656:	f023 0301 	bic.w	r3, r3, #1
 800165a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800165c:	2000      	movs	r0, #0
}
 800165e:	4770      	bx	lr

08001660 <HAL_DMA_IRQHandler>:
{
 8001660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8001662:	2300      	movs	r3, #0
 8001664:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001666:	4b5a      	ldr	r3, [pc, #360]	; (80017d0 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001668:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800166a:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800166c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800166e:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001670:	2208      	movs	r2, #8
 8001672:	409a      	lsls	r2, r3
 8001674:	4216      	tst	r6, r2
{
 8001676:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001678:	d00c      	beq.n	8001694 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800167a:	6801      	ldr	r1, [r0, #0]
 800167c:	6808      	ldr	r0, [r1, #0]
 800167e:	0740      	lsls	r0, r0, #29
 8001680:	d508      	bpl.n	8001694 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001682:	6808      	ldr	r0, [r1, #0]
 8001684:	f020 0004 	bic.w	r0, r0, #4
 8001688:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800168a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800168c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800168e:	f042 0201 	orr.w	r2, r2, #1
 8001692:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001694:	2201      	movs	r2, #1
 8001696:	409a      	lsls	r2, r3
 8001698:	4216      	tst	r6, r2
 800169a:	d008      	beq.n	80016ae <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800169c:	6821      	ldr	r1, [r4, #0]
 800169e:	6949      	ldr	r1, [r1, #20]
 80016a0:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80016a2:	bf41      	itttt	mi
 80016a4:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016a6:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80016a8:	f042 0202 	orrmi.w	r2, r2, #2
 80016ac:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80016ae:	2204      	movs	r2, #4
 80016b0:	409a      	lsls	r2, r3
 80016b2:	4216      	tst	r6, r2
 80016b4:	d008      	beq.n	80016c8 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80016b6:	6821      	ldr	r1, [r4, #0]
 80016b8:	6809      	ldr	r1, [r1, #0]
 80016ba:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80016bc:	bf41      	itttt	mi
 80016be:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016c0:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80016c2:	f042 0204 	orrmi.w	r2, r2, #4
 80016c6:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80016c8:	2210      	movs	r2, #16
 80016ca:	409a      	lsls	r2, r3
 80016cc:	4216      	tst	r6, r2
 80016ce:	d010      	beq.n	80016f2 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016d0:	6823      	ldr	r3, [r4, #0]
 80016d2:	6819      	ldr	r1, [r3, #0]
 80016d4:	0709      	lsls	r1, r1, #28
 80016d6:	d50c      	bpl.n	80016f2 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016d8:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	0350      	lsls	r0, r2, #13
 80016de:	d535      	bpl.n	800174c <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	0319      	lsls	r1, r3, #12
 80016e4:	d401      	bmi.n	80016ea <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80016e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016e8:	e000      	b.n	80016ec <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016ea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80016ec:	b10b      	cbz	r3, 80016f2 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80016ee:	4620      	mov	r0, r4
 80016f0:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016f2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80016f4:	2220      	movs	r2, #32
 80016f6:	408a      	lsls	r2, r1
 80016f8:	4216      	tst	r6, r2
 80016fa:	d038      	beq.n	800176e <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016fc:	6823      	ldr	r3, [r4, #0]
 80016fe:	6818      	ldr	r0, [r3, #0]
 8001700:	06c6      	lsls	r6, r0, #27
 8001702:	d534      	bpl.n	800176e <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001704:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001706:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800170a:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800170c:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800170e:	d125      	bne.n	800175c <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001710:	f022 0216 	bic.w	r2, r2, #22
 8001714:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001716:	695a      	ldr	r2, [r3, #20]
 8001718:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800171c:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800171e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001720:	b90a      	cbnz	r2, 8001726 <HAL_DMA_IRQHandler+0xc6>
 8001722:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001724:	b11a      	cbz	r2, 800172e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	f022 0208 	bic.w	r2, r2, #8
 800172c:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800172e:	233f      	movs	r3, #63	; 0x3f
 8001730:	408b      	lsls	r3, r1
 8001732:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8001734:	2300      	movs	r3, #0
 8001736:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800173a:	2301      	movs	r3, #1
 800173c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001740:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8001742:	b10b      	cbz	r3, 8001748 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8001744:	4620      	mov	r0, r4
 8001746:	4798      	blx	r3
}
 8001748:	b003      	add	sp, #12
 800174a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001750:	bf5e      	ittt	pl
 8001752:	681a      	ldrpl	r2, [r3, #0]
 8001754:	f022 0208 	bicpl.w	r2, r2, #8
 8001758:	601a      	strpl	r2, [r3, #0]
 800175a:	e7c4      	b.n	80016e6 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800175c:	0350      	lsls	r0, r2, #13
 800175e:	d528      	bpl.n	80017b2 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	0319      	lsls	r1, r3, #12
 8001764:	d432      	bmi.n	80017cc <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8001766:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8001768:	b10b      	cbz	r3, 800176e <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 800176a:	4620      	mov	r0, r4
 800176c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800176e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0e9      	beq.n	8001748 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001774:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001776:	07da      	lsls	r2, r3, #31
 8001778:	d519      	bpl.n	80017ae <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 800177a:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 800177c:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 800177e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001782:	6813      	ldr	r3, [r2, #0]
 8001784:	f023 0301 	bic.w	r3, r3, #1
 8001788:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800178a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800178e:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8001792:	9b01      	ldr	r3, [sp, #4]
 8001794:	3301      	adds	r3, #1
 8001796:	429f      	cmp	r7, r3
 8001798:	9301      	str	r3, [sp, #4]
 800179a:	d302      	bcc.n	80017a2 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800179c:	6813      	ldr	r3, [r2, #0]
 800179e:	07db      	lsls	r3, r3, #31
 80017a0:	d4f7      	bmi.n	8001792 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 80017a2:	2300      	movs	r3, #0
 80017a4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80017a8:	2301      	movs	r3, #1
 80017aa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80017ae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80017b0:	e7c7      	b.n	8001742 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80017b8:	d108      	bne.n	80017cc <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017ba:	6819      	ldr	r1, [r3, #0]
 80017bc:	f021 0110 	bic.w	r1, r1, #16
 80017c0:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80017c2:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80017c4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80017c8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80017cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017ce:	e7cb      	b.n	8001768 <HAL_DMA_IRQHandler+0x108>
 80017d0:	20000010 	.word	0x20000010

080017d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017d8:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017da:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017dc:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8001980 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017e0:	4a65      	ldr	r2, [pc, #404]	; (8001978 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017e2:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8001984 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017e6:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017e8:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80017ea:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ee:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80017f0:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017f4:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80017f8:	45b6      	cmp	lr, r6
 80017fa:	f040 80aa 	bne.w	8001952 <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017fe:	684c      	ldr	r4, [r1, #4]
 8001800:	f024 0710 	bic.w	r7, r4, #16
 8001804:	2f02      	cmp	r7, #2
 8001806:	d116      	bne.n	8001836 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001808:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800180c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001810:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001814:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001818:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800181c:	f04f 0c0f 	mov.w	ip, #15
 8001820:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001824:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001828:	690d      	ldr	r5, [r1, #16]
 800182a:	fa05 f50b 	lsl.w	r5, r5, fp
 800182e:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001832:	f8ca 5020 	str.w	r5, [sl, #32]
 8001836:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800183a:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800183c:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001840:	fa05 f50a 	lsl.w	r5, r5, sl
 8001844:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001846:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800184a:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800184e:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001852:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001854:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001858:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800185a:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800185e:	d811      	bhi.n	8001884 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001860:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001862:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001866:	68cf      	ldr	r7, [r1, #12]
 8001868:	fa07 fc0a 	lsl.w	ip, r7, sl
 800186c:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001870:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001872:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001874:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001878:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800187c:	409f      	lsls	r7, r3
 800187e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001882:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001884:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001886:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001888:	688f      	ldr	r7, [r1, #8]
 800188a:	fa07 f70a 	lsl.w	r7, r7, sl
 800188e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001890:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001892:	00e5      	lsls	r5, r4, #3
 8001894:	d55d      	bpl.n	8001952 <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001896:	f04f 0b00 	mov.w	fp, #0
 800189a:	f8cd b00c 	str.w	fp, [sp, #12]
 800189e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018a2:	4d36      	ldr	r5, [pc, #216]	; (800197c <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a4:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80018a8:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80018ac:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80018b0:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80018b4:	9703      	str	r7, [sp, #12]
 80018b6:	9f03      	ldr	r7, [sp, #12]
 80018b8:	f023 0703 	bic.w	r7, r3, #3
 80018bc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80018c0:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018c4:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80018c8:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018cc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80018d0:	f04f 0e0f 	mov.w	lr, #15
 80018d4:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018d8:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018da:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018de:	d03f      	beq.n	8001960 <HAL_GPIO_Init+0x18c>
 80018e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018e4:	42a8      	cmp	r0, r5
 80018e6:	d03d      	beq.n	8001964 <HAL_GPIO_Init+0x190>
 80018e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018ec:	42a8      	cmp	r0, r5
 80018ee:	d03b      	beq.n	8001968 <HAL_GPIO_Init+0x194>
 80018f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018f4:	42a8      	cmp	r0, r5
 80018f6:	d039      	beq.n	800196c <HAL_GPIO_Init+0x198>
 80018f8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018fc:	42a8      	cmp	r0, r5
 80018fe:	d037      	beq.n	8001970 <HAL_GPIO_Init+0x19c>
 8001900:	4548      	cmp	r0, r9
 8001902:	d037      	beq.n	8001974 <HAL_GPIO_Init+0x1a0>
 8001904:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001908:	42a8      	cmp	r0, r5
 800190a:	bf14      	ite	ne
 800190c:	2507      	movne	r5, #7
 800190e:	2506      	moveq	r5, #6
 8001910:	fa05 f50c 	lsl.w	r5, r5, ip
 8001914:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001918:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800191a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800191c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800191e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001922:	bf0c      	ite	eq
 8001924:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001926:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001928:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800192a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800192c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001930:	bf0c      	ite	eq
 8001932:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001934:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001936:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001938:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800193a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800193e:	bf0c      	ite	eq
 8001940:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001942:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001944:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001946:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001948:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800194a:	bf54      	ite	pl
 800194c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800194e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001950:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001952:	3301      	adds	r3, #1
 8001954:	2b10      	cmp	r3, #16
 8001956:	f47f af48 	bne.w	80017ea <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800195a:	b005      	add	sp, #20
 800195c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001960:	465d      	mov	r5, fp
 8001962:	e7d5      	b.n	8001910 <HAL_GPIO_Init+0x13c>
 8001964:	2501      	movs	r5, #1
 8001966:	e7d3      	b.n	8001910 <HAL_GPIO_Init+0x13c>
 8001968:	2502      	movs	r5, #2
 800196a:	e7d1      	b.n	8001910 <HAL_GPIO_Init+0x13c>
 800196c:	2503      	movs	r5, #3
 800196e:	e7cf      	b.n	8001910 <HAL_GPIO_Init+0x13c>
 8001970:	2504      	movs	r5, #4
 8001972:	e7cd      	b.n	8001910 <HAL_GPIO_Init+0x13c>
 8001974:	2505      	movs	r5, #5
 8001976:	e7cb      	b.n	8001910 <HAL_GPIO_Init+0x13c>
 8001978:	40013c00 	.word	0x40013c00
 800197c:	40020000 	.word	0x40020000
 8001980:	40023800 	.word	0x40023800
 8001984:	40021400 	.word	0x40021400

08001988 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001988:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 800198a:	4604      	mov	r4, r0
 800198c:	2800      	cmp	r0, #0
 800198e:	d062      	beq.n	8001a56 <HAL_I2C_Init+0xce>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001990:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001994:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001998:	b91b      	cbnz	r3, 80019a2 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800199a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800199e:	f005 f9a5 	bl	8006cec <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019a2:	6822      	ldr	r2, [r4, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80019a4:	4e2d      	ldr	r6, [pc, #180]	; (8001a5c <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 80019a6:	4d2e      	ldr	r5, [pc, #184]	; (8001a60 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 80019a8:	2324      	movs	r3, #36	; 0x24
 80019aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80019ae:	6813      	ldr	r3, [r2, #0]
 80019b0:	f023 0301 	bic.w	r3, r3, #1
 80019b4:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019b6:	f000 f971 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80019ba:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 80019bc:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80019be:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80019c2:	42b3      	cmp	r3, r6
 80019c4:	bf84      	itt	hi
 80019c6:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 80019ca:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 80019cc:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80019ce:	bf91      	iteee	ls
 80019d0:	1c69      	addls	r1, r5, #1
 80019d2:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 80019d6:	fbb1 f1f5 	udivhi	r1, r1, r5
 80019da:	3101      	addhi	r1, #1

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80019dc:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80019de:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80019e0:	d821      	bhi.n	8001a26 <HAL_I2C_Init+0x9e>
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80019e8:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80019ec:	2b03      	cmp	r3, #3
 80019ee:	bf98      	it	ls
 80019f0:	2004      	movls	r0, #4

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019f2:	6a21      	ldr	r1, [r4, #32]
 80019f4:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80019f6:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019f8:	430b      	orrs	r3, r1
 80019fa:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80019fc:	68e1      	ldr	r1, [r4, #12]
 80019fe:	6923      	ldr	r3, [r4, #16]
 8001a00:	430b      	orrs	r3, r1
 8001a02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001a04:	69a1      	ldr	r1, [r4, #24]
 8001a06:	6963      	ldr	r3, [r4, #20]
 8001a08:	430b      	orrs	r3, r1
 8001a0a:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a0c:	6813      	ldr	r3, [r2, #0]
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a14:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001a16:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a18:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a1a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a1e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a20:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8001a24:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001a26:	68a1      	ldr	r1, [r4, #8]
 8001a28:	b949      	cbnz	r1, 8001a3e <HAL_I2C_Init+0xb6>
 8001a2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001a2e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a32:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001a36:	b163      	cbz	r3, 8001a52 <HAL_I2C_Init+0xca>
 8001a38:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001a3c:	e7d9      	b.n	80019f2 <HAL_I2C_Init+0x6a>
 8001a3e:	2119      	movs	r1, #25
 8001a40:	434b      	muls	r3, r1
 8001a42:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a46:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001a4a:	b113      	cbz	r3, 8001a52 <HAL_I2C_Init+0xca>
 8001a4c:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001a50:	e7cf      	b.n	80019f2 <HAL_I2C_Init+0x6a>
 8001a52:	2001      	movs	r0, #1
 8001a54:	e7cd      	b.n	80019f2 <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 8001a56:	2001      	movs	r0, #1
}
 8001a58:	bd70      	pop	{r4, r5, r6, pc}
 8001a5a:	bf00      	nop
 8001a5c:	000186a0 	.word	0x000186a0
 8001a60:	000f4240 	.word	0x000f4240

08001a64 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 8001a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a68:	9d06      	ldr	r5, [sp, #24]
 8001a6a:	4604      	mov	r4, r0
 8001a6c:	460f      	mov	r7, r1
 8001a6e:	4616      	mov	r6, r2
 8001a70:	4698      	mov	r8, r3
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001a72:	6821      	ldr	r1, [r4, #0]
 8001a74:	688a      	ldr	r2, [r1, #8]
 8001a76:	423a      	tst	r2, r7
 8001a78:	bf14      	ite	ne
 8001a7a:	2201      	movne	r2, #1
 8001a7c:	2200      	moveq	r2, #0
 8001a7e:	42b2      	cmp	r2, r6
 8001a80:	d102      	bne.n	8001a88 <QSPI_WaitFlagStateUntilTimeout+0x24>
        
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001a82:	2000      	movs	r0, #0
}
 8001a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001a88:	1c6b      	adds	r3, r5, #1
 8001a8a:	d0f3      	beq.n	8001a74 <QSPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001a8c:	b94d      	cbnz	r5, 8001aa2 <QSPI_WaitFlagStateUntilTimeout+0x3e>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8001a8e:	2304      	movs	r3, #4
 8001a90:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8001a94:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	6463      	str	r3, [r4, #68]	; 0x44
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001aa2:	f7ff fa67 	bl	8000f74 <HAL_GetTick>
 8001aa6:	eba0 0008 	sub.w	r0, r0, r8
 8001aaa:	4285      	cmp	r5, r0
 8001aac:	d2e1      	bcs.n	8001a72 <QSPI_WaitFlagStateUntilTimeout+0xe>
 8001aae:	e7ee      	b.n	8001a8e <QSPI_WaitFlagStateUntilTimeout+0x2a>

08001ab0 <HAL_QSPI_Init>:
{
 8001ab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001ab2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001ab4:	f7ff fa5e 	bl	8000f74 <HAL_GetTick>
 8001ab8:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8001aba:	2c00      	cmp	r4, #0
 8001abc:	d04d      	beq.n	8001b5a <HAL_QSPI_Init+0xaa>
  __HAL_LOCK(hqspi);
 8001abe:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d04b      	beq.n	8001b5e <HAL_QSPI_Init+0xae>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001acc:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8001ad0:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8001ad4:	b93a      	cbnz	r2, 8001ae6 <HAL_QSPI_Init+0x36>
    hqspi->Lock = HAL_UNLOCKED;
 8001ad6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8001ada:	4620      	mov	r0, r4
 8001adc:	f005 fa54 	bl	8006f88 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8001ae0:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ae4:	64a3      	str	r3, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1U) << 8U));
 8001ae6:	6820      	ldr	r0, [r4, #0]
 8001ae8:	68a1      	ldr	r1, [r4, #8]
 8001aea:	6802      	ldr	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001aec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1U) << 8U));
 8001aee:	3901      	subs	r1, #1
 8001af0:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8001af4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001af8:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001afa:	2120      	movs	r1, #32
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	2200      	movs	r2, #0
 8001b00:	462b      	mov	r3, r5
 8001b02:	4620      	mov	r0, r4
 8001b04:	f7ff ffae 	bl	8001a64 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8001b08:	bb10      	cbnz	r0, 8001b50 <HAL_QSPI_Init+0xa0>
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24U)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8001b0a:	69e5      	ldr	r5, [r4, #28]
 8001b0c:	68e3      	ldr	r3, [r4, #12]
 8001b0e:	6822      	ldr	r2, [r4, #0]
 8001b10:	432b      	orrs	r3, r5
 8001b12:	6a25      	ldr	r5, [r4, #32]
 8001b14:	6811      	ldr	r1, [r2, #0]
 8001b16:	432b      	orrs	r3, r5
 8001b18:	6865      	ldr	r5, [r4, #4]
 8001b1a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8001b1e:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8001b22:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 8001b26:	430b      	orrs	r3, r1
 8001b28:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8001b2a:	69a1      	ldr	r1, [r4, #24]
 8001b2c:	6963      	ldr	r3, [r4, #20]
 8001b2e:	6855      	ldr	r5, [r2, #4]
 8001b30:	430b      	orrs	r3, r1
 8001b32:	6921      	ldr	r1, [r4, #16]
 8001b34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001b38:	490a      	ldr	r1, [pc, #40]	; (8001b64 <HAL_QSPI_Init+0xb4>)
 8001b3a:	4029      	ands	r1, r5
 8001b3c:	430b      	orrs	r3, r1
 8001b3e:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8001b40:	6813      	ldr	r3, [r2, #0]
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8001b48:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8001b4a:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8001b4c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8001b50:	2300      	movs	r3, #0
 8001b52:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8001b56:	b003      	add	sp, #12
 8001b58:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8001b5a:	2001      	movs	r0, #1
 8001b5c:	e7fb      	b.n	8001b56 <HAL_QSPI_Init+0xa6>
  __HAL_LOCK(hqspi);
 8001b5e:	2002      	movs	r0, #2
 8001b60:	e7f9      	b.n	8001b56 <HAL_QSPI_Init+0xa6>
 8001b62:	bf00      	nop
 8001b64:	ffe0f8fe 	.word	0xffe0f8fe

08001b68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b6c:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b6e:	4604      	mov	r4, r0
 8001b70:	b910      	cbnz	r0, 8001b78 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8001b72:	2001      	movs	r0, #1
 8001b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b78:	4b44      	ldr	r3, [pc, #272]	; (8001c8c <HAL_RCC_ClockConfig+0x124>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	f002 020f 	and.w	r2, r2, #15
 8001b80:	428a      	cmp	r2, r1
 8001b82:	d328      	bcc.n	8001bd6 <HAL_RCC_ClockConfig+0x6e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b84:	6821      	ldr	r1, [r4, #0]
 8001b86:	078f      	lsls	r7, r1, #30
 8001b88:	d42d      	bmi.n	8001be6 <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b8a:	07c8      	lsls	r0, r1, #31
 8001b8c:	d440      	bmi.n	8001c10 <HAL_RCC_ClockConfig+0xa8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b8e:	4b3f      	ldr	r3, [pc, #252]	; (8001c8c <HAL_RCC_ClockConfig+0x124>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	f002 020f 	and.w	r2, r2, #15
 8001b96:	4295      	cmp	r5, r2
 8001b98:	d366      	bcc.n	8001c68 <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b9a:	6822      	ldr	r2, [r4, #0]
 8001b9c:	0751      	lsls	r1, r2, #29
 8001b9e:	d46c      	bmi.n	8001c7a <HAL_RCC_ClockConfig+0x112>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba0:	0713      	lsls	r3, r2, #28
 8001ba2:	d507      	bpl.n	8001bb4 <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ba4:	4a3a      	ldr	r2, [pc, #232]	; (8001c90 <HAL_RCC_ClockConfig+0x128>)
 8001ba6:	6921      	ldr	r1, [r4, #16]
 8001ba8:	6893      	ldr	r3, [r2, #8]
 8001baa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001bae:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001bb2:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bb4:	f000 fa9a 	bl	80020ec <HAL_RCC_GetSysClockFreq>
 8001bb8:	4b35      	ldr	r3, [pc, #212]	; (8001c90 <HAL_RCC_ClockConfig+0x128>)
 8001bba:	4a36      	ldr	r2, [pc, #216]	; (8001c94 <HAL_RCC_ClockConfig+0x12c>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001bc2:	5cd3      	ldrb	r3, [r2, r3]
 8001bc4:	40d8      	lsrs	r0, r3
 8001bc6:	4b34      	ldr	r3, [pc, #208]	; (8001c98 <HAL_RCC_ClockConfig+0x130>)
 8001bc8:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001bca:	200f      	movs	r0, #15
 8001bcc:	f7ff f988 	bl	8000ee0 <HAL_InitTick>

  return HAL_OK;
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd6:	b2ca      	uxtb	r2, r1
 8001bd8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 030f 	and.w	r3, r3, #15
 8001be0:	4299      	cmp	r1, r3
 8001be2:	d1c6      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xa>
 8001be4:	e7ce      	b.n	8001b84 <HAL_RCC_ClockConfig+0x1c>
 8001be6:	4b2a      	ldr	r3, [pc, #168]	; (8001c90 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bec:	bf1e      	ittt	ne
 8001bee:	689a      	ldrne	r2, [r3, #8]
 8001bf0:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001bf4:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf6:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bf8:	bf42      	ittt	mi
 8001bfa:	689a      	ldrmi	r2, [r3, #8]
 8001bfc:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001c00:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	68a0      	ldr	r0, [r4, #8]
 8001c06:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001c0a:	4302      	orrs	r2, r0
 8001c0c:	609a      	str	r2, [r3, #8]
 8001c0e:	e7bc      	b.n	8001b8a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c10:	6862      	ldr	r2, [r4, #4]
 8001c12:	4b1f      	ldr	r3, [pc, #124]	; (8001c90 <HAL_RCC_ClockConfig+0x128>)
 8001c14:	2a01      	cmp	r2, #1
 8001c16:	d11d      	bne.n	8001c54 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1e:	d0a8      	beq.n	8001b72 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c20:	4e1b      	ldr	r6, [pc, #108]	; (8001c90 <HAL_RCC_ClockConfig+0x128>)
 8001c22:	68b3      	ldr	r3, [r6, #8]
 8001c24:	f023 0303 	bic.w	r3, r3, #3
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001c2c:	f7ff f9a2 	bl	8000f74 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c30:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001c34:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c36:	68b3      	ldr	r3, [r6, #8]
 8001c38:	6862      	ldr	r2, [r4, #4]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
 8001c3e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001c42:	d0a4      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c44:	f7ff f996 	bl	8000f74 <HAL_GetTick>
 8001c48:	1bc0      	subs	r0, r0, r7
 8001c4a:	4540      	cmp	r0, r8
 8001c4c:	d9f3      	bls.n	8001c36 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001c4e:	2003      	movs	r0, #3
}
 8001c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c54:	1e91      	subs	r1, r2, #2
 8001c56:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c58:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c5a:	d802      	bhi.n	8001c62 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c5c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c60:	e7dd      	b.n	8001c1e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c62:	f013 0f02 	tst.w	r3, #2
 8001c66:	e7da      	b.n	8001c1e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c68:	b2ea      	uxtb	r2, r5
 8001c6a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	429d      	cmp	r5, r3
 8001c74:	f47f af7d 	bne.w	8001b72 <HAL_RCC_ClockConfig+0xa>
 8001c78:	e78f      	b.n	8001b9a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c7a:	4905      	ldr	r1, [pc, #20]	; (8001c90 <HAL_RCC_ClockConfig+0x128>)
 8001c7c:	68e0      	ldr	r0, [r4, #12]
 8001c7e:	688b      	ldr	r3, [r1, #8]
 8001c80:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001c84:	4303      	orrs	r3, r0
 8001c86:	608b      	str	r3, [r1, #8]
 8001c88:	e78a      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x38>
 8001c8a:	bf00      	nop
 8001c8c:	40023c00 	.word	0x40023c00
 8001c90:	40023800 	.word	0x40023800
 8001c94:	08009c64 	.word	0x08009c64
 8001c98:	20000010 	.word	0x20000010

08001c9c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001c9e:	4a05      	ldr	r2, [pc, #20]	; (8001cb4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001ca6:	5cd3      	ldrb	r3, [r2, r3]
 8001ca8:	4a03      	ldr	r2, [pc, #12]	; (8001cb8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001caa:	6810      	ldr	r0, [r2, #0]
}
 8001cac:	40d8      	lsrs	r0, r3
 8001cae:	4770      	bx	lr
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	08009c74 	.word	0x08009c74
 8001cb8:	20000010 	.word	0x20000010

08001cbc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cbc:	4b04      	ldr	r3, [pc, #16]	; (8001cd0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001cbe:	4a05      	ldr	r2, [pc, #20]	; (8001cd4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001cc6:	5cd3      	ldrb	r3, [r2, r3]
 8001cc8:	4a03      	ldr	r2, [pc, #12]	; (8001cd8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001cca:	6810      	ldr	r0, [r2, #0]
}
 8001ccc:	40d8      	lsrs	r0, r3
 8001cce:	4770      	bx	lr
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	08009c74 	.word	0x08009c74
 8001cd8:	20000010 	.word	0x20000010

08001cdc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001cdc:	6803      	ldr	r3, [r0, #0]
{
 8001cde:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001ce2:	f013 0601 	ands.w	r6, r3, #1
{
 8001ce6:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001ce8:	d00b      	beq.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001cea:	49aa      	ldr	r1, [pc, #680]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001cec:	6b86      	ldr	r6, [r0, #56]	; 0x38
 8001cee:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001cf2:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8001cf6:	4332      	orrs	r2, r6
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001cf8:	fab6 f686 	clz	r6, r6
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001cfc:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001d00:	0976      	lsrs	r6, r6, #5
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001d02:	079d      	lsls	r5, r3, #30
 8001d04:	d50b      	bpl.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001d06:	48a3      	ldr	r0, [pc, #652]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001d08:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001d0a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8001d0e:	f022 52c0 	bic.w	r2, r2, #402653184	; 0x18000000
 8001d12:	430a      	orrs	r2, r1
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1U;
 8001d14:	2900      	cmp	r1, #0
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001d16:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
      plli2sused = 1U;
 8001d1a:	bf08      	it	eq
 8001d1c:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001d1e:	f013 0504 	ands.w	r5, r3, #4
 8001d22:	d012      	beq.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d24:	499b      	ldr	r1, [pc, #620]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001d26:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8001d28:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001d2c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d30:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001d34:	ea42 0205 	orr.w	r2, r2, r5
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001d38:	bf18      	it	ne
 8001d3a:	fab5 f585 	clzne	r5, r5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d3e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001d42:	bf12      	itee	ne
 8001d44:	096d      	lsrne	r5, r5, #5
  uint32_t pllsaiused = 0U;
 8001d46:	2500      	moveq	r5, #0
      plli2sused = 1U;
 8001d48:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001d4a:	0718      	lsls	r0, r3, #28
 8001d4c:	d50f      	bpl.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d4e:	4891      	ldr	r0, [pc, #580]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001d50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d52:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8001d56:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001d5a:	430a      	orrs	r2, r1

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001d5c:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d60:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001d64:	f000 8109 	beq.w	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x29e>
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1U;
 8001d68:	2900      	cmp	r1, #0
 8001d6a:	bf08      	it	eq
 8001d6c:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d6e:	0699      	lsls	r1, r3, #26
 8001d70:	d533      	bpl.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	9301      	str	r3, [sp, #4]
 8001d76:	4b87      	ldr	r3, [pc, #540]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001d78:	4f87      	ldr	r7, [pc, #540]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d7c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d80:	641a      	str	r2, [r3, #64]	; 0x40
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d88:	9301      	str	r3, [sp, #4]
 8001d8a:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d92:	603b      	str	r3, [r7, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d94:	f7ff f8ee 	bl	8000f74 <HAL_GetTick>
 8001d98:	4680      	mov	r8, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	05da      	lsls	r2, r3, #23
 8001d9e:	f140 80ee 	bpl.w	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001da2:	4f7c      	ldr	r7, [pc, #496]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001da4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001da6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001daa:	f040 80fb 	bne.w	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001db0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001db4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001db8:	4a76      	ldr	r2, [pc, #472]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001dba:	f040 8116 	bne.w	8001fea <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8001dbe:	6891      	ldr	r1, [r2, #8]
 8001dc0:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001dc4:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001dc8:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001dcc:	4301      	orrs	r1, r0
 8001dce:	6091      	str	r1, [r2, #8]
 8001dd0:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001dd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd6:	430b      	orrs	r3, r1
 8001dd8:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001dda:	6823      	ldr	r3, [r4, #0]
 8001ddc:	06d9      	lsls	r1, r3, #27
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001dde:	bf42      	ittt	mi
 8001de0:	4b6e      	ldrmi	r3, [pc, #440]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001de2:	f894 2058 	ldrbmi.w	r2, [r4, #88]	; 0x58
 8001de6:	601a      	strmi	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001de8:	6823      	ldr	r3, [r4, #0]
 8001dea:	061a      	lsls	r2, r3, #24
 8001dec:	d508      	bpl.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001dee:	4969      	ldr	r1, [pc, #420]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001df0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001df2:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8001df6:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001dfa:	4302      	orrs	r2, r0
 8001dfc:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001e00:	065f      	lsls	r7, r3, #25
 8001e02:	d508      	bpl.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001e04:	4963      	ldr	r1, [pc, #396]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001e06:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001e08:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8001e0c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001e10:	4302      	orrs	r2, r0
 8001e12:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001e16:	05d8      	lsls	r0, r3, #23
 8001e18:	d50c      	bpl.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001e1a:	485e      	ldr	r0, [pc, #376]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001e1c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001e1e:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 8001e22:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 8001e26:	430a      	orrs	r2, r1

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
    {
      pllsaiused = 1U;
 8001e28:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001e2c:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
      pllsaiused = 1U;
 8001e30:	bf08      	it	eq
 8001e32:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001e34:	0599      	lsls	r1, r3, #22
 8001e36:	d508      	bpl.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001e38:	4956      	ldr	r1, [pc, #344]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001e3a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001e3c:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8001e40:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001e44:	4302      	orrs	r2, r0
 8001e46:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001e4a:	055a      	lsls	r2, r3, #21
 8001e4c:	f100 80d1 	bmi.w	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001e50:	2e01      	cmp	r6, #1
 8001e52:	f040 80dc 	bne.w	800200e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001e56:	4e52      	ldr	r6, [pc, #328]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e58:	4f4e      	ldr	r7, [pc, #312]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    __HAL_RCC_PLLI2S_DISABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001e5e:	f7ff f889 	bl	8000f74 <HAL_GetTick>
 8001e62:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	011b      	lsls	r3, r3, #4
 8001e68:	f100 8125 	bmi.w	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001e6c:	6822      	ldr	r2, [r4, #0]
 8001e6e:	07d0      	lsls	r0, r2, #31
 8001e70:	d501      	bpl.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x19a>
 8001e72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e74:	b11b      	cbz	r3, 8001e7e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8001e76:	0791      	lsls	r1, r2, #30
 8001e78:	d515      	bpl.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001e7a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001e7c:	b99b      	cbnz	r3, 8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001e7e:	4945      	ldr	r1, [pc, #276]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001e80:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001e84:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e8c:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8001e90:	4303      	orrs	r3, r0
 8001e92:	6860      	ldr	r0, [r4, #4]
 8001e94:	4303      	orrs	r3, r0
 8001e96:	68a0      	ldr	r0, [r4, #8]
 8001e98:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001e9c:	6960      	ldr	r0, [r4, #20]
 8001e9e:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 8001ea2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001ea6:	0753      	lsls	r3, r2, #29
 8001ea8:	d503      	bpl.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 8001eaa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001eac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001eb0:	d005      	beq.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8001eb2:	0717      	lsls	r7, r2, #28
 8001eb4:	d520      	bpl.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001eb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001eb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ebc:	d11c      	bne.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001ebe:	4935      	ldr	r1, [pc, #212]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001ec0:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ec4:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001ec8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ecc:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001ed0:	4303      	orrs	r3, r0
 8001ed2:	6860      	ldr	r0, [r4, #4]
 8001ed4:	4303      	orrs	r3, r0
 8001ed6:	68a0      	ldr	r0, [r4, #8]
 8001ed8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001edc:	6920      	ldr	r0, [r4, #16]
 8001ede:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001ee2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001ee6:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8001eea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001eec:	f020 001f 	bic.w	r0, r0, #31
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	4303      	orrs	r3, r0
 8001ef4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001ef8:	0550      	lsls	r0, r2, #21
 8001efa:	d51b      	bpl.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8001efc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001efe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f02:	d117      	bne.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001f04:	4823      	ldr	r0, [pc, #140]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001f06:	6867      	ldr	r7, [r4, #4]
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001f08:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001f0c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001f10:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8001f14:	433b      	orrs	r3, r7
 8001f16:	68a7      	ldr	r7, [r4, #8]
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001f18:	f3c1 4101 	ubfx	r1, r1, #16, #2
 8001f1c:	3101      	adds	r1, #1
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001f1e:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 8001f22:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8001f26:	68e1      	ldr	r1, [r4, #12]
 8001f28:	0849      	lsrs	r1, r1, #1
 8001f2a:	3901      	subs	r1, #1
 8001f2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001f30:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001f34:	0511      	lsls	r1, r2, #20
 8001f36:	d511      	bpl.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x280>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f38:	6923      	ldr	r3, [r4, #16]
 8001f3a:	68a2      	ldr	r2, [r4, #8]
 8001f3c:	061b      	lsls	r3, r3, #24
 8001f3e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001f42:	6862      	ldr	r2, [r4, #4]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	6962      	ldr	r2, [r4, #20]
 8001f48:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001f4c:	68e2      	ldr	r2, [r4, #12]
 8001f4e:	0852      	lsrs	r2, r2, #1
 8001f50:	3a01      	subs	r2, #1
 8001f52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001f56:	4a0f      	ldr	r2, [pc, #60]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001f58:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	6033      	str	r3, [r6, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f60:	f7ff f808 	bl	8000f74 <HAL_GetTick>
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f64:	4e0b      	ldr	r6, [pc, #44]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    tickstart = HAL_GetTick();
 8001f66:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f68:	6833      	ldr	r3, [r6, #0]
 8001f6a:	011a      	lsls	r2, r3, #4
 8001f6c:	d453      	bmi.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x33a>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001f6e:	f7ff f801 	bl	8000f74 <HAL_GetTick>
 8001f72:	1bc0      	subs	r0, r0, r7
 8001f74:	2802      	cmp	r0, #2
 8001f76:	d9f7      	bls.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8001f78:	e008      	b.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      plli2sused = 1U;
 8001f7a:	2601      	movs	r6, #1
 8001f7c:	e6f7      	b.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x92>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001f7e:	f7fe fff9 	bl	8000f74 <HAL_GetTick>
 8001f82:	eba0 0008 	sub.w	r0, r0, r8
 8001f86:	2802      	cmp	r0, #2
 8001f88:	f67f af07 	bls.w	8001d9a <HAL_RCCEx_PeriphCLKConfig+0xbe>
        return HAL_TIMEOUT;
 8001f8c:	2003      	movs	r0, #3
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 8001f8e:	b003      	add	sp, #12
 8001f90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40007000 	.word	0x40007000
 8001f9c:	424711e0 	.word	0x424711e0
 8001fa0:	42470068 	.word	0x42470068
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fa4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001fa6:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001faa:	4293      	cmp	r3, r2
 8001fac:	f43f aeff 	beq.w	8001dae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fb2:	4a4b      	ldr	r2, [pc, #300]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8001fc0:	673b      	str	r3, [r7, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001fc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fc4:	07db      	lsls	r3, r3, #31
 8001fc6:	f57f aef2 	bpl.w	8001dae <HAL_RCCEx_PeriphCLKConfig+0xd2>
        tickstart = HAL_GetTick();
 8001fca:	f7fe ffd3 	bl	8000f74 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fce:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001fd2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fd6:	0798      	lsls	r0, r3, #30
 8001fd8:	f53f aee9 	bmi.w	8001dae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fdc:	f7fe ffca 	bl	8000f74 <HAL_GetTick>
 8001fe0:	eba0 0008 	sub.w	r0, r0, r8
 8001fe4:	4548      	cmp	r0, r9
 8001fe6:	d9f5      	bls.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8001fe8:	e7d0      	b.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fea:	6891      	ldr	r1, [r2, #8]
 8001fec:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001ff0:	e6ed      	b.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001ff2:	483c      	ldr	r0, [pc, #240]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x408>)
 8001ff4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001ff6:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 8001ffa:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001ffe:	430a      	orrs	r2, r1
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002000:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002004:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002008:	f47f af22 	bne.w	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x174>
 800200c:	e723      	b.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800200e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002012:	f43f af20 	beq.w	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  if(pllsaiused == 1U)
 8002016:	2d01      	cmp	r5, #1
 8002018:	d14b      	bne.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_PLLSAI_DISABLE();
 800201a:	4d33      	ldr	r5, [pc, #204]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x40c>)
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800201c:	4e31      	ldr	r6, [pc, #196]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x408>)
    __HAL_RCC_PLLSAI_DISABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002022:	f7fe ffa7 	bl	8000f74 <HAL_GetTick>
 8002026:	4607      	mov	r7, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002028:	6833      	ldr	r3, [r6, #0]
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	d44b      	bmi.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800202e:	6821      	ldr	r1, [r4, #0]
 8002030:	074e      	lsls	r6, r1, #29
 8002032:	d501      	bpl.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002034:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002036:	b11b      	cbz	r3, 8002040 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8002038:	0708      	lsls	r0, r1, #28
 800203a:	d51a      	bpl.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x396>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800203c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800203e:	b9c3      	cbnz	r3, 8002072 <HAL_RCCEx_PeriphCLKConfig+0x396>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002040:	4a28      	ldr	r2, [pc, #160]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x408>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002042:	69a0      	ldr	r0, [r4, #24]
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002044:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002048:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800204c:	4303      	orrs	r3, r0
 800204e:	69e0      	ldr	r0, [r4, #28]
 8002050:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002054:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002056:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800205a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800205e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002062:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002064:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002068:	3801      	subs	r0, #1
 800206a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800206e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002072:	05ca      	lsls	r2, r1, #23
 8002074:	d514      	bpl.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8002076:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002078:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800207c:	d110      	bne.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800207e:	4919      	ldr	r1, [pc, #100]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x408>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002080:	69a2      	ldr	r2, [r4, #24]
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002082:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002086:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800208a:	4313      	orrs	r3, r2
 800208c:	69e2      	ldr	r2, [r4, #28]
 800208e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002092:	6a22      	ldr	r2, [r4, #32]
 8002094:	0852      	lsrs	r2, r2, #1
 8002096:	3a01      	subs	r2, #1
 8002098:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800209c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    __HAL_RCC_PLLSAI_ENABLE();
 80020a0:	2301      	movs	r3, #1
 80020a2:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80020a4:	f7fe ff66 	bl	8000f74 <HAL_GetTick>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80020a8:	4c0e      	ldr	r4, [pc, #56]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x408>)
    tickstart = HAL_GetTick();
 80020aa:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80020ac:	6823      	ldr	r3, [r4, #0]
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	d50f      	bpl.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  return HAL_OK;
 80020b2:	2000      	movs	r0, #0
 80020b4:	e76b      	b.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80020b6:	f7fe ff5d 	bl	8000f74 <HAL_GetTick>
 80020ba:	eba0 0008 	sub.w	r0, r0, r8
 80020be:	2802      	cmp	r0, #2
 80020c0:	f67f aed0 	bls.w	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80020c4:	e762      	b.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80020c6:	f7fe ff55 	bl	8000f74 <HAL_GetTick>
 80020ca:	1bc0      	subs	r0, r0, r7
 80020cc:	2802      	cmp	r0, #2
 80020ce:	d9ab      	bls.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80020d0:	e75c      	b.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80020d2:	f7fe ff4f 	bl	8000f74 <HAL_GetTick>
 80020d6:	1b40      	subs	r0, r0, r5
 80020d8:	2802      	cmp	r0, #2
 80020da:	d9e7      	bls.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80020dc:	e756      	b.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80020de:	bf00      	nop
 80020e0:	42470e40 	.word	0x42470e40
 80020e4:	40023800 	.word	0x40023800
 80020e8:	42470070 	.word	0x42470070

080020ec <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020ec:	4920      	ldr	r1, [pc, #128]	; (8002170 <HAL_RCC_GetSysClockFreq+0x84>)
{
 80020ee:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020f0:	688b      	ldr	r3, [r1, #8]
 80020f2:	f003 030c 	and.w	r3, r3, #12
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d007      	beq.n	800210a <HAL_RCC_GetSysClockFreq+0x1e>
 80020fa:	2b0c      	cmp	r3, #12
 80020fc:	d020      	beq.n	8002140 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020fe:	4a1d      	ldr	r2, [pc, #116]	; (8002174 <HAL_RCC_GetSysClockFreq+0x88>)
 8002100:	481d      	ldr	r0, [pc, #116]	; (8002178 <HAL_RCC_GetSysClockFreq+0x8c>)
 8002102:	2b04      	cmp	r3, #4
 8002104:	bf18      	it	ne
 8002106:	4610      	movne	r0, r2
 8002108:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800210a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800210c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800210e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002110:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002114:	bf14      	ite	ne
 8002116:	4818      	ldrne	r0, [pc, #96]	; (8002178 <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002118:	4816      	ldreq	r0, [pc, #88]	; (8002174 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800211a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800211e:	bf18      	it	ne
 8002120:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002122:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002126:	fba1 0100 	umull	r0, r1, r1, r0
 800212a:	f7fe fd51 	bl	8000bd0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800212e:	4b10      	ldr	r3, [pc, #64]	; (8002170 <HAL_RCC_GetSysClockFreq+0x84>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002136:	3301      	adds	r3, #1
 8002138:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 800213a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800213e:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002140:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002142:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002144:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002146:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800214a:	bf14      	ite	ne
 800214c:	480a      	ldrne	r0, [pc, #40]	; (8002178 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800214e:	4809      	ldreq	r0, [pc, #36]	; (8002174 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002150:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002154:	bf18      	it	ne
 8002156:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002158:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800215c:	fba1 0100 	umull	r0, r1, r1, r0
 8002160:	f7fe fd36 	bl	8000bd0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002164:	4b02      	ldr	r3, [pc, #8]	; (8002170 <HAL_RCC_GetSysClockFreq+0x84>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f3c3 7302 	ubfx	r3, r3, #28, #3
 800216c:	e7e5      	b.n	800213a <HAL_RCC_GetSysClockFreq+0x4e>
 800216e:	bf00      	nop
 8002170:	40023800 	.word	0x40023800
 8002174:	00f42400 	.word	0x00f42400
 8002178:	007a1200 	.word	0x007a1200

0800217c <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800217c:	6803      	ldr	r3, [r0, #0]
{
 800217e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002182:	07df      	lsls	r7, r3, #31
{
 8002184:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002186:	d410      	bmi.n	80021aa <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002188:	6823      	ldr	r3, [r4, #0]
 800218a:	079e      	lsls	r6, r3, #30
 800218c:	d467      	bmi.n	800225e <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800218e:	6823      	ldr	r3, [r4, #0]
 8002190:	071a      	lsls	r2, r3, #28
 8002192:	f100 80b2 	bmi.w	80022fa <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002196:	6823      	ldr	r3, [r4, #0]
 8002198:	075b      	lsls	r3, r3, #29
 800219a:	f100 80d0 	bmi.w	800233e <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800219e:	69a2      	ldr	r2, [r4, #24]
 80021a0:	2a00      	cmp	r2, #0
 80021a2:	f040 8139 	bne.w	8002418 <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80021a6:	2000      	movs	r0, #0
 80021a8:	e01e      	b.n	80021e8 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80021aa:	4b97      	ldr	r3, [pc, #604]	; (8002408 <HAL_RCC_OscConfig+0x28c>)
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	f002 020c 	and.w	r2, r2, #12
 80021b2:	2a04      	cmp	r2, #4
 80021b4:	d010      	beq.n	80021d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80021bc:	2a08      	cmp	r2, #8
 80021be:	d102      	bne.n	80021c6 <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	025d      	lsls	r5, r3, #9
 80021c4:	d408      	bmi.n	80021d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021c6:	4b90      	ldr	r3, [pc, #576]	; (8002408 <HAL_RCC_OscConfig+0x28c>)
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80021ce:	2a0c      	cmp	r2, #12
 80021d0:	d10d      	bne.n	80021ee <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	0250      	lsls	r0, r2, #9
 80021d6:	d50a      	bpl.n	80021ee <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d8:	4b8b      	ldr	r3, [pc, #556]	; (8002408 <HAL_RCC_OscConfig+0x28c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	0399      	lsls	r1, r3, #14
 80021de:	d5d3      	bpl.n	8002188 <HAL_RCC_OscConfig+0xc>
 80021e0:	6863      	ldr	r3, [r4, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1d0      	bne.n	8002188 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80021e6:	2001      	movs	r0, #1
}
 80021e8:	b002      	add	sp, #8
 80021ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ee:	6862      	ldr	r2, [r4, #4]
 80021f0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80021f4:	d111      	bne.n	800221a <HAL_RCC_OscConfig+0x9e>
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80021fc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80021fe:	f7fe feb9 	bl	8000f74 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002202:	4d81      	ldr	r5, [pc, #516]	; (8002408 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8002204:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002206:	682b      	ldr	r3, [r5, #0]
 8002208:	039a      	lsls	r2, r3, #14
 800220a:	d4bd      	bmi.n	8002188 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800220c:	f7fe feb2 	bl	8000f74 <HAL_GetTick>
 8002210:	1b80      	subs	r0, r0, r6
 8002212:	2864      	cmp	r0, #100	; 0x64
 8002214:	d9f7      	bls.n	8002206 <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 8002216:	2003      	movs	r0, #3
 8002218:	e7e6      	b.n	80021e8 <HAL_RCC_OscConfig+0x6c>
 800221a:	4d7b      	ldr	r5, [pc, #492]	; (8002408 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800221c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8002220:	682b      	ldr	r3, [r5, #0]
 8002222:	d107      	bne.n	8002234 <HAL_RCC_OscConfig+0xb8>
 8002224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002228:	602b      	str	r3, [r5, #0]
 800222a:	682b      	ldr	r3, [r5, #0]
 800222c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002230:	602b      	str	r3, [r5, #0]
 8002232:	e7e4      	b.n	80021fe <HAL_RCC_OscConfig+0x82>
 8002234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002238:	602b      	str	r3, [r5, #0]
 800223a:	682b      	ldr	r3, [r5, #0]
 800223c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002240:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002242:	2a00      	cmp	r2, #0
 8002244:	d1db      	bne.n	80021fe <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8002246:	f7fe fe95 	bl	8000f74 <HAL_GetTick>
 800224a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224c:	682b      	ldr	r3, [r5, #0]
 800224e:	039b      	lsls	r3, r3, #14
 8002250:	d59a      	bpl.n	8002188 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002252:	f7fe fe8f 	bl	8000f74 <HAL_GetTick>
 8002256:	1b80      	subs	r0, r0, r6
 8002258:	2864      	cmp	r0, #100	; 0x64
 800225a:	d9f7      	bls.n	800224c <HAL_RCC_OscConfig+0xd0>
 800225c:	e7db      	b.n	8002216 <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800225e:	4b6a      	ldr	r3, [pc, #424]	; (8002408 <HAL_RCC_OscConfig+0x28c>)
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	f012 0f0c 	tst.w	r2, #12
 8002266:	d010      	beq.n	800228a <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800226e:	2a08      	cmp	r2, #8
 8002270:	d102      	bne.n	8002278 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	025f      	lsls	r7, r3, #9
 8002276:	d508      	bpl.n	800228a <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002278:	4a63      	ldr	r2, [pc, #396]	; (8002408 <HAL_RCC_OscConfig+0x28c>)
 800227a:	6893      	ldr	r3, [r2, #8]
 800227c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002280:	2b0c      	cmp	r3, #12
 8002282:	d111      	bne.n	80022a8 <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002284:	6853      	ldr	r3, [r2, #4]
 8002286:	025e      	lsls	r6, r3, #9
 8002288:	d40e      	bmi.n	80022a8 <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228a:	4b5f      	ldr	r3, [pc, #380]	; (8002408 <HAL_RCC_OscConfig+0x28c>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	0795      	lsls	r5, r2, #30
 8002290:	d502      	bpl.n	8002298 <HAL_RCC_OscConfig+0x11c>
 8002292:	68e2      	ldr	r2, [r4, #12]
 8002294:	2a01      	cmp	r2, #1
 8002296:	d1a6      	bne.n	80021e6 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	6921      	ldr	r1, [r4, #16]
 800229c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80022a0:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80022a4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a6:	e772      	b.n	800218e <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022a8:	68e2      	ldr	r2, [r4, #12]
 80022aa:	4b58      	ldr	r3, [pc, #352]	; (800240c <HAL_RCC_OscConfig+0x290>)
 80022ac:	b1b2      	cbz	r2, 80022dc <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 80022ae:	2201      	movs	r2, #1
 80022b0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80022b2:	f7fe fe5f 	bl	8000f74 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b6:	4d54      	ldr	r5, [pc, #336]	; (8002408 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80022b8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ba:	682b      	ldr	r3, [r5, #0]
 80022bc:	0798      	lsls	r0, r3, #30
 80022be:	d507      	bpl.n	80022d0 <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c0:	682b      	ldr	r3, [r5, #0]
 80022c2:	6922      	ldr	r2, [r4, #16]
 80022c4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80022c8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80022cc:	602b      	str	r3, [r5, #0]
 80022ce:	e75e      	b.n	800218e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022d0:	f7fe fe50 	bl	8000f74 <HAL_GetTick>
 80022d4:	1b80      	subs	r0, r0, r6
 80022d6:	2802      	cmp	r0, #2
 80022d8:	d9ef      	bls.n	80022ba <HAL_RCC_OscConfig+0x13e>
 80022da:	e79c      	b.n	8002216 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 80022dc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80022de:	f7fe fe49 	bl	8000f74 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e2:	4d49      	ldr	r5, [pc, #292]	; (8002408 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80022e4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e6:	682b      	ldr	r3, [r5, #0]
 80022e8:	0799      	lsls	r1, r3, #30
 80022ea:	f57f af50 	bpl.w	800218e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ee:	f7fe fe41 	bl	8000f74 <HAL_GetTick>
 80022f2:	1b80      	subs	r0, r0, r6
 80022f4:	2802      	cmp	r0, #2
 80022f6:	d9f6      	bls.n	80022e6 <HAL_RCC_OscConfig+0x16a>
 80022f8:	e78d      	b.n	8002216 <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022fa:	6962      	ldr	r2, [r4, #20]
 80022fc:	4b44      	ldr	r3, [pc, #272]	; (8002410 <HAL_RCC_OscConfig+0x294>)
 80022fe:	b17a      	cbz	r2, 8002320 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 8002300:	2201      	movs	r2, #1
 8002302:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002304:	f7fe fe36 	bl	8000f74 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002308:	4d3f      	ldr	r5, [pc, #252]	; (8002408 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800230a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800230c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800230e:	079f      	lsls	r7, r3, #30
 8002310:	f53f af41 	bmi.w	8002196 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002314:	f7fe fe2e 	bl	8000f74 <HAL_GetTick>
 8002318:	1b80      	subs	r0, r0, r6
 800231a:	2802      	cmp	r0, #2
 800231c:	d9f6      	bls.n	800230c <HAL_RCC_OscConfig+0x190>
 800231e:	e77a      	b.n	8002216 <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8002320:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002322:	f7fe fe27 	bl	8000f74 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002326:	4d38      	ldr	r5, [pc, #224]	; (8002408 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8002328:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800232a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800232c:	0798      	lsls	r0, r3, #30
 800232e:	f57f af32 	bpl.w	8002196 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002332:	f7fe fe1f 	bl	8000f74 <HAL_GetTick>
 8002336:	1b80      	subs	r0, r0, r6
 8002338:	2802      	cmp	r0, #2
 800233a:	d9f6      	bls.n	800232a <HAL_RCC_OscConfig+0x1ae>
 800233c:	e76b      	b.n	8002216 <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800233e:	4b32      	ldr	r3, [pc, #200]	; (8002408 <HAL_RCC_OscConfig+0x28c>)
 8002340:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002342:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002346:	d128      	bne.n	800239a <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002348:	9201      	str	r2, [sp, #4]
 800234a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800234c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002350:	641a      	str	r2, [r3, #64]	; 0x40
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002358:	9301      	str	r3, [sp, #4]
 800235a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800235c:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235e:	4d2d      	ldr	r5, [pc, #180]	; (8002414 <HAL_RCC_OscConfig+0x298>)
 8002360:	682b      	ldr	r3, [r5, #0]
 8002362:	05d9      	lsls	r1, r3, #23
 8002364:	d51b      	bpl.n	800239e <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002366:	68a3      	ldr	r3, [r4, #8]
 8002368:	4d27      	ldr	r5, [pc, #156]	; (8002408 <HAL_RCC_OscConfig+0x28c>)
 800236a:	2b01      	cmp	r3, #1
 800236c:	d127      	bne.n	80023be <HAL_RCC_OscConfig+0x242>
 800236e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002376:	f7fe fdfd 	bl	8000f74 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800237a:	4d23      	ldr	r5, [pc, #140]	; (8002408 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800237c:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800237e:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002382:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002384:	079b      	lsls	r3, r3, #30
 8002386:	d539      	bpl.n	80023fc <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 8002388:	2e00      	cmp	r6, #0
 800238a:	f43f af08 	beq.w	800219e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800238e:	4a1e      	ldr	r2, [pc, #120]	; (8002408 <HAL_RCC_OscConfig+0x28c>)
 8002390:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002392:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002396:	6413      	str	r3, [r2, #64]	; 0x40
 8002398:	e701      	b.n	800219e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800239a:	2600      	movs	r6, #0
 800239c:	e7df      	b.n	800235e <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800239e:	682b      	ldr	r3, [r5, #0]
 80023a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80023a6:	f7fe fde5 	bl	8000f74 <HAL_GetTick>
 80023aa:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ac:	682b      	ldr	r3, [r5, #0]
 80023ae:	05da      	lsls	r2, r3, #23
 80023b0:	d4d9      	bmi.n	8002366 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b2:	f7fe fddf 	bl	8000f74 <HAL_GetTick>
 80023b6:	1bc0      	subs	r0, r0, r7
 80023b8:	2802      	cmp	r0, #2
 80023ba:	d9f7      	bls.n	80023ac <HAL_RCC_OscConfig+0x230>
 80023bc:	e72b      	b.n	8002216 <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023be:	2b05      	cmp	r3, #5
 80023c0:	d104      	bne.n	80023cc <HAL_RCC_OscConfig+0x250>
 80023c2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80023c4:	f043 0304 	orr.w	r3, r3, #4
 80023c8:	672b      	str	r3, [r5, #112]	; 0x70
 80023ca:	e7d0      	b.n	800236e <HAL_RCC_OscConfig+0x1f2>
 80023cc:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80023ce:	f022 0201 	bic.w	r2, r2, #1
 80023d2:	672a      	str	r2, [r5, #112]	; 0x70
 80023d4:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80023d6:	f022 0204 	bic.w	r2, r2, #4
 80023da:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1ca      	bne.n	8002376 <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 80023e0:	f7fe fdc8 	bl	8000f74 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e4:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80023e8:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ea:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80023ec:	0798      	lsls	r0, r3, #30
 80023ee:	d5cb      	bpl.n	8002388 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023f0:	f7fe fdc0 	bl	8000f74 <HAL_GetTick>
 80023f4:	1bc0      	subs	r0, r0, r7
 80023f6:	4540      	cmp	r0, r8
 80023f8:	d9f7      	bls.n	80023ea <HAL_RCC_OscConfig+0x26e>
 80023fa:	e70c      	b.n	8002216 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023fc:	f7fe fdba 	bl	8000f74 <HAL_GetTick>
 8002400:	1bc0      	subs	r0, r0, r7
 8002402:	4540      	cmp	r0, r8
 8002404:	d9bd      	bls.n	8002382 <HAL_RCC_OscConfig+0x206>
 8002406:	e706      	b.n	8002216 <HAL_RCC_OscConfig+0x9a>
 8002408:	40023800 	.word	0x40023800
 800240c:	42470000 	.word	0x42470000
 8002410:	42470e80 	.word	0x42470e80
 8002414:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002418:	4d23      	ldr	r5, [pc, #140]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 800241a:	68ab      	ldr	r3, [r5, #8]
 800241c:	f003 030c 	and.w	r3, r3, #12
 8002420:	2b08      	cmp	r3, #8
 8002422:	f43f aee0 	beq.w	80021e6 <HAL_RCC_OscConfig+0x6a>
 8002426:	4e21      	ldr	r6, [pc, #132]	; (80024ac <HAL_RCC_OscConfig+0x330>)
 8002428:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800242a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800242c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800242e:	d12d      	bne.n	800248c <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 8002430:	f7fe fda0 	bl	8000f74 <HAL_GetTick>
 8002434:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002436:	682b      	ldr	r3, [r5, #0]
 8002438:	0199      	lsls	r1, r3, #6
 800243a:	d421      	bmi.n	8002480 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800243c:	6a22      	ldr	r2, [r4, #32]
 800243e:	69e3      	ldr	r3, [r4, #28]
 8002440:	4313      	orrs	r3, r2
 8002442:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002444:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002448:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800244a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800244e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002450:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002454:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002456:	4c14      	ldr	r4, [pc, #80]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002458:	0852      	lsrs	r2, r2, #1
 800245a:	3a01      	subs	r2, #1
 800245c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002460:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002462:	2301      	movs	r3, #1
 8002464:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002466:	f7fe fd85 	bl	8000f74 <HAL_GetTick>
 800246a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800246c:	6823      	ldr	r3, [r4, #0]
 800246e:	019a      	lsls	r2, r3, #6
 8002470:	f53f ae99 	bmi.w	80021a6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002474:	f7fe fd7e 	bl	8000f74 <HAL_GetTick>
 8002478:	1b40      	subs	r0, r0, r5
 800247a:	2802      	cmp	r0, #2
 800247c:	d9f6      	bls.n	800246c <HAL_RCC_OscConfig+0x2f0>
 800247e:	e6ca      	b.n	8002216 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002480:	f7fe fd78 	bl	8000f74 <HAL_GetTick>
 8002484:	1bc0      	subs	r0, r0, r7
 8002486:	2802      	cmp	r0, #2
 8002488:	d9d5      	bls.n	8002436 <HAL_RCC_OscConfig+0x2ba>
 800248a:	e6c4      	b.n	8002216 <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 800248c:	f7fe fd72 	bl	8000f74 <HAL_GetTick>
 8002490:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002492:	682b      	ldr	r3, [r5, #0]
 8002494:	019b      	lsls	r3, r3, #6
 8002496:	f57f ae86 	bpl.w	80021a6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800249a:	f7fe fd6b 	bl	8000f74 <HAL_GetTick>
 800249e:	1b00      	subs	r0, r0, r4
 80024a0:	2802      	cmp	r0, #2
 80024a2:	d9f6      	bls.n	8002492 <HAL_RCC_OscConfig+0x316>
 80024a4:	e6b7      	b.n	8002216 <HAL_RCC_OscConfig+0x9a>
 80024a6:	bf00      	nop
 80024a8:	40023800 	.word	0x40023800
 80024ac:	42470060 	.word	0x42470060

080024b0 <SD_DMATransmitCplt>:
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80024b0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80024b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ba:	63d3      	str	r3, [r2, #60]	; 0x3c
 80024bc:	4770      	bx	lr

080024be <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80024be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80024c2:	b089      	sub	sp, #36	; 0x24
 80024c4:	4605      	mov	r5, r0
 80024c6:	460e      	mov	r6, r1
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 80024c8:	f7fe fd54 	bl	8000f74 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 80024cc:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 80024ce:	4681      	mov	r9, r0
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80024d0:	2108      	movs	r1, #8
 80024d2:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80024d8:	f001 fcd7 	bl	8003e8a <SDMMC_CmdBlockLength>
  if(errorstate != HAL_OK)
 80024dc:	4604      	mov	r4, r0
 80024de:	bb40      	cbnz	r0, 8002532 <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80024e0:	6d29      	ldr	r1, [r5, #80]	; 0x50
 80024e2:	6828      	ldr	r0, [r5, #0]
 80024e4:	0409      	lsls	r1, r1, #16
 80024e6:	f001 fddb 	bl	80040a0 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_OK)
 80024ea:	4604      	mov	r4, r0
 80024ec:	bb08      	cbnz	r0, 8002532 <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80024ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024f2:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 80024f4:	2308      	movs	r3, #8
 80024f6:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80024f8:	2330      	movs	r3, #48	; 0x30
 80024fa:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80024fc:	2302      	movs	r3, #2
 80024fe:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002500:	9006      	str	r0, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8002502:	2301      	movs	r3, #1
  SDIO_ConfigData(hsd->Instance, &config);
 8002504:	a902      	add	r1, sp, #8
 8002506:	6828      	ldr	r0, [r5, #0]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8002508:	9307      	str	r3, [sp, #28]
  SDIO_ConfigData(hsd->Instance, &config);
 800250a:	f001 fcab 	bl	8003e64 <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800250e:	6828      	ldr	r0, [r5, #0]
 8002510:	f001 fdf7 	bl	8004102 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_OK)
 8002514:	4604      	mov	r4, r0
 8002516:	b960      	cbnz	r0, 8002532 <SD_FindSCR+0x74>
 8002518:	4607      	mov	r7, r0
  {
    return errorstate;
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800251a:	f240 482a 	movw	r8, #1066	; 0x42a
 800251e:	6828      	ldr	r0, [r5, #0]
 8002520:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002522:	ea13 0f08 	tst.w	r3, r8
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8002526:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8002528:	d007      	beq.n	800253a <SD_FindSCR+0x7c>
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800252a:	0719      	lsls	r1, r3, #28
 800252c:	d518      	bpl.n	8002560 <SD_FindSCR+0xa2>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800252e:	2408      	movs	r4, #8
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8002530:	6384      	str	r4, [r0, #56]	; 0x38
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
  }

  return HAL_SD_ERROR_NONE;
}
 8002532:	4620      	mov	r0, r4
 8002534:	b009      	add	sp, #36	; 0x24
 8002536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800253a:	029b      	lsls	r3, r3, #10
 800253c:	d507      	bpl.n	800254e <SD_FindSCR+0x90>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800253e:	f001 fbd3 	bl	8003ce8 <SDIO_ReadFIFO>
 8002542:	ab08      	add	r3, sp, #32
 8002544:	eb03 0387 	add.w	r3, r3, r7, lsl #2
      index++;
 8002548:	3701      	adds	r7, #1
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800254a:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800254e:	f7fe fd11 	bl	8000f74 <HAL_GetTick>
 8002552:	eba0 0009 	sub.w	r0, r0, r9
 8002556:	3001      	adds	r0, #1
 8002558:	d1e1      	bne.n	800251e <SD_FindSCR+0x60>
      return HAL_SD_ERROR_TIMEOUT;
 800255a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800255e:	e7e8      	b.n	8002532 <SD_FindSCR+0x74>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002560:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002562:	079a      	lsls	r2, r3, #30
 8002564:	d501      	bpl.n	800256a <SD_FindSCR+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8002566:	2402      	movs	r4, #2
 8002568:	e7e2      	b.n	8002530 <SD_FindSCR+0x72>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800256a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800256c:	069b      	lsls	r3, r3, #26
 800256e:	d501      	bpl.n	8002574 <SD_FindSCR+0xb6>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8002570:	2420      	movs	r4, #32
 8002572:	e7dd      	b.n	8002530 <SD_FindSCR+0x72>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002574:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8002578:	6383      	str	r3, [r0, #56]	; 0x38
 800257a:	9b00      	ldr	r3, [sp, #0]
 800257c:	ba1b      	rev	r3, r3
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800257e:	6073      	str	r3, [r6, #4]
 8002580:	9b01      	ldr	r3, [sp, #4]
 8002582:	ba1b      	rev	r3, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8002584:	6033      	str	r3, [r6, #0]
  return HAL_SD_ERROR_NONE;
 8002586:	e7d4      	b.n	8002532 <SD_FindSCR+0x74>

08002588 <HAL_SD_ReadBlocks_DMA>:
{
 8002588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800258c:	4616      	mov	r6, r2
 800258e:	b087      	sub	sp, #28
 8002590:	4605      	mov	r5, r0
 8002592:	4698      	mov	r8, r3
  if(NULL == pData)
 8002594:	460a      	mov	r2, r1
 8002596:	b939      	cbnz	r1, 80025a8 <HAL_SD_ReadBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002598:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800259a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800259e:	63ab      	str	r3, [r5, #56]	; 0x38
    return HAL_ERROR;
 80025a0:	2001      	movs	r0, #1
}
 80025a2:	b007      	add	sp, #28
 80025a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 80025a8:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80025ac:	b2c4      	uxtb	r4, r0
 80025ae:	2c01      	cmp	r4, #1
 80025b0:	d168      	bne.n	8002684 <HAL_SD_ReadBlocks_DMA+0xfc>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80025b2:	6def      	ldr	r7, [r5, #92]	; 0x5c
 80025b4:	eb06 0008 	add.w	r0, r6, r8
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80025b8:	2300      	movs	r3, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80025ba:	42b8      	cmp	r0, r7
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80025bc:	63ab      	str	r3, [r5, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80025be:	d903      	bls.n	80025c8 <HAL_SD_ReadBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80025c0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80025c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025c6:	e7ea      	b.n	800259e <HAL_SD_ReadBlocks_DMA+0x16>
    hsd->Instance->DCTRL = 0U;
 80025c8:	682f      	ldr	r7, [r5, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 80025ca:	2103      	movs	r1, #3
 80025cc:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 80025d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80025d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80025d4:	492c      	ldr	r1, [pc, #176]	; (8002688 <HAL_SD_ReadBlocks_DMA+0x100>)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80025d6:	f440 7095 	orr.w	r0, r0, #298	; 0x12a
 80025da:	63f8      	str	r0, [r7, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80025dc:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 80025de:	ea4f 2948 	mov.w	r9, r8, lsl #9
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80025e2:	63c1      	str	r1, [r0, #60]	; 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80025e4:	4929      	ldr	r1, [pc, #164]	; (800268c <HAL_SD_ReadBlocks_DMA+0x104>)
 80025e6:	64c1      	str	r1, [r0, #76]	; 0x4c
    hsd->hdmarx->XferAbortCallback = NULL;
 80025e8:	6503      	str	r3, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 80025ea:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80025ee:	ea4f 0399 	mov.w	r3, r9, lsr #2
 80025f2:	f7fe ffe5 	bl	80015c0 <HAL_DMA_Start_IT>
    __HAL_SD_DMA_ENABLE(hsd);
 80025f6:	4b26      	ldr	r3, [pc, #152]	; (8002690 <HAL_SD_ReadBlocks_DMA+0x108>)
    SDIO_ConfigData(hsd->Instance, &config);
 80025f8:	6828      	ldr	r0, [r5, #0]
    __HAL_SD_DMA_ENABLE(hsd);
 80025fa:	601c      	str	r4, [r3, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80025fc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80025fe:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002600:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002604:	e88d 0208 	stmia.w	sp, {r3, r9}
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002608:	f04f 0390 	mov.w	r3, #144	; 0x90
 800260c:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800260e:	f04f 0302 	mov.w	r3, #2
 8002612:	9303      	str	r3, [sp, #12]
    SDIO_ConfigData(hsd->Instance, &config);
 8002614:	4669      	mov	r1, sp
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002616:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDIO_DPSM_ENABLE;
 800261a:	f04f 0401 	mov.w	r4, #1
      BlockAdd *= 512U;
 800261e:	bf18      	it	ne
 8002620:	0276      	lslne	r6, r6, #9
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002622:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002624:	9405      	str	r4, [sp, #20]
    SDIO_ConfigData(hsd->Instance, &config);
 8002626:	f001 fc1d 	bl	8003e64 <SDIO_ConfigData>
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800262a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800262e:	6828      	ldr	r0, [r5, #0]
 8002630:	f001 fc2b 	bl	8003e8a <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002634:	b148      	cbz	r0, 800264a <HAL_SD_ReadBlocks_DMA+0xc2>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8002636:	682b      	ldr	r3, [r5, #0]
 8002638:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800263c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800263e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002640:	4318      	orrs	r0, r3
 8002642:	63a8      	str	r0, [r5, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002644:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
 8002648:	e7aa      	b.n	80025a0 <HAL_SD_ReadBlocks_DMA+0x18>
    if(NumberOfBlocks > 1U)
 800264a:	f1b8 0f01 	cmp.w	r8, #1
 800264e:	d912      	bls.n	8002676 <HAL_SD_ReadBlocks_DMA+0xee>
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002650:	2382      	movs	r3, #130	; 0x82
 8002652:	632b      	str	r3, [r5, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8002654:	4631      	mov	r1, r6
 8002656:	6828      	ldr	r0, [r5, #0]
 8002658:	f001 fc47 	bl	8003eea <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 800265c:	2800      	cmp	r0, #0
 800265e:	d0a0      	beq.n	80025a2 <HAL_SD_ReadBlocks_DMA+0x1a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8002660:	682b      	ldr	r3, [r5, #0]
 8002662:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002666:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002668:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800266a:	4318      	orrs	r0, r3
 800266c:	63a8      	str	r0, [r5, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800266e:	2001      	movs	r0, #1
 8002670:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
      return HAL_ERROR;
 8002674:	e795      	b.n	80025a2 <HAL_SD_ReadBlocks_DMA+0x1a>
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002676:	2381      	movs	r3, #129	; 0x81
 8002678:	632b      	str	r3, [r5, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 800267a:	4631      	mov	r1, r6
 800267c:	6828      	ldr	r0, [r5, #0]
 800267e:	f001 fc1c 	bl	8003eba <SDMMC_CmdReadSingleBlock>
 8002682:	e7eb      	b.n	800265c <HAL_SD_ReadBlocks_DMA+0xd4>
    return HAL_BUSY;
 8002684:	2002      	movs	r0, #2
 8002686:	e78c      	b.n	80025a2 <HAL_SD_ReadBlocks_DMA+0x1a>
 8002688:	08002797 	.word	0x08002797
 800268c:	08002cf5 	.word	0x08002cf5
 8002690:	4225858c 	.word	0x4225858c

08002694 <HAL_SD_WriteBlocks_DMA>:
{
 8002694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002698:	4604      	mov	r4, r0
 800269a:	b086      	sub	sp, #24
 800269c:	4615      	mov	r5, r2
 800269e:	461e      	mov	r6, r3
  if(NULL == pData)
 80026a0:	460f      	mov	r7, r1
 80026a2:	b939      	cbnz	r1, 80026b4 <HAL_SD_WriteBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80026a4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80026a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026aa:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 80026ac:	2001      	movs	r0, #1
}
 80026ae:	b006      	add	sp, #24
 80026b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 80026b4:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80026b8:	b2c0      	uxtb	r0, r0
 80026ba:	2801      	cmp	r0, #1
 80026bc:	d162      	bne.n	8002784 <HAL_SD_WriteBlocks_DMA+0xf0>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80026be:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80026c0:	18eb      	adds	r3, r5, r3
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80026c2:	2200      	movs	r2, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80026c4:	428b      	cmp	r3, r1
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80026c6:	63a2      	str	r2, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80026c8:	d904      	bls.n	80026d4 <HAL_SD_WriteBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80026ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026d0:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 80026d2:	e7ec      	b.n	80026ae <HAL_SD_WriteBlocks_DMA+0x1a>
    hsd->Instance->DCTRL = 0U;
 80026d4:	6820      	ldr	r0, [r4, #0]
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80026d6:	492c      	ldr	r1, [pc, #176]	; (8002788 <HAL_SD_WriteBlocks_DMA+0xf4>)
    hsd->State = HAL_SD_STATE_BUSY;
 80026d8:	2303      	movs	r3, #3
 80026da:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 80026de:	62c2      	str	r2, [r0, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));    
 80026e0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80026e2:	f043 031a 	orr.w	r3, r3, #26
 80026e6:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80026e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80026ea:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80026ec:	4927      	ldr	r1, [pc, #156]	; (800278c <HAL_SD_WriteBlocks_DMA+0xf8>)
 80026ee:	64d9      	str	r1, [r3, #76]	; 0x4c
    hsd->hdmatx->XferAbortCallback = NULL;
 80026f0:	651a      	str	r2, [r3, #80]	; 0x50
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80026f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80026f4:	f44f 7100 	mov.w	r1, #512	; 0x200
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80026f8:	2b01      	cmp	r3, #1
      BlockAdd *= 512U;
 80026fa:	bf18      	it	ne
 80026fc:	026d      	lslne	r5, r5, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80026fe:	f001 fbc4 	bl	8003e8a <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002702:	b150      	cbz	r0, 800271a <HAL_SD_WriteBlocks_DMA+0x86>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8002704:	6823      	ldr	r3, [r4, #0]
 8002706:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800270a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800270c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800270e:	4318      	orrs	r0, r3
 8002710:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002712:	2001      	movs	r0, #1
 8002714:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8002718:	e7c9      	b.n	80026ae <HAL_SD_WriteBlocks_DMA+0x1a>
    if(NumberOfBlocks > 1U)
 800271a:	2e01      	cmp	r6, #1
 800271c:	d90f      	bls.n	800273e <HAL_SD_WriteBlocks_DMA+0xaa>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800271e:	23a0      	movs	r3, #160	; 0xa0
 8002720:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8002722:	4629      	mov	r1, r5
 8002724:	6820      	ldr	r0, [r4, #0]
 8002726:	f001 fc10 	bl	8003f4a <SDMMC_CmdWriteMultiBlock>
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 800272a:	4605      	mov	r5, r0
 800272c:	6822      	ldr	r2, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 800272e:	b168      	cbz	r0, 800274c <HAL_SD_WriteBlocks_DMA+0xb8>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8002730:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8002734:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002736:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002738:	4305      	orrs	r5, r0
 800273a:	63a5      	str	r5, [r4, #56]	; 0x38
 800273c:	e7e9      	b.n	8002712 <HAL_SD_WriteBlocks_DMA+0x7e>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800273e:	2390      	movs	r3, #144	; 0x90
 8002740:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8002742:	4629      	mov	r1, r5
 8002744:	6820      	ldr	r0, [r4, #0]
 8002746:	f001 fbe8 	bl	8003f1a <SDMMC_CmdWriteSingleBlock>
 800274a:	e7ee      	b.n	800272a <HAL_SD_WriteBlocks_DMA+0x96>
    __HAL_SD_DMA_ENABLE(hsd);
 800274c:	4b10      	ldr	r3, [pc, #64]	; (8002790 <HAL_SD_WriteBlocks_DMA+0xfc>)
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800274e:	6c20      	ldr	r0, [r4, #64]	; 0x40
    __HAL_SD_DMA_ENABLE(hsd);
 8002750:	f04f 0801 	mov.w	r8, #1
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8002754:	0276      	lsls	r6, r6, #9
    __HAL_SD_DMA_ENABLE(hsd);
 8002756:	f8c3 8000 	str.w	r8, [r3]
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800275a:	3280      	adds	r2, #128	; 0x80
 800275c:	08b3      	lsrs	r3, r6, #2
 800275e:	4639      	mov	r1, r7
 8002760:	f7fe ff2e 	bl	80015c0 <HAL_DMA_Start_IT>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002764:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002768:	e88d 0048 	stmia.w	sp, {r3, r6}
    SDIO_ConfigData(hsd->Instance, &config);
 800276c:	4669      	mov	r1, sp
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800276e:	2390      	movs	r3, #144	; 0x90
    SDIO_ConfigData(hsd->Instance, &config);
 8002770:	6820      	ldr	r0, [r4, #0]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002772:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002774:	9503      	str	r5, [sp, #12]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002776:	9504      	str	r5, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002778:	f8cd 8014 	str.w	r8, [sp, #20]
    SDIO_ConfigData(hsd->Instance, &config);
 800277c:	f001 fb72 	bl	8003e64 <SDIO_ConfigData>
    return HAL_OK;
 8002780:	4628      	mov	r0, r5
 8002782:	e794      	b.n	80026ae <HAL_SD_WriteBlocks_DMA+0x1a>
    return HAL_BUSY;
 8002784:	2002      	movs	r0, #2
 8002786:	e792      	b.n	80026ae <HAL_SD_WriteBlocks_DMA+0x1a>
 8002788:	080024b1 	.word	0x080024b1
 800278c:	08002cf5 	.word	0x08002cf5
 8002790:	4225858c 	.word	0x4225858c

08002794 <HAL_SD_ErrorCallback>:
 8002794:	4770      	bx	lr

08002796 <SD_DMAReceiveCplt>:
{
 8002796:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002798:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800279a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800279c:	2b82      	cmp	r3, #130	; 0x82
 800279e:	d109      	bne.n	80027b4 <SD_DMAReceiveCplt+0x1e>
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80027a0:	6820      	ldr	r0, [r4, #0]
 80027a2:	f001 fbeb 	bl	8003f7c <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 80027a6:	b128      	cbz	r0, 80027b4 <SD_DMAReceiveCplt+0x1e>
      hsd->ErrorCode |= errorstate;
 80027a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027aa:	4318      	orrs	r0, r3
 80027ac:	63a0      	str	r0, [r4, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 80027ae:	4620      	mov	r0, r4
 80027b0:	f7ff fff0 	bl	8002794 <HAL_SD_ErrorCallback>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80027b4:	6823      	ldr	r3, [r4, #0]
 80027b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b8:	f022 0208 	bic.w	r2, r2, #8
 80027bc:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80027be:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80027c2:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 80027c4:	2301      	movs	r3, #1
 80027c6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_RxCpltCallback(hsd);
 80027ca:	4620      	mov	r0, r4
 80027cc:	f003 fd5f 	bl	800628e <HAL_SD_RxCpltCallback>
 80027d0:	bd10      	pop	{r4, pc}

080027d2 <HAL_SD_GetCardCSD>:
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 80027d2:	6e43      	ldr	r3, [r0, #100]	; 0x64
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 80027d4:	0f9a      	lsrs	r2, r3, #30
 80027d6:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 80027d8:	f3c3 6283 	ubfx	r2, r3, #26, #4
 80027dc:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 80027de:	f3c3 6201 	ubfx	r2, r3, #24, #2
 80027e2:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 80027e4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80027e8:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 80027ea:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 80027ee:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)tmp;
 80027f0:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 80027f2:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 80027f4:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80027f6:	0e1a      	lsrs	r2, r3, #24
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 80027f8:	0112      	lsls	r2, r2, #4
 80027fa:	80ca      	strh	r2, [r1, #6]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 80027fc:	88ca      	ldrh	r2, [r1, #6]
{
 80027fe:	b530      	push	{r4, r5, lr}
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 8002800:	b292      	uxth	r2, r2
 8002802:	f3c3 5403 	ubfx	r4, r3, #20, #4
 8002806:	4322      	orrs	r2, r4
 8002808:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 800280a:	f3c3 4203 	ubfx	r2, r3, #16, #4
 800280e:	720a      	strb	r2, [r1, #8]
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 8002810:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8002814:	09d4      	lsrs	r4, r2, #7
 8002816:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8002818:	f3c2 1480 	ubfx	r4, r2, #6, #1
 800281c:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 800281e:	f3c2 1440 	ubfx	r4, r2, #5, #1
 8002822:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8002824:	f3c2 1400 	ubfx	r4, r2, #4, #1
 8002828:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 800282a:	2400      	movs	r4, #0
 800282c:	734c      	strb	r4, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 800282e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002830:	2c00      	cmp	r4, #0
 8002832:	f040 8083 	bne.w	800293c <HAL_SD_GetCardCSD+0x16a>
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8002836:	0292      	lsls	r2, r2, #10
 8002838:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800283c:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp) << 2U;
 800283e:	690a      	ldr	r2, [r1, #16]
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8002846:	4313      	orrs	r3, r2
 8002848:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800284a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 800284c:	690b      	ldr	r3, [r1, #16]
 800284e:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8002852:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 8002854:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8002858:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 800285a:	f3c2 6302 	ubfx	r3, r2, #24, #3
 800285e:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 8002860:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8002864:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8002866:	f3c2 4382 	ubfx	r3, r2, #18, #3
 800286a:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 800286c:	0bd3      	lsrs	r3, r2, #15
 800286e:	f003 0306 	and.w	r3, r3, #6
 8002872:	760b      	strb	r3, [r1, #24]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 8002874:	7e0c      	ldrb	r4, [r1, #24]
 8002876:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800287a:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800287e:	4322      	orrs	r2, r4
 8002880:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002882:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8002884:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002886:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8002888:	3402      	adds	r4, #2
 800288a:	40a2      	lsls	r2, r4
 800288c:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 800288e:	7a0d      	ldrb	r5, [r1, #8]
 8002890:	2401      	movs	r4, #1
 8002892:	40ac      	lsls	r4, r5
 8002894:	6584      	str	r4, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8002896:	0a64      	lsrs	r4, r4, #9
 8002898:	4362      	muls	r2, r4
 800289a:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800289c:	f44f 7200 	mov.w	r2, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 80028a0:	6602      	str	r2, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 80028a2:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 80028ac:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 80028ae:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 80028b0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 80028b2:	7e8a      	ldrb	r2, [r1, #26]
 80028b4:	f3c3 14c0 	ubfx	r4, r3, #7, #1
 80028b8:	4322      	orrs	r2, r4
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 80028ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 80028be:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 80028c0:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 80028c2:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 80028c4:	0fda      	lsrs	r2, r3, #31
 80028c6:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 80028c8:	f3c3 7241 	ubfx	r2, r3, #29, #2
 80028cc:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 80028ce:	f3c3 6282 	ubfx	r2, r3, #26, #3
 80028d2:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 80028d4:	0d9a      	lsrs	r2, r3, #22
 80028d6:	f002 020c 	and.w	r2, r2, #12
 80028da:	77ca      	strb	r2, [r1, #31]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 80028dc:	7fca      	ldrb	r2, [r1, #31]
 80028de:	f3c3 5081 	ubfx	r0, r3, #22, #2
 80028e2:	4302      	orrs	r2, r0
 80028e4:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 80028e6:	f3c3 5240 	ubfx	r2, r3, #21, #1
 80028ea:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3           = 0U;
 80028ee:	2000      	movs	r0, #0
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 80028f0:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3           = 0U;
 80028f4:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 80028f8:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 80028fc:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8002900:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 8002904:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8002908:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 800290c:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8002910:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 8002914:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8002918:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 800291c:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8002920:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 8002924:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8002928:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC              = (tmp & 0x03U);
 800292c:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8002930:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 8002934:	2301      	movs	r3, #1
 8002936:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 800293a:	bd30      	pop	{r4, r5, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800293c:	2c01      	cmp	r4, #1
 800293e:	d11a      	bne.n	8002976 <HAL_SD_GetCardCSD+0x1a4>
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 8002940:	041b      	lsls	r3, r3, #16
 8002942:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8002946:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8002948:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp << 8U);
 800294a:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800294c:	0e1c      	lsrs	r4, r3, #24
    pCSD->DeviceSize |= (tmp << 8U);
 800294e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8002952:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 8002954:	690c      	ldr	r4, [r1, #16]
 8002956:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800295a:	4322      	orrs	r2, r4
 800295c:	610a      	str	r2, [r1, #16]
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 800295e:	690a      	ldr	r2, [r1, #16]
 8002960:	0292      	lsls	r2, r2, #10
 8002962:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002966:	6542      	str	r2, [r0, #84]	; 0x54
 8002968:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 800296a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800296e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8002972:	6582      	str	r2, [r0, #88]	; 0x58
 8002974:	e794      	b.n	80028a0 <HAL_SD_GetCardCSD+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 8002976:	6803      	ldr	r3, [r0, #0]
 8002978:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800297c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800297e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002984:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002986:	2301      	movs	r3, #1
 8002988:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 800298c:	4618      	mov	r0, r3
 800298e:	bd30      	pop	{r4, r5, pc}

08002990 <HAL_SD_InitCard>:
{
 8002990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002992:	b099      	sub	sp, #100	; 0x64
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002994:	2500      	movs	r5, #0
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002996:	2376      	movs	r3, #118	; 0x76
 8002998:	930c      	str	r3, [sp, #48]	; 0x30
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800299a:	950a      	str	r5, [sp, #40]	; 0x28
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800299c:	950b      	str	r5, [sp, #44]	; 0x2c
  SDIO_Init(hsd->Instance, Init);
 800299e:	ab0a      	add	r3, sp, #40	; 0x28
{
 80029a0:	4604      	mov	r4, r0
  SDIO_Init(hsd->Instance, Init);
 80029a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80029a6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  __HAL_SD_DISABLE(hsd); 
 80029aa:	4e6f      	ldr	r6, [pc, #444]	; (8002b68 <HAL_SD_InitCard+0x1d8>)
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80029ac:	9507      	str	r5, [sp, #28]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80029ae:	9508      	str	r5, [sp, #32]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80029b0:	9509      	str	r5, [sp, #36]	; 0x24
  SDIO_Init(hsd->Instance, Init);
 80029b2:	ab07      	add	r3, sp, #28
 80029b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029b6:	6820      	ldr	r0, [r4, #0]
 80029b8:	f001 f97a 	bl	8003cb0 <SDIO_Init>
  __HAL_SD_ENABLE(hsd);
 80029bc:	2701      	movs	r7, #1
  __HAL_SD_DISABLE(hsd); 
 80029be:	6035      	str	r5, [r6, #0]
  SDIO_PowerState_ON(hsd->Instance);
 80029c0:	6820      	ldr	r0, [r4, #0]
 80029c2:	f001 f999 	bl	8003cf8 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 80029c6:	6037      	str	r7, [r6, #0]
  HAL_Delay(2U);
 80029c8:	2002      	movs	r0, #2
 80029ca:	f7fe fad9 	bl	8000f80 <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80029ce:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 80029d0:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80029d2:	f001 fb05 	bl	8003fe0 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 80029d6:	4606      	mov	r6, r0
 80029d8:	b968      	cbnz	r0, 80029f6 <HAL_SD_InitCard+0x66>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80029da:	6820      	ldr	r0, [r4, #0]
 80029dc:	f001 fb28 	bl	8004030 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 80029e0:	b380      	cbz	r0, 8002a44 <HAL_SD_InitCard+0xb4>
    hsd->SdCard.CardVersion = CARD_V1_X;
 80029e2:	64a6      	str	r6, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80029e4:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80029e8:	9b06      	ldr	r3, [sp, #24]
 80029ea:	1c5a      	adds	r2, r3, #1
 80029ec:	42ab      	cmp	r3, r5
 80029ee:	9206      	str	r2, [sp, #24]
 80029f0:	d108      	bne.n	8002a04 <HAL_SD_InitCard+0x74>
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80029f2:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    hsd->State = HAL_SD_STATE_READY;
 80029f6:	2001      	movs	r0, #1
 80029f8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80029fc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80029fe:	430e      	orrs	r6, r1
 8002a00:	63a6      	str	r6, [r4, #56]	; 0x38
    return HAL_ERROR;
 8002a02:	e081      	b.n	8002b08 <HAL_SD_InitCard+0x178>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8002a04:	2100      	movs	r1, #0
 8002a06:	6820      	ldr	r0, [r4, #0]
 8002a08:	f001 fb4a 	bl	80040a0 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8002a0c:	4601      	mov	r1, r0
 8002a0e:	b110      	cbz	r0, 8002a16 <HAL_SD_InitCard+0x86>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002a10:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8002a14:	e7ef      	b.n	80029f6 <HAL_SD_InitCard+0x66>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8002a16:	6820      	ldr	r0, [r4, #0]
 8002a18:	f001 fb5a 	bl	80040d0 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8002a1c:	4601      	mov	r1, r0
 8002a1e:	2800      	cmp	r0, #0
 8002a20:	d1f6      	bne.n	8002a10 <HAL_SD_InitCard+0x80>
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002a22:	6820      	ldr	r0, [r4, #0]
 8002a24:	f001 f983 	bl	8003d2e <SDIO_GetResponse>
    while(validvoltage == 0U)
 8002a28:	2800      	cmp	r0, #0
 8002a2a:	dadd      	bge.n	80029e8 <HAL_SD_InitCard+0x58>
    hsd->SdCard.CardType = CARD_SDSC;
 8002a2c:	2300      	movs	r3, #0
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002a2e:	6463      	str	r3, [r4, #68]	; 0x44
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8002a30:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 8002a32:	2301      	movs	r3, #1
 8002a34:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8002a38:	f001 f962 	bl	8003d00 <SDIO_GetPowerState>
 8002a3c:	bb10      	cbnz	r0, 8002a84 <HAL_SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002a3e:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8002a42:	e06b      	b.n	8002b1c <HAL_SD_InitCard+0x18c>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002a44:	64a7      	str	r7, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8002a46:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8002a4a:	9b06      	ldr	r3, [sp, #24]
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	42ab      	cmp	r3, r5
 8002a50:	9206      	str	r2, [sp, #24]
 8002a52:	d0ce      	beq.n	80029f2 <HAL_SD_InitCard+0x62>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8002a54:	2100      	movs	r1, #0
 8002a56:	6820      	ldr	r0, [r4, #0]
 8002a58:	f001 fb22 	bl	80040a0 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8002a5c:	4606      	mov	r6, r0
 8002a5e:	2800      	cmp	r0, #0
 8002a60:	d1c9      	bne.n	80029f6 <HAL_SD_InitCard+0x66>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8002a62:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002a66:	6820      	ldr	r0, [r4, #0]
 8002a68:	f001 fb32 	bl	80040d0 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8002a6c:	4606      	mov	r6, r0
 8002a6e:	2800      	cmp	r0, #0
 8002a70:	d1c1      	bne.n	80029f6 <HAL_SD_InitCard+0x66>
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002a72:	4601      	mov	r1, r0
 8002a74:	6820      	ldr	r0, [r4, #0]
 8002a76:	f001 f95a 	bl	8003d2e <SDIO_GetResponse>
    while(validvoltage == 0U)
 8002a7a:	0fc3      	lsrs	r3, r0, #31
 8002a7c:	d0e5      	beq.n	8002a4a <HAL_SD_InitCard+0xba>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002a7e:	0042      	lsls	r2, r0, #1
 8002a80:	d5d4      	bpl.n	8002a2c <HAL_SD_InitCard+0x9c>
 8002a82:	e7d4      	b.n	8002a2e <HAL_SD_InitCard+0x9e>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002a84:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	d01a      	beq.n	8002ac0 <HAL_SD_InitCard+0x130>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002a8a:	6820      	ldr	r0, [r4, #0]
 8002a8c:	f001 fb51 	bl	8004132 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a90:	4605      	mov	r5, r0
 8002a92:	2800      	cmp	r0, #0
 8002a94:	d142      	bne.n	8002b1c <HAL_SD_InitCard+0x18c>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002a96:	4601      	mov	r1, r0
 8002a98:	6820      	ldr	r0, [r4, #0]
 8002a9a:	f001 f948 	bl	8003d2e <SDIO_GetResponse>
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002a9e:	2104      	movs	r1, #4
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002aa0:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002aa2:	6820      	ldr	r0, [r4, #0]
 8002aa4:	f001 f943 	bl	8003d2e <SDIO_GetResponse>
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002aa8:	2108      	movs	r1, #8
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002aaa:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002aac:	6820      	ldr	r0, [r4, #0]
 8002aae:	f001 f93e 	bl	8003d2e <SDIO_GetResponse>
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002ab2:	210c      	movs	r1, #12
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002ab4:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002ab6:	6820      	ldr	r0, [r4, #0]
 8002ab8:	f001 f939 	bl	8003d2e <SDIO_GetResponse>
 8002abc:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002ac0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	d122      	bne.n	8002b0c <HAL_SD_InitCard+0x17c>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002ac6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d12e      	bne.n	8002b2a <HAL_SD_InitCard+0x19a>
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002acc:	2104      	movs	r1, #4
 8002ace:	6820      	ldr	r0, [r4, #0]
 8002ad0:	f001 f92d 	bl	8003d2e <SDIO_GetResponse>
 8002ad4:	0d00      	lsrs	r0, r0, #20
 8002ad6:	64e0      	str	r0, [r4, #76]	; 0x4c
  HAL_SD_GetCardCSD(hsd, &CSD);
 8002ad8:	a90d      	add	r1, sp, #52	; 0x34
 8002ada:	4620      	mov	r0, r4
 8002adc:	f7ff fe79 	bl	80027d2 <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002ae0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002ae2:	6820      	ldr	r0, [r4, #0]
 8002ae4:	0412      	lsls	r2, r2, #16
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f001 fa62 	bl	8003fb0 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002aec:	4605      	mov	r5, r0
 8002aee:	b9a8      	cbnz	r0, 8002b1c <HAL_SD_InitCard+0x18c>
  SDIO_Init(hsd->Instance, hsd->Init);
 8002af0:	f104 0310 	add.w	r3, r4, #16
 8002af4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002af8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002afc:	1d23      	adds	r3, r4, #4
 8002afe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b00:	6820      	ldr	r0, [r4, #0]
 8002b02:	f001 f8d5 	bl	8003cb0 <SDIO_Init>
  return HAL_OK;
 8002b06:	4628      	mov	r0, r5
}
 8002b08:	b019      	add	sp, #100	; 0x64
 8002b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002b0c:	f10d 0116 	add.w	r1, sp, #22
 8002b10:	6820      	ldr	r0, [r4, #0]
 8002b12:	f001 fb39 	bl	8004188 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002b16:	4605      	mov	r5, r0
 8002b18:	2800      	cmp	r0, #0
 8002b1a:	d0d4      	beq.n	8002ac6 <HAL_SD_InitCard+0x136>
    hsd->State = HAL_SD_STATE_READY;
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002b22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b24:	431d      	orrs	r5, r3
 8002b26:	63a5      	str	r5, [r4, #56]	; 0x38
 8002b28:	e7ee      	b.n	8002b08 <HAL_SD_InitCard+0x178>
    hsd->SdCard.RelCardAdd = sd_rca;
 8002b2a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8002b2e:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002b30:	6820      	ldr	r0, [r4, #0]
 8002b32:	0409      	lsls	r1, r1, #16
 8002b34:	f001 fb12 	bl	800415c <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002b38:	4605      	mov	r5, r0
 8002b3a:	2800      	cmp	r0, #0
 8002b3c:	d1ee      	bne.n	8002b1c <HAL_SD_InitCard+0x18c>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002b3e:	4601      	mov	r1, r0
 8002b40:	6820      	ldr	r0, [r4, #0]
 8002b42:	f001 f8f4 	bl	8003d2e <SDIO_GetResponse>
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002b46:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002b48:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002b4a:	6820      	ldr	r0, [r4, #0]
 8002b4c:	f001 f8ef 	bl	8003d2e <SDIO_GetResponse>
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002b50:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002b52:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002b54:	6820      	ldr	r0, [r4, #0]
 8002b56:	f001 f8ea 	bl	8003d2e <SDIO_GetResponse>
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002b5a:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002b5c:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002b5e:	6820      	ldr	r0, [r4, #0]
 8002b60:	f001 f8e5 	bl	8003d2e <SDIO_GetResponse>
 8002b64:	6720      	str	r0, [r4, #112]	; 0x70
 8002b66:	e7b1      	b.n	8002acc <HAL_SD_InitCard+0x13c>
 8002b68:	422580a0 	.word	0x422580a0

08002b6c <HAL_SD_Init>:
{
 8002b6c:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8002b6e:	4604      	mov	r4, r0
 8002b70:	b1a0      	cbz	r0, 8002b9c <HAL_SD_Init+0x30>
  if(hsd->State == HAL_SD_STATE_RESET)
 8002b72:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8002b76:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002b7a:	b913      	cbnz	r3, 8002b82 <HAL_SD_Init+0x16>
    hsd->Lock = HAL_UNLOCKED;
 8002b7c:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8002b7e:	f004 fb2f 	bl	80071e0 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8002b82:	2303      	movs	r3, #3
 8002b84:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_InitCard(hsd);
 8002b88:	4620      	mov	r0, r4
 8002b8a:	f7ff ff01 	bl	8002990 <HAL_SD_InitCard>
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b8e:	2000      	movs	r0, #0
  hsd->State = HAL_SD_STATE_READY;
 8002b90:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b92:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8002b94:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8002b96:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8002b9a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002b9c:	2001      	movs	r0, #1
}
 8002b9e:	bd10      	pop	{r4, pc}

08002ba0 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002ba0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002ba2:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002ba4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002ba6:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002ba8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002baa:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002bac:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002bae:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002bb0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002bb2:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002bb4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002bb6:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002bb8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002bba:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002bbc:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002bbe:	61cb      	str	r3, [r1, #28]
}
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_SD_ConfigWideBusOperation>:
{
 8002bc4:	b570      	push	{r4, r5, r6, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002bcc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002bce:	2b03      	cmp	r3, #3
{
 8002bd0:	b08a      	sub	sp, #40	; 0x28
 8002bd2:	4604      	mov	r4, r0
 8002bd4:	460e      	mov	r6, r1
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002bd6:	d002      	beq.n	8002bde <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDIO_BUS_WIDE_8B)
 8002bd8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002bdc:	d103      	bne.n	8002be6 <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002bde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be4:	e056      	b.n	8002c94 <HAL_SD_ConfigWideBusOperation+0xd0>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8002be6:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8002bea:	d12d      	bne.n	8002c48 <HAL_SD_ConfigWideBusOperation+0x84>
  uint32_t scr[2U] = {0U, 0U};
 8002bec:	2100      	movs	r1, #0
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002bee:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0U, 0U};
 8002bf0:	9104      	str	r1, [sp, #16]
 8002bf2:	9105      	str	r1, [sp, #20]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002bf4:	f001 f89b 	bl	8003d2e <SDIO_GetResponse>
 8002bf8:	0180      	lsls	r0, r0, #6
 8002bfa:	d420      	bmi.n	8002c3e <HAL_SD_ConfigWideBusOperation+0x7a>
  errorstate = SD_FindSCR(hsd, scr);
 8002bfc:	a904      	add	r1, sp, #16
 8002bfe:	4620      	mov	r0, r4
 8002c00:	f7ff fc5d 	bl	80024be <SD_FindSCR>
  if(errorstate != HAL_OK)
 8002c04:	b960      	cbnz	r0, 8002c20 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002c06:	9b05      	ldr	r3, [sp, #20]
 8002c08:	0359      	lsls	r1, r3, #13
 8002c0a:	d51a      	bpl.n	8002c42 <HAL_SD_ConfigWideBusOperation+0x7e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002c0c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002c0e:	6820      	ldr	r0, [r4, #0]
 8002c10:	0409      	lsls	r1, r1, #16
 8002c12:	f001 fa45 	bl	80040a0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 8002c16:	b918      	cbnz	r0, 8002c20 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8002c18:	2102      	movs	r1, #2
 8002c1a:	6820      	ldr	r0, [r4, #0]
 8002c1c:	f001 fb38 	bl	8004290 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8002c20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c22:	4318      	orrs	r0, r3
      hsd->ErrorCode |= errorstate;
 8002c24:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002c26:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8002c28:	2d00      	cmp	r5, #0
 8002c2a:	d035      	beq.n	8002c98 <HAL_SD_ConfigWideBusOperation+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c2c:	6823      	ldr	r3, [r4, #0]
 8002c2e:	f240 52ff 	movw	r2, #1535	; 0x5ff
    hsd->State = HAL_SD_STATE_READY;
 8002c32:	2001      	movs	r0, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c34:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002c36:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8002c3a:	b00a      	add	sp, #40	; 0x28
 8002c3c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002c3e:	4630      	mov	r0, r6
 8002c40:	e7ee      	b.n	8002c20 <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002c42:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002c46:	e7eb      	b.n	8002c20 <HAL_SD_ConfigWideBusOperation+0x5c>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002c48:	bb09      	cbnz	r1, 8002c8e <HAL_SD_ConfigWideBusOperation+0xca>
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002c4a:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0U, 0U};
 8002c4c:	9104      	str	r1, [sp, #16]
 8002c4e:	9105      	str	r1, [sp, #20]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002c50:	f001 f86d 	bl	8003d2e <SDIO_GetResponse>
 8002c54:	0182      	lsls	r2, r0, #6
 8002c56:	d414      	bmi.n	8002c82 <HAL_SD_ConfigWideBusOperation+0xbe>
  errorstate = SD_FindSCR(hsd, scr);
 8002c58:	a904      	add	r1, sp, #16
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	f7ff fc2f 	bl	80024be <SD_FindSCR>
  if(errorstate != HAL_OK)
 8002c60:	b960      	cbnz	r0, 8002c7c <HAL_SD_ConfigWideBusOperation+0xb8>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002c62:	9b05      	ldr	r3, [sp, #20]
 8002c64:	03db      	lsls	r3, r3, #15
 8002c66:	d50f      	bpl.n	8002c88 <HAL_SD_ConfigWideBusOperation+0xc4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002c68:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002c6a:	6820      	ldr	r0, [r4, #0]
 8002c6c:	0409      	lsls	r1, r1, #16
 8002c6e:	f001 fa17 	bl	80040a0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 8002c72:	b918      	cbnz	r0, 8002c7c <HAL_SD_ConfigWideBusOperation+0xb8>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8002c74:	4601      	mov	r1, r0
 8002c76:	6820      	ldr	r0, [r4, #0]
 8002c78:	f001 fb0a 	bl	8004290 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8002c7c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002c7e:	4308      	orrs	r0, r1
 8002c80:	e7d0      	b.n	8002c24 <HAL_SD_ConfigWideBusOperation+0x60>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002c82:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002c86:	e7f9      	b.n	8002c7c <HAL_SD_ConfigWideBusOperation+0xb8>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002c88:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002c8c:	e7f6      	b.n	8002c7c <HAL_SD_ConfigWideBusOperation+0xb8>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002c8e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002c90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002c94:	63a3      	str	r3, [r4, #56]	; 0x38
 8002c96:	e7c6      	b.n	8002c26 <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002c98:	6863      	ldr	r3, [r4, #4]
 8002c9a:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002c9c:	68a3      	ldr	r3, [r4, #8]
 8002c9e:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002ca0:	68e3      	ldr	r3, [r4, #12]
 8002ca2:	9306      	str	r3, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002ca4:	6963      	ldr	r3, [r4, #20]
 8002ca6:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002ca8:	69a3      	ldr	r3, [r4, #24]
 8002caa:	9309      	str	r3, [sp, #36]	; 0x24
    Init.BusWide             = WideMode;
 8002cac:	9607      	str	r6, [sp, #28]
    SDIO_Init(hsd->Instance, Init);
 8002cae:	ab0a      	add	r3, sp, #40	; 0x28
 8002cb0:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8002cb4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002cb8:	ab04      	add	r3, sp, #16
 8002cba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cbc:	6820      	ldr	r0, [r4, #0]
 8002cbe:	f000 fff7 	bl	8003cb0 <SDIO_Init>
  hsd->State = HAL_SD_STATE_READY;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8002cc8:	4628      	mov	r0, r5
 8002cca:	e7b6      	b.n	8002c3a <HAL_SD_ConfigWideBusOperation+0x76>

08002ccc <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002ccc:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8002cce:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002cd0:	0409      	lsls	r1, r1, #16
{
 8002cd2:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002cd4:	6800      	ldr	r0, [r0, #0]
 8002cd6:	f001 faab 	bl	8004230 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 8002cda:	4601      	mov	r1, r0
 8002cdc:	b928      	cbnz	r0, 8002cea <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002cde:	6820      	ldr	r0, [r4, #0]
 8002ce0:	f001 f825 	bl	8003d2e <SDIO_GetResponse>
  return cardstate;
 8002ce4:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8002ce8:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 8002cea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002cec:	4319      	orrs	r1, r3
 8002cee:	63a1      	str	r1, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	e7f7      	b.n	8002ce4 <HAL_SD_GetCardState+0x18>

08002cf4 <SD_DMAError>:
{
 8002cf4:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002cf6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 8002cf8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d003      	beq.n	8002d08 <SD_DMAError+0x14>
 8002d00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d11b      	bne.n	8002d40 <SD_DMAError+0x4c>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d08:	6823      	ldr	r3, [r4, #0]
 8002d0a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002d0e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002d10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d12:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8002d16:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002d18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d1e:	63a3      	str	r3, [r4, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 8002d20:	4620      	mov	r0, r4
 8002d22:	f7ff ffd3 	bl	8002ccc <HAL_SD_GetCardState>
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002d26:	3805      	subs	r0, #5
 8002d28:	b2c0      	uxtb	r0, r0
 8002d2a:	2801      	cmp	r0, #1
 8002d2c:	d805      	bhi.n	8002d3a <SD_DMAError+0x46>
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002d2e:	6820      	ldr	r0, [r4, #0]
 8002d30:	f001 f924 	bl	8003f7c <SDMMC_CmdStopTransfer>
 8002d34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d36:	4318      	orrs	r0, r3
 8002d38:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State= HAL_SD_STATE_READY;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_ErrorCallback(hsd);
 8002d40:	4620      	mov	r0, r4
 8002d42:	f7ff fd27 	bl	8002794 <HAL_SD_ErrorCallback>
 8002d46:	bd10      	pop	{r4, pc}

08002d48 <SD_DMATxAbort>:
{
 8002d48:	b538      	push	{r3, r4, r5, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002d4a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->hdmatx != NULL)
 8002d4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d4e:	b10b      	cbz	r3, 8002d54 <SD_DMATxAbort+0xc>
    hsd->hdmatx = NULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	6423      	str	r3, [r4, #64]	; 0x40
  if(hsd->hdmarx == NULL)
 8002d54:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8002d56:	b9c5      	cbnz	r5, 8002d8a <SD_DMATxAbort+0x42>
    CardState = HAL_SD_GetCardState(hsd);
 8002d58:	4620      	mov	r0, r4
 8002d5a:	f7ff ffb7 	bl	8002ccc <HAL_SD_GetCardState>
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002d5e:	3805      	subs	r0, #5
    hsd->State = HAL_SD_STATE_READY;
 8002d60:	2301      	movs	r3, #1
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002d62:	b2c0      	uxtb	r0, r0
 8002d64:	4298      	cmp	r0, r3
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002d66:	63a5      	str	r5, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002d68:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002d6c:	d80d      	bhi.n	8002d8a <SD_DMATxAbort+0x42>
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002d6e:	6820      	ldr	r0, [r4, #0]
 8002d70:	f001 f904 	bl	8003f7c <SDMMC_CmdStopTransfer>
 8002d74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d76:	4318      	orrs	r0, r3
 8002d78:	63a0      	str	r0, [r4, #56]	; 0x38
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002d7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        HAL_SD_AbortCallback(hsd);
 8002d7c:	4620      	mov	r0, r4
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002d7e:	b113      	cbz	r3, 8002d86 <SD_DMATxAbort+0x3e>
        HAL_SD_AbortCallback(hsd);
 8002d80:	f003 fa7d 	bl	800627e <HAL_SD_AbortCallback>
 8002d84:	bd38      	pop	{r3, r4, r5, pc}
        HAL_SD_ErrorCallback(hsd);
 8002d86:	f7ff fd05 	bl	8002794 <HAL_SD_ErrorCallback>
 8002d8a:	bd38      	pop	{r3, r4, r5, pc}

08002d8c <SD_DMARxAbort>:
{
 8002d8c:	b538      	push	{r3, r4, r5, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002d8e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->hdmarx != NULL)
 8002d90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002d92:	b10b      	cbz	r3, 8002d98 <SD_DMARxAbort+0xc>
    hsd->hdmarx = NULL;
 8002d94:	2300      	movs	r3, #0
 8002d96:	63e3      	str	r3, [r4, #60]	; 0x3c
  if(hsd->hdmatx == NULL)
 8002d98:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8002d9a:	b9c5      	cbnz	r5, 8002dce <SD_DMARxAbort+0x42>
    CardState = HAL_SD_GetCardState(hsd);
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	f7ff ff95 	bl	8002ccc <HAL_SD_GetCardState>
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002da2:	3805      	subs	r0, #5
    hsd->State = HAL_SD_STATE_READY;
 8002da4:	2301      	movs	r3, #1
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002da6:	b2c0      	uxtb	r0, r0
 8002da8:	4298      	cmp	r0, r3
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002daa:	63a5      	str	r5, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002dac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002db0:	d80d      	bhi.n	8002dce <SD_DMARxAbort+0x42>
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002db2:	6820      	ldr	r0, [r4, #0]
 8002db4:	f001 f8e2 	bl	8003f7c <SDMMC_CmdStopTransfer>
 8002db8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002dba:	4318      	orrs	r0, r3
 8002dbc:	63a0      	str	r0, [r4, #56]	; 0x38
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002dbe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        HAL_SD_AbortCallback(hsd);
 8002dc0:	4620      	mov	r0, r4
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002dc2:	b113      	cbz	r3, 8002dca <SD_DMARxAbort+0x3e>
        HAL_SD_AbortCallback(hsd);
 8002dc4:	f003 fa5b 	bl	800627e <HAL_SD_AbortCallback>
 8002dc8:	bd38      	pop	{r3, r4, r5, pc}
        HAL_SD_ErrorCallback(hsd);
 8002dca:	f7ff fce3 	bl	8002794 <HAL_SD_ErrorCallback>
 8002dce:	bd38      	pop	{r3, r4, r5, pc}

08002dd0 <HAL_SD_IRQHandler>:
{
 8002dd0:	b570      	push	{r4, r5, r6, lr}
 8002dd2:	4604      	mov	r4, r0
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 8002dd4:	6800      	ldr	r0, [r0, #0]
 8002dd6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002dd8:	05db      	lsls	r3, r3, #23
 8002dda:	d54d      	bpl.n	8002e78 <HAL_SD_IRQHandler+0xa8>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 8002ddc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002de0:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002de2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002de4:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 8002de8:	63c3      	str	r3, [r0, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8002dea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002dec:	f013 0f08 	tst.w	r3, #8
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8002df0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8002df2:	d01e      	beq.n	8002e32 <HAL_SD_IRQHandler+0x62>
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8002df4:	079e      	lsls	r6, r3, #30
 8002df6:	d402      	bmi.n	8002dfe <HAL_SD_IRQHandler+0x2e>
 8002df8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002dfa:	069d      	lsls	r5, r3, #26
 8002dfc:	d508      	bpl.n	8002e10 <HAL_SD_IRQHandler+0x40>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002dfe:	f001 f8bd 	bl	8003f7c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8002e02:	b128      	cbz	r0, 8002e10 <HAL_SD_IRQHandler+0x40>
          hsd->ErrorCode |= errorstate;
 8002e04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e06:	4318      	orrs	r0, r3
 8002e08:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002e0a:	4620      	mov	r0, r4
 8002e0c:	f7ff fcc2 	bl	8002794 <HAL_SD_ErrorCallback>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e10:	6823      	ldr	r3, [r4, #0]
 8002e12:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002e16:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8002e1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e20:	07d9      	lsls	r1, r3, #31
        HAL_SD_RxCpltCallback(hsd);
 8002e22:	4620      	mov	r0, r4
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8002e24:	d402      	bmi.n	8002e2c <HAL_SD_IRQHandler+0x5c>
 8002e26:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e28:	079a      	lsls	r2, r3, #30
 8002e2a:	d522      	bpl.n	8002e72 <HAL_SD_IRQHandler+0xa2>
        HAL_SD_RxCpltCallback(hsd);
 8002e2c:	f003 fa2f 	bl	800628e <HAL_SD_RxCpltCallback>
 8002e30:	bd70      	pop	{r4, r5, r6, pc}
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8002e32:	061b      	lsls	r3, r3, #24
 8002e34:	f140 809b 	bpl.w	8002f6e <HAL_SD_IRQHandler+0x19e>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8002e38:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e3a:	069e      	lsls	r6, r3, #26
 8002e3c:	d508      	bpl.n	8002e50 <HAL_SD_IRQHandler+0x80>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002e3e:	f001 f89d 	bl	8003f7c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8002e42:	b128      	cbz	r0, 8002e50 <HAL_SD_IRQHandler+0x80>
          hsd->ErrorCode |= errorstate;
 8002e44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e46:	4318      	orrs	r0, r3
 8002e48:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002e4a:	4620      	mov	r0, r4
 8002e4c:	f7ff fca2 	bl	8002794 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 8002e50:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e52:	07dd      	lsls	r5, r3, #31
 8002e54:	f100 808b 	bmi.w	8002f6e <HAL_SD_IRQHandler+0x19e>
 8002e58:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e5a:	0798      	lsls	r0, r3, #30
 8002e5c:	f100 8087 	bmi.w	8002f6e <HAL_SD_IRQHandler+0x19e>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002e60:	6822      	ldr	r2, [r4, #0]
 8002e62:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002e64:	f023 0308 	bic.w	r3, r3, #8
 8002e68:	62d3      	str	r3, [r2, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8002e70:	4620      	mov	r0, r4
 8002e72:	f003 fa08 	bl	8006286 <HAL_SD_TxCpltCallback>
 8002e76:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 8002e78:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002e7a:	0459      	lsls	r1, r3, #17
 8002e7c:	d510      	bpl.n	8002ea0 <HAL_SD_IRQHandler+0xd0>
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
  uint32_t count = 0U;
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 8002e7e:	6a25      	ldr	r5, [r4, #32]
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 8002e80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e84:	6383      	str	r3, [r0, #56]	; 0x38
 8002e86:	f105 0620 	add.w	r6, r5, #32
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 8002e8a:	4629      	mov	r1, r5
 8002e8c:	6820      	ldr	r0, [r4, #0]
 8002e8e:	3504      	adds	r5, #4
 8002e90:	f000 ff2d 	bl	8003cee <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 8002e94:	42ae      	cmp	r6, r5
 8002e96:	d1f8      	bne.n	8002e8a <HAL_SD_IRQHandler+0xba>
  }
  
  hsd->pTxBuffPtr += 8U;
 8002e98:	6a23      	ldr	r3, [r4, #32]
 8002e9a:	3320      	adds	r3, #32
 8002e9c:	6223      	str	r3, [r4, #32]
 8002e9e:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 8002ea0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002ea2:	041a      	lsls	r2, r3, #16
 8002ea4:	d510      	bpl.n	8002ec8 <HAL_SD_IRQHandler+0xf8>
  tmp = (uint32_t*)hsd->pRxBuffPtr;
 8002ea6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 8002ea8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eac:	1f2e      	subs	r6, r5, #4
 8002eae:	6383      	str	r3, [r0, #56]	; 0x38
 8002eb0:	351c      	adds	r5, #28
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 8002eb2:	6820      	ldr	r0, [r4, #0]
 8002eb4:	f000 ff18 	bl	8003ce8 <SDIO_ReadFIFO>
 8002eb8:	f846 0f04 	str.w	r0, [r6, #4]!
  for(count = 0U; count < 8U; count++)
 8002ebc:	42ae      	cmp	r6, r5
 8002ebe:	d1f8      	bne.n	8002eb2 <HAL_SD_IRQHandler+0xe2>
  hsd->pRxBuffPtr += 8U;
 8002ec0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002ec2:	3320      	adds	r3, #32
 8002ec4:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ec6:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR) != RESET)
 8002ec8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002eca:	f013 0f3a 	tst.w	r3, #58	; 0x3a
 8002ece:	d04e      	beq.n	8002f6e <HAL_SD_IRQHandler+0x19e>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 8002ed0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002ed2:	079b      	lsls	r3, r3, #30
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 8002ed4:	bf42      	ittt	mi
 8002ed6:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8002ed8:	f043 0302 	orrmi.w	r3, r3, #2
 8002edc:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 8002ede:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002ee0:	071e      	lsls	r6, r3, #28
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 8002ee2:	bf42      	ittt	mi
 8002ee4:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8002ee6:	f043 0308 	orrmi.w	r3, r3, #8
 8002eea:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 8002eec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002eee:	069d      	lsls	r5, r3, #26
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 8002ef0:	bf42      	ittt	mi
 8002ef2:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8002ef4:	f043 0320 	orrmi.w	r3, r3, #32
 8002ef8:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 8002efa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002efc:	06d9      	lsls	r1, r3, #27
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 8002efe:	bf42      	ittt	mi
 8002f00:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8002f02:	f043 0310 	orrmi.w	r3, r3, #16
 8002f06:	63a3      	strmi	r3, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f08:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8002f0c:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002f0e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002f10:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 8002f14:	63c3      	str	r3, [r0, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8002f16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002f18:	061a      	lsls	r2, r3, #24
 8002f1a:	d51f      	bpl.n	8002f5c <HAL_SD_IRQHandler+0x18c>
      if(hsd->hdmatx != NULL)
 8002f1c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002f1e:	b148      	cbz	r0, 8002f34 <HAL_SD_IRQHandler+0x164>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8002f20:	4b13      	ldr	r3, [pc, #76]	; (8002f70 <HAL_SD_IRQHandler+0x1a0>)
 8002f22:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002f24:	f7fe fb8a 	bl	800163c <HAL_DMA_Abort_IT>
 8002f28:	b308      	cbz	r0, 8002f6e <HAL_SD_IRQHandler+0x19e>
          SD_DMATxAbort(hsd->hdmatx);
 8002f2a:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 8002f2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          SD_DMATxAbort(hsd->hdmatx);
 8002f30:	f7ff bf0a 	b.w	8002d48 <SD_DMATxAbort>
      else if(hsd->hdmarx != NULL)
 8002f34:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002f36:	b148      	cbz	r0, 8002f4c <HAL_SD_IRQHandler+0x17c>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8002f38:	4b0e      	ldr	r3, [pc, #56]	; (8002f74 <HAL_SD_IRQHandler+0x1a4>)
 8002f3a:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002f3c:	f7fe fb7e 	bl	800163c <HAL_DMA_Abort_IT>
 8002f40:	b1a8      	cbz	r0, 8002f6e <HAL_SD_IRQHandler+0x19e>
          SD_DMARxAbort(hsd->hdmarx);
 8002f42:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8002f44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          SD_DMARxAbort(hsd->hdmarx);
 8002f48:	f7ff bf20 	b.w	8002d8c <SD_DMARxAbort>
        hsd->State = HAL_SD_STATE_READY;
 8002f4c:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002f4e:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002f50:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 8002f54:	4620      	mov	r0, r4
 8002f56:	f003 f992 	bl	800627e <HAL_SD_AbortCallback>
 8002f5a:	bd70      	pop	{r4, r5, r6, pc}
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8002f5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002f5e:	071b      	lsls	r3, r3, #28
 8002f60:	d505      	bpl.n	8002f6e <HAL_SD_IRQHandler+0x19e>
      hsd->State = HAL_SD_STATE_READY;
 8002f62:	2301      	movs	r3, #1
 8002f64:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 8002f68:	4620      	mov	r0, r4
 8002f6a:	f7ff fc13 	bl	8002794 <HAL_SD_ErrorCallback>
 8002f6e:	bd70      	pop	{r4, r5, r6, pc}
 8002f70:	08002d49 	.word	0x08002d49
 8002f74:	08002d8d 	.word	0x08002d8d

08002f78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f78:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8002f7a:	4604      	mov	r4, r0
 8002f7c:	2800      	cmp	r0, #0
 8002f7e:	d036      	beq.n	8002fee <HAL_SPI_Init+0x76>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f80:	2300      	movs	r3, #0
 8002f82:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8002f84:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002f88:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002f8c:	b91b      	cbnz	r3, 8002f96 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f8e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f92:	f004 fa0f 	bl	80073b4 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f96:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002f98:	68a0      	ldr	r0, [r4, #8]
 8002f9a:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002fa2:	680b      	ldr	r3, [r1, #0]
 8002fa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fa8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002faa:	6863      	ldr	r3, [r4, #4]
 8002fac:	4303      	orrs	r3, r0
 8002fae:	68e0      	ldr	r0, [r4, #12]
 8002fb0:	4303      	orrs	r3, r0
 8002fb2:	6920      	ldr	r0, [r4, #16]
 8002fb4:	4303      	orrs	r3, r0
 8002fb6:	6960      	ldr	r0, [r4, #20]
 8002fb8:	4303      	orrs	r3, r0
 8002fba:	69e0      	ldr	r0, [r4, #28]
 8002fbc:	4303      	orrs	r3, r0
 8002fbe:	6a20      	ldr	r0, [r4, #32]
 8002fc0:	4303      	orrs	r3, r0
 8002fc2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002fc4:	4303      	orrs	r3, r0
 8002fc6:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8002fca:	4303      	orrs	r3, r0
 8002fcc:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002fce:	0c12      	lsrs	r2, r2, #16
 8002fd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002fd2:	f002 0204 	and.w	r2, r2, #4
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fda:	69cb      	ldr	r3, [r1, #28]
 8002fdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fe0:	61cb      	str	r3, [r1, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fe2:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8002fe4:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fe6:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002fe8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8002fec:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002fee:	2001      	movs	r0, #1
}
 8002ff0:	bd10      	pop	{r4, pc}
	...

08002ff4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ff4:	6a03      	ldr	r3, [r0, #32]
 8002ff6:	f023 0301 	bic.w	r3, r3, #1
 8002ffa:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ffc:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002ffe:	6842      	ldr	r2, [r0, #4]
{
 8003000:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003002:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003004:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003006:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800300a:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800300c:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800300e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8003012:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003014:	4c0c      	ldr	r4, [pc, #48]	; (8003048 <TIM_OC1_SetConfig+0x54>)
 8003016:	42a0      	cmp	r0, r4
 8003018:	d009      	beq.n	800302e <TIM_OC1_SetConfig+0x3a>
 800301a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800301e:	42a0      	cmp	r0, r4
 8003020:	d005      	beq.n	800302e <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003022:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003024:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003026:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8003028:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800302a:	6203      	str	r3, [r0, #32]
} 
 800302c:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 800302e:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8003030:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8003032:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003036:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003038:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800303a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800303e:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8003040:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003044:	4322      	orrs	r2, r4
 8003046:	e7ec      	b.n	8003022 <TIM_OC1_SetConfig+0x2e>
 8003048:	40010000 	.word	0x40010000

0800304c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800304c:	6a03      	ldr	r3, [r0, #32]
 800304e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003052:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003054:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8003056:	6842      	ldr	r2, [r0, #4]
{
 8003058:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800305a:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800305c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800305e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003062:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003064:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8003066:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800306a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800306e:	4c0e      	ldr	r4, [pc, #56]	; (80030a8 <TIM_OC3_SetConfig+0x5c>)
 8003070:	42a0      	cmp	r0, r4
 8003072:	d009      	beq.n	8003088 <TIM_OC3_SetConfig+0x3c>
 8003074:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003078:	42a0      	cmp	r0, r4
 800307a:	d005      	beq.n	8003088 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800307c:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800307e:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003080:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8003082:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003084:	6203      	str	r3, [r0, #32]
}
 8003086:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003088:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800308a:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 800308c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003090:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003094:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003096:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800309a:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 800309c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030a0:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 80030a4:	e7ea      	b.n	800307c <TIM_OC3_SetConfig+0x30>
 80030a6:	bf00      	nop
 80030a8:	40010000 	.word	0x40010000

080030ac <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030ac:	6a03      	ldr	r3, [r0, #32]
 80030ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030b2:	6203      	str	r3, [r0, #32]
{
 80030b4:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030b6:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80030b8:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030ba:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030bc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030be:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030c2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030c6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80030c8:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030cc:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80030d0:	4d09      	ldr	r5, [pc, #36]	; (80030f8 <TIM_OC4_SetConfig+0x4c>)
 80030d2:	42a8      	cmp	r0, r5
 80030d4:	d009      	beq.n	80030ea <TIM_OC4_SetConfig+0x3e>
 80030d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80030da:	42a8      	cmp	r0, r5
 80030dc:	d005      	beq.n	80030ea <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030de:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030e0:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80030e2:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80030e4:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030e6:	6204      	str	r4, [r0, #32]
}
 80030e8:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030ea:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030f0:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80030f4:	e7f3      	b.n	80030de <TIM_OC4_SetConfig+0x32>
 80030f6:	bf00      	nop
 80030f8:	40010000 	.word	0x40010000

080030fc <TIM_SlaveTimer_SetConfig>:
  uint32_t tmpsmcr = 0U;
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

 /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030fc:	6803      	ldr	r3, [r0, #0]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80030fe:	6848      	ldr	r0, [r1, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003100:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003102:	f022 0270 	bic.w	r2, r2, #112	; 0x70
{
 8003106:	b530      	push	{r4, r5, lr}
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003108:	4302      	orrs	r2, r0

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800310a:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_SMS;
 800310c:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003110:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
  
  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003112:	2850      	cmp	r0, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 8003114:	609a      	str	r2, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 8003116:	d021      	beq.n	800315c <TIM_SlaveTimer_SetConfig+0x60>
 8003118:	d802      	bhi.n	8003120 <TIM_SlaveTimer_SetConfig+0x24>
 800311a:	2840      	cmp	r0, #64	; 0x40
 800311c:	d010      	beq.n	8003140 <TIM_SlaveTimer_SetConfig+0x44>
 800311e:	bd30      	pop	{r4, r5, pc}
 8003120:	2860      	cmp	r0, #96	; 0x60
 8003122:	d02d      	beq.n	8003180 <TIM_SlaveTimer_SetConfig+0x84>
 8003124:	2870      	cmp	r0, #112	; 0x70
 8003126:	d13d      	bne.n	80031a4 <TIM_SlaveTimer_SetConfig+0xa8>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003128:	68ca      	ldr	r2, [r1, #12]
 800312a:	688c      	ldr	r4, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 800312c:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800312e:	6909      	ldr	r1, [r1, #16]
 8003130:	4322      	orrs	r2, r4
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003132:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003136:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800313a:	4302      	orrs	r2, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800313c:	609a      	str	r2, [r3, #8]
 800313e:	bd30      	pop	{r4, r5, pc}
      tmpccer = htim->Instance->CCER;
 8003140:	6a18      	ldr	r0, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003142:	6a1a      	ldr	r2, [r3, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003144:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003146:	f022 0201 	bic.w	r2, r2, #1
 800314a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;    
 800314c:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800314e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003152:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8003156:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;                               
 8003158:	6218      	str	r0, [r3, #32]
    break;
 800315a:	bd30      	pop	{r4, r5, pc}
      TIM_TI1_ConfigInputStage(htim->Instance,
 800315c:	6888      	ldr	r0, [r1, #8]
 800315e:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 8003160:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003162:	6a1c      	ldr	r4, [r3, #32]
 8003164:	f024 0401 	bic.w	r4, r4, #1
 8003168:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800316a:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800316c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003170:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003174:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003178:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800317a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800317c:	6219      	str	r1, [r3, #32]
 800317e:	bd30      	pop	{r4, r5, pc}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003180:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003182:	688c      	ldr	r4, [r1, #8]
 8003184:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003186:	f020 0010 	bic.w	r0, r0, #16
 800318a:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800318c:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800318e:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003190:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003194:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003198:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800319c:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80031a0:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80031a2:	621a      	str	r2, [r3, #32]
 80031a4:	bd30      	pop	{r4, r5, pc}

080031a6 <HAL_TIM_OC_MspInit>:
 80031a6:	4770      	bx	lr

080031a8 <HAL_TIM_IC_MspInit>:
 80031a8:	4770      	bx	lr

080031aa <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80031aa:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80031ae:	2b01      	cmp	r3, #1
{
 80031b0:	b570      	push	{r4, r5, r6, lr}
 80031b2:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80031b6:	d01c      	beq.n	80031f2 <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 80031b8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 80031bc:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 80031be:	2201      	movs	r2, #1
 80031c0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 80031c4:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031c6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80031ca:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80031ce:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80031d0:	680a      	ldr	r2, [r1, #0]
 80031d2:	2a40      	cmp	r2, #64	; 0x40
 80031d4:	d079      	beq.n	80032ca <HAL_TIM_ConfigClockSource+0x120>
 80031d6:	d819      	bhi.n	800320c <HAL_TIM_ConfigClockSource+0x62>
 80031d8:	2a10      	cmp	r2, #16
 80031da:	f000 8093 	beq.w	8003304 <HAL_TIM_ConfigClockSource+0x15a>
 80031de:	d80a      	bhi.n	80031f6 <HAL_TIM_ConfigClockSource+0x4c>
 80031e0:	2a00      	cmp	r2, #0
 80031e2:	f000 8089 	beq.w	80032f8 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 80031e6:	2301      	movs	r3, #1
 80031e8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80031ec:	2300      	movs	r3, #0
 80031ee:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80031f2:	4618      	mov	r0, r3
}
 80031f4:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80031f6:	2a20      	cmp	r2, #32
 80031f8:	f000 808a 	beq.w	8003310 <HAL_TIM_ConfigClockSource+0x166>
 80031fc:	2a30      	cmp	r2, #48	; 0x30
 80031fe:	d1f2      	bne.n	80031e6 <HAL_TIM_ConfigClockSource+0x3c>
   tmpsmcr = TIMx->SMCR;
 8003200:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003202:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003206:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 800320a:	e036      	b.n	800327a <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800320c:	2a70      	cmp	r2, #112	; 0x70
 800320e:	d036      	beq.n	800327e <HAL_TIM_ConfigClockSource+0xd4>
 8003210:	d81b      	bhi.n	800324a <HAL_TIM_ConfigClockSource+0xa0>
 8003212:	2a50      	cmp	r2, #80	; 0x50
 8003214:	d042      	beq.n	800329c <HAL_TIM_ConfigClockSource+0xf2>
 8003216:	2a60      	cmp	r2, #96	; 0x60
 8003218:	d1e5      	bne.n	80031e6 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800321a:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 800321c:	684d      	ldr	r5, [r1, #4]
 800321e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003220:	f024 0410 	bic.w	r4, r4, #16
 8003224:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003226:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8003228:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800322a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800322e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003232:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003236:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800323a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800323c:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800323e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003240:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003244:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8003248:	e017      	b.n	800327a <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800324a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800324e:	d011      	beq.n	8003274 <HAL_TIM_ConfigClockSource+0xca>
 8003250:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003254:	d1c7      	bne.n	80031e6 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003256:	688a      	ldr	r2, [r1, #8]
 8003258:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800325a:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800325c:	68c9      	ldr	r1, [r1, #12]
 800325e:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003260:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003264:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003268:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 800326a:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003272:	e002      	b.n	800327a <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 800327a:	609a      	str	r2, [r3, #8]
 800327c:	e7b3      	b.n	80031e6 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800327e:	688a      	ldr	r2, [r1, #8]
 8003280:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003282:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003284:	68c9      	ldr	r1, [r1, #12]
 8003286:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003288:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800328c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003290:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8003292:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003294:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003296:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 800329a:	e7ee      	b.n	800327a <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800329c:	684c      	ldr	r4, [r1, #4]
 800329e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80032a0:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032a2:	6a1d      	ldr	r5, [r3, #32]
 80032a4:	f025 0501 	bic.w	r5, r5, #1
 80032a8:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80032aa:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032ac:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032b0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032b4:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80032b8:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80032ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032bc:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80032be:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80032c0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80032c4:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 80032c8:	e7d7      	b.n	800327a <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80032ca:	684c      	ldr	r4, [r1, #4]
 80032cc:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80032ce:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032d0:	6a1d      	ldr	r5, [r3, #32]
 80032d2:	f025 0501 	bic.w	r5, r5, #1
 80032d6:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80032d8:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032da:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032de:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032e2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80032e6:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80032e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032ea:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80032ec:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80032ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80032f2:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80032f6:	e7c0      	b.n	800327a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80032f8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80032fa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80032fe:	f042 0207 	orr.w	r2, r2, #7
 8003302:	e7ba      	b.n	800327a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8003304:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003306:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800330a:	f042 0217 	orr.w	r2, r2, #23
 800330e:	e7b4      	b.n	800327a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8003310:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003312:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003316:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800331a:	e7ae      	b.n	800327a <HAL_TIM_ConfigClockSource+0xd0>

0800331c <HAL_TIM_SlaveConfigSynchronization>:
{
 800331c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800331e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003322:	2b01      	cmp	r3, #1
{
 8003324:	4604      	mov	r4, r0
 8003326:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800332a:	d015      	beq.n	8003358 <HAL_TIM_SlaveConfigSynchronization+0x3c>
 800332c:	2501      	movs	r5, #1
 800332e:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8003332:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 8003336:	f7ff fee1 	bl	80030fc <TIM_SlaveTimer_SetConfig>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800333a:	6823      	ldr	r3, [r4, #0]
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003342:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003344:	68da      	ldr	r2, [r3, #12]
  __HAL_UNLOCK(htim);  
 8003346:	2000      	movs	r0, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003348:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800334c:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800334e:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);  
 8003352:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 8003356:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8003358:	4618      	mov	r0, r3
} 
 800335a:	bd38      	pop	{r3, r4, r5, pc}

0800335c <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800335c:	4a2e      	ldr	r2, [pc, #184]	; (8003418 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 800335e:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003360:	4290      	cmp	r0, r2
 8003362:	d012      	beq.n	800338a <TIM_Base_SetConfig+0x2e>
 8003364:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003368:	d00f      	beq.n	800338a <TIM_Base_SetConfig+0x2e>
 800336a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800336e:	4290      	cmp	r0, r2
 8003370:	d00b      	beq.n	800338a <TIM_Base_SetConfig+0x2e>
 8003372:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003376:	4290      	cmp	r0, r2
 8003378:	d007      	beq.n	800338a <TIM_Base_SetConfig+0x2e>
 800337a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800337e:	4290      	cmp	r0, r2
 8003380:	d003      	beq.n	800338a <TIM_Base_SetConfig+0x2e>
 8003382:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003386:	4290      	cmp	r0, r2
 8003388:	d11d      	bne.n	80033c6 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 800338a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800338c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003390:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003392:	4a21      	ldr	r2, [pc, #132]	; (8003418 <TIM_Base_SetConfig+0xbc>)
 8003394:	4290      	cmp	r0, r2
 8003396:	d104      	bne.n	80033a2 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003398:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800339a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800339e:	4313      	orrs	r3, r2
 80033a0:	e028      	b.n	80033f4 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80033a2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80033a6:	d0f7      	beq.n	8003398 <TIM_Base_SetConfig+0x3c>
 80033a8:	4a1c      	ldr	r2, [pc, #112]	; (800341c <TIM_Base_SetConfig+0xc0>)
 80033aa:	4290      	cmp	r0, r2
 80033ac:	d0f4      	beq.n	8003398 <TIM_Base_SetConfig+0x3c>
 80033ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033b2:	4290      	cmp	r0, r2
 80033b4:	d0f0      	beq.n	8003398 <TIM_Base_SetConfig+0x3c>
 80033b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033ba:	4290      	cmp	r0, r2
 80033bc:	d0ec      	beq.n	8003398 <TIM_Base_SetConfig+0x3c>
 80033be:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80033c2:	4290      	cmp	r0, r2
 80033c4:	d0e8      	beq.n	8003398 <TIM_Base_SetConfig+0x3c>
 80033c6:	4a16      	ldr	r2, [pc, #88]	; (8003420 <TIM_Base_SetConfig+0xc4>)
 80033c8:	4290      	cmp	r0, r2
 80033ca:	d0e5      	beq.n	8003398 <TIM_Base_SetConfig+0x3c>
 80033cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033d0:	4290      	cmp	r0, r2
 80033d2:	d0e1      	beq.n	8003398 <TIM_Base_SetConfig+0x3c>
 80033d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033d8:	4290      	cmp	r0, r2
 80033da:	d0dd      	beq.n	8003398 <TIM_Base_SetConfig+0x3c>
 80033dc:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80033e0:	4290      	cmp	r0, r2
 80033e2:	d0d9      	beq.n	8003398 <TIM_Base_SetConfig+0x3c>
 80033e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033e8:	4290      	cmp	r0, r2
 80033ea:	d0d5      	beq.n	8003398 <TIM_Base_SetConfig+0x3c>
 80033ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033f0:	4290      	cmp	r0, r2
 80033f2:	d0d1      	beq.n	8003398 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 80033f4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033f6:	688b      	ldr	r3, [r1, #8]
 80033f8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80033fa:	680b      	ldr	r3, [r1, #0]
 80033fc:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80033fe:	4b06      	ldr	r3, [pc, #24]	; (8003418 <TIM_Base_SetConfig+0xbc>)
 8003400:	4298      	cmp	r0, r3
 8003402:	d006      	beq.n	8003412 <TIM_Base_SetConfig+0xb6>
 8003404:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003408:	4298      	cmp	r0, r3
 800340a:	d002      	beq.n	8003412 <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 800340c:	2301      	movs	r3, #1
 800340e:	6143      	str	r3, [r0, #20]
}
 8003410:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8003412:	690b      	ldr	r3, [r1, #16]
 8003414:	6303      	str	r3, [r0, #48]	; 0x30
 8003416:	e7f9      	b.n	800340c <TIM_Base_SetConfig+0xb0>
 8003418:	40010000 	.word	0x40010000
 800341c:	40000400 	.word	0x40000400
 8003420:	40014000 	.word	0x40014000

08003424 <HAL_TIM_Base_Init>:
{ 
 8003424:	b510      	push	{r4, lr}
  if(htim == NULL)
 8003426:	4604      	mov	r4, r0
 8003428:	b1a0      	cbz	r0, 8003454 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800342a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800342e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003432:	b91b      	cbnz	r3, 800343c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003434:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8003438:	f004 fd4c 	bl	8007ed4 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800343c:	2302      	movs	r3, #2
 800343e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003442:	6820      	ldr	r0, [r4, #0]
 8003444:	1d21      	adds	r1, r4, #4
 8003446:	f7ff ff89 	bl	800335c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800344a:	2301      	movs	r3, #1
 800344c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8003450:	2000      	movs	r0, #0
 8003452:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003454:	2001      	movs	r0, #1
}
 8003456:	bd10      	pop	{r4, pc}

08003458 <HAL_TIM_OC_Init>:
{
 8003458:	b510      	push	{r4, lr}
  if(htim == NULL)
 800345a:	4604      	mov	r4, r0
 800345c:	b1a0      	cbz	r0, 8003488 <HAL_TIM_OC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800345e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003462:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003466:	b91b      	cbnz	r3, 8003470 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003468:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_OC_MspInit(htim);
 800346c:	f7ff fe9b 	bl	80031a6 <HAL_TIM_OC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8003470:	2302      	movs	r3, #2
 8003472:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 8003476:	6820      	ldr	r0, [r4, #0]
 8003478:	1d21      	adds	r1, r4, #4
 800347a:	f7ff ff6f 	bl	800335c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800347e:	2301      	movs	r3, #1
 8003480:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8003484:	2000      	movs	r0, #0
 8003486:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003488:	2001      	movs	r0, #1
}
 800348a:	bd10      	pop	{r4, pc}

0800348c <HAL_TIM_IC_Init>:
{
 800348c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800348e:	4604      	mov	r4, r0
 8003490:	b1a0      	cbz	r0, 80034bc <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8003492:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003496:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800349a:	b91b      	cbnz	r3, 80034a4 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800349c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_IC_MspInit(htim);
 80034a0:	f7ff fe82 	bl	80031a8 <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;   
 80034a4:	2302      	movs	r3, #2
 80034a6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80034aa:	6820      	ldr	r0, [r4, #0]
 80034ac:	1d21      	adds	r1, r4, #4
 80034ae:	f7ff ff55 	bl	800335c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80034b2:	2301      	movs	r3, #1
 80034b4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80034b8:	2000      	movs	r0, #0
 80034ba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80034bc:	2001      	movs	r0, #1
}
 80034be:	bd10      	pop	{r4, pc}

080034c0 <TIM_TI1_SetConfig>:
{
 80034c0:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034c2:	6a04      	ldr	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80034c4:	4e1a      	ldr	r6, [pc, #104]	; (8003530 <TIM_TI1_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034c6:	f024 0401 	bic.w	r4, r4, #1
 80034ca:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034cc:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80034ce:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80034d0:	42b0      	cmp	r0, r6
 80034d2:	f024 0403 	bic.w	r4, r4, #3
 80034d6:	d01a      	beq.n	800350e <TIM_TI1_SetConfig+0x4e>
 80034d8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80034dc:	d017      	beq.n	800350e <TIM_TI1_SetConfig+0x4e>
 80034de:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 80034e2:	42b0      	cmp	r0, r6
 80034e4:	d013      	beq.n	800350e <TIM_TI1_SetConfig+0x4e>
 80034e6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80034ea:	42b0      	cmp	r0, r6
 80034ec:	d00f      	beq.n	800350e <TIM_TI1_SetConfig+0x4e>
 80034ee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80034f2:	42b0      	cmp	r0, r6
 80034f4:	d00b      	beq.n	800350e <TIM_TI1_SetConfig+0x4e>
 80034f6:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 80034fa:	42b0      	cmp	r0, r6
 80034fc:	d007      	beq.n	800350e <TIM_TI1_SetConfig+0x4e>
 80034fe:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8003502:	42b0      	cmp	r0, r6
 8003504:	d003      	beq.n	800350e <TIM_TI1_SetConfig+0x4e>
 8003506:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800350a:	42b0      	cmp	r0, r6
 800350c:	d10d      	bne.n	800352a <TIM_TI1_SetConfig+0x6a>
    tmpccmr1 |= TIM_ICSelection;
 800350e:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003510:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003512:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003516:	b2db      	uxtb	r3, r3
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003518:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800351c:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003520:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003522:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8003524:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003526:	6201      	str	r1, [r0, #32]
}
 8003528:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800352a:	f044 0201 	orr.w	r2, r4, #1
 800352e:	e7ef      	b.n	8003510 <TIM_TI1_SetConfig+0x50>
 8003530:	40010000 	.word	0x40010000

08003534 <HAL_TIM_IC_ConfigChannel>:
{
 8003534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8003536:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800353a:	2b01      	cmp	r3, #1
{
 800353c:	4604      	mov	r4, r0
 800353e:	460d      	mov	r5, r1
 8003540:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8003544:	d019      	beq.n	800357a <HAL_TIM_IC_ConfigChannel+0x46>
 8003546:	2301      	movs	r3, #1
 8003548:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 800354c:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  if (Channel == TIM_CHANNEL_1)
 8003550:	b9a2      	cbnz	r2, 800357c <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 8003552:	68cb      	ldr	r3, [r1, #12]
 8003554:	6820      	ldr	r0, [r4, #0]
 8003556:	c906      	ldmia	r1, {r1, r2}
 8003558:	f7ff ffb2 	bl	80034c0 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800355c:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800355e:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003560:	699a      	ldr	r2, [r3, #24]
 8003562:	f022 020c 	bic.w	r2, r2, #12
 8003566:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003568:	699a      	ldr	r2, [r3, #24]
 800356a:	430a      	orrs	r2, r1
 800356c:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800356e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003570:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003572:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8003576:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 800357a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 800357c:	2a04      	cmp	r2, #4
 800357e:	688e      	ldr	r6, [r1, #8]
 8003580:	6823      	ldr	r3, [r4, #0]
 8003582:	68e8      	ldr	r0, [r5, #12]
 8003584:	c982      	ldmia	r1, {r1, r7}
 8003586:	d11f      	bne.n	80035c8 <HAL_TIM_IC_ConfigChannel+0x94>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003588:	6a1a      	ldr	r2, [r3, #32]
 800358a:	f022 0210 	bic.w	r2, r2, #16
 800358e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003590:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 8003592:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003594:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003598:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800359c:	0300      	lsls	r0, r0, #12
 800359e:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035a0:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80035a4:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80035a6:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80035a8:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035ac:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80035b0:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 80035b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035b4:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80035b6:	699a      	ldr	r2, [r3, #24]
 80035b8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80035bc:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80035be:	699a      	ldr	r2, [r3, #24]
 80035c0:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 80035c4:	619e      	str	r6, [r3, #24]
 80035c6:	e7d2      	b.n	800356e <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 80035c8:	2a08      	cmp	r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035ca:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 80035cc:	d11c      	bne.n	8003608 <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035d2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80035d4:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 80035d6:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80035d8:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr2 |= TIM_ICSelection;
 80035dc:	433a      	orrs	r2, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80035de:	0100      	lsls	r0, r0, #4
 80035e0:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80035e2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80035e6:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80035e8:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80035ea:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80035ee:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80035f2:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 80035f4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80035f6:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80035f8:	69da      	ldr	r2, [r3, #28]
 80035fa:	f022 020c 	bic.w	r2, r2, #12
 80035fe:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003600:	69da      	ldr	r2, [r3, #28]
 8003602:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003604:	61de      	str	r6, [r3, #28]
 8003606:	e7b2      	b.n	800356e <HAL_TIM_IC_ConfigChannel+0x3a>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003608:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800360c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800360e:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8003610:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003612:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003616:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800361a:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800361c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003620:	b280      	uxth	r0, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003622:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003624:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003626:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800362a:	f425 4220 	bic.w	r2, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800362e:	4311      	orrs	r1, r2
  TIMx->CCMR2 = tmpccmr2;
 8003630:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003632:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003634:	69da      	ldr	r2, [r3, #28]
 8003636:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800363a:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800363c:	69da      	ldr	r2, [r3, #28]
 800363e:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8003642:	e7df      	b.n	8003604 <HAL_TIM_IC_ConfigChannel+0xd0>

08003644 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003644:	6a03      	ldr	r3, [r0, #32]
 8003646:	f023 0310 	bic.w	r3, r3, #16
 800364a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800364c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 800364e:	6842      	ldr	r2, [r0, #4]
{
 8003650:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 8003652:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003654:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003656:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800365a:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800365e:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8003660:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003664:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003668:	4c0d      	ldr	r4, [pc, #52]	; (80036a0 <TIM_OC2_SetConfig+0x5c>)
 800366a:	42a0      	cmp	r0, r4
 800366c:	d009      	beq.n	8003682 <TIM_OC2_SetConfig+0x3e>
 800366e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003672:	42a0      	cmp	r0, r4
 8003674:	d005      	beq.n	8003682 <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 8003676:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8003678:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800367a:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800367c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800367e:	6203      	str	r3, [r0, #32]
}
 8003680:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003682:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003684:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003686:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800368a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800368e:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003690:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003694:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8003696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800369a:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 800369e:	e7ea      	b.n	8003676 <TIM_OC2_SetConfig+0x32>
 80036a0:	40010000 	.word	0x40010000

080036a4 <HAL_TIM_OC_ConfigChannel>:
{
 80036a4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim); 
 80036a6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80036aa:	2b01      	cmp	r3, #1
{
 80036ac:	4604      	mov	r4, r0
 80036ae:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim); 
 80036b2:	d018      	beq.n	80036e6 <HAL_TIM_OC_ConfigChannel+0x42>
 80036b4:	2301      	movs	r3, #1
 80036b6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 80036ba:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 80036be:	461d      	mov	r5, r3
  switch (Channel)
 80036c0:	2a0c      	cmp	r2, #12
 80036c2:	d80b      	bhi.n	80036dc <HAL_TIM_OC_ConfigChannel+0x38>
 80036c4:	e8df f002 	tbb	[pc, r2]
 80036c8:	0a0a0a07 	.word	0x0a0a0a07
 80036cc:	0a0a0a10 	.word	0x0a0a0a10
 80036d0:	0a0a0a14 	.word	0x0a0a0a14
 80036d4:	18          	.byte	0x18
 80036d5:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036d6:	6820      	ldr	r0, [r4, #0]
 80036d8:	f7ff fc8c 	bl	8002ff4 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim); 
 80036dc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80036de:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim); 
 80036e2:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 80036e6:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036e8:	6820      	ldr	r0, [r4, #0]
 80036ea:	f7ff ffab 	bl	8003644 <TIM_OC2_SetConfig>
    break;
 80036ee:	e7f5      	b.n	80036dc <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036f0:	6820      	ldr	r0, [r4, #0]
 80036f2:	f7ff fcab 	bl	800304c <TIM_OC3_SetConfig>
    break;
 80036f6:	e7f1      	b.n	80036dc <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036f8:	6820      	ldr	r0, [r4, #0]
 80036fa:	f7ff fcd7 	bl	80030ac <TIM_OC4_SetConfig>
    break;
 80036fe:	e7ed      	b.n	80036dc <HAL_TIM_OC_ConfigChannel+0x38>

08003700 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8003700:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003704:	2b01      	cmp	r3, #1
{
 8003706:	b510      	push	{r4, lr}
 8003708:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800370c:	d018      	beq.n	8003740 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 800370e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003712:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8003714:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003716:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003718:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800371a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800371e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	4322      	orrs	r2, r4
 8003724:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800372c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	430a      	orrs	r2, r1
 8003732:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8003734:	2301      	movs	r3, #1
 8003736:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800373a:	2300      	movs	r3, #0
 800373c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8003740:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8003742:	bd10      	pop	{r4, pc}

08003744 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8003744:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003748:	2b01      	cmp	r3, #1
 800374a:	d01f      	beq.n	800378c <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800374c:	68cb      	ldr	r3, [r1, #12]
 800374e:	688a      	ldr	r2, [r1, #8]
 8003750:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003754:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003756:	684a      	ldr	r2, [r1, #4]
 8003758:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800375c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800375e:	680a      	ldr	r2, [r1, #0]
 8003760:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003764:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003766:	690a      	ldr	r2, [r1, #16]
 8003768:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800376c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800376e:	694a      	ldr	r2, [r1, #20]
 8003770:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003774:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003776:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003778:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800377c:	4313      	orrs	r3, r2
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800377e:	6802      	ldr	r2, [r0, #0]
 8003780:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 8003782:	2300      	movs	r3, #0
 8003784:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8003788:	4618      	mov	r0, r3
 800378a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800378c:	2002      	movs	r0, #2
}
 800378e:	4770      	bx	lr

08003790 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8003794:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8003796:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8003798:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800379a:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800379c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80037a0:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80037a2:	6133      	str	r3, [r6, #16]
{
 80037a4:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037a6:	6883      	ldr	r3, [r0, #8]
 80037a8:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 80037aa:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037ac:	4303      	orrs	r3, r0
 80037ae:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80037b0:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037b4:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80037b6:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037ba:	430b      	orrs	r3, r1
 80037bc:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80037be:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80037c0:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80037c2:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80037c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 80037c8:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037ca:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80037ce:	6173      	str	r3, [r6, #20]
 80037d0:	4b7a      	ldr	r3, [pc, #488]	; (80039bc <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037d2:	d17c      	bne.n	80038ce <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80037d4:	429e      	cmp	r6, r3
 80037d6:	d003      	beq.n	80037e0 <UART_SetConfig+0x50>
 80037d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037dc:	429e      	cmp	r6, r3
 80037de:	d144      	bne.n	800386a <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80037e0:	f7fe fa6c 	bl	8001cbc <HAL_RCC_GetPCLK2Freq>
 80037e4:	2519      	movs	r5, #25
 80037e6:	fb05 f300 	mul.w	r3, r5, r0
 80037ea:	6860      	ldr	r0, [r4, #4]
 80037ec:	f04f 0964 	mov.w	r9, #100	; 0x64
 80037f0:	0040      	lsls	r0, r0, #1
 80037f2:	fbb3 f3f0 	udiv	r3, r3, r0
 80037f6:	fbb3 f3f9 	udiv	r3, r3, r9
 80037fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80037fe:	f7fe fa5d 	bl	8001cbc <HAL_RCC_GetPCLK2Freq>
 8003802:	6863      	ldr	r3, [r4, #4]
 8003804:	4368      	muls	r0, r5
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	fbb0 f7f3 	udiv	r7, r0, r3
 800380c:	f7fe fa56 	bl	8001cbc <HAL_RCC_GetPCLK2Freq>
 8003810:	6863      	ldr	r3, [r4, #4]
 8003812:	4368      	muls	r0, r5
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	fbb0 f3f3 	udiv	r3, r0, r3
 800381a:	fbb3 f3f9 	udiv	r3, r3, r9
 800381e:	fb09 7313 	mls	r3, r9, r3, r7
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	3332      	adds	r3, #50	; 0x32
 8003826:	fbb3 f3f9 	udiv	r3, r3, r9
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8003830:	f7fe fa44 	bl	8001cbc <HAL_RCC_GetPCLK2Freq>
 8003834:	6862      	ldr	r2, [r4, #4]
 8003836:	4368      	muls	r0, r5
 8003838:	0052      	lsls	r2, r2, #1
 800383a:	fbb0 faf2 	udiv	sl, r0, r2
 800383e:	f7fe fa3d 	bl	8001cbc <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003842:	6863      	ldr	r3, [r4, #4]
 8003844:	4368      	muls	r0, r5
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	fbb0 f3f3 	udiv	r3, r0, r3
 800384c:	fbb3 f3f9 	udiv	r3, r3, r9
 8003850:	fb09 a313 	mls	r3, r9, r3, sl
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	3332      	adds	r3, #50	; 0x32
 8003858:	fbb3 f3f9 	udiv	r3, r3, r9
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003862:	443b      	add	r3, r7
 8003864:	60b3      	str	r3, [r6, #8]
 8003866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800386a:	f7fe fa17 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
 800386e:	2519      	movs	r5, #25
 8003870:	fb05 f300 	mul.w	r3, r5, r0
 8003874:	6860      	ldr	r0, [r4, #4]
 8003876:	f04f 0964 	mov.w	r9, #100	; 0x64
 800387a:	0040      	lsls	r0, r0, #1
 800387c:	fbb3 f3f0 	udiv	r3, r3, r0
 8003880:	fbb3 f3f9 	udiv	r3, r3, r9
 8003884:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003888:	f7fe fa08 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
 800388c:	6863      	ldr	r3, [r4, #4]
 800388e:	4368      	muls	r0, r5
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	fbb0 f7f3 	udiv	r7, r0, r3
 8003896:	f7fe fa01 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
 800389a:	6863      	ldr	r3, [r4, #4]
 800389c:	4368      	muls	r0, r5
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80038a4:	fbb3 f3f9 	udiv	r3, r3, r9
 80038a8:	fb09 7313 	mls	r3, r9, r3, r7
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	3332      	adds	r3, #50	; 0x32
 80038b0:	fbb3 f3f9 	udiv	r3, r3, r9
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80038ba:	f7fe f9ef 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
 80038be:	6862      	ldr	r2, [r4, #4]
 80038c0:	4368      	muls	r0, r5
 80038c2:	0052      	lsls	r2, r2, #1
 80038c4:	fbb0 faf2 	udiv	sl, r0, r2
 80038c8:	f7fe f9e8 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
 80038cc:	e7b9      	b.n	8003842 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80038ce:	429e      	cmp	r6, r3
 80038d0:	d002      	beq.n	80038d8 <UART_SetConfig+0x148>
 80038d2:	4b3b      	ldr	r3, [pc, #236]	; (80039c0 <UART_SetConfig+0x230>)
 80038d4:	429e      	cmp	r6, r3
 80038d6:	d140      	bne.n	800395a <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80038d8:	f7fe f9f0 	bl	8001cbc <HAL_RCC_GetPCLK2Freq>
 80038dc:	6867      	ldr	r7, [r4, #4]
 80038de:	2519      	movs	r5, #25
 80038e0:	f04f 0964 	mov.w	r9, #100	; 0x64
 80038e4:	fb05 f300 	mul.w	r3, r5, r0
 80038e8:	00bf      	lsls	r7, r7, #2
 80038ea:	fbb3 f3f7 	udiv	r3, r3, r7
 80038ee:	fbb3 f3f9 	udiv	r3, r3, r9
 80038f2:	011f      	lsls	r7, r3, #4
 80038f4:	f7fe f9e2 	bl	8001cbc <HAL_RCC_GetPCLK2Freq>
 80038f8:	6863      	ldr	r3, [r4, #4]
 80038fa:	4368      	muls	r0, r5
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	fbb0 f8f3 	udiv	r8, r0, r3
 8003902:	f7fe f9db 	bl	8001cbc <HAL_RCC_GetPCLK2Freq>
 8003906:	6863      	ldr	r3, [r4, #4]
 8003908:	4368      	muls	r0, r5
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003910:	fbb3 f3f9 	udiv	r3, r3, r9
 8003914:	fb09 8313 	mls	r3, r9, r3, r8
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	3332      	adds	r3, #50	; 0x32
 800391c:	fbb3 f3f9 	udiv	r3, r3, r9
 8003920:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8003924:	f7fe f9ca 	bl	8001cbc <HAL_RCC_GetPCLK2Freq>
 8003928:	6862      	ldr	r2, [r4, #4]
 800392a:	4368      	muls	r0, r5
 800392c:	0092      	lsls	r2, r2, #2
 800392e:	fbb0 faf2 	udiv	sl, r0, r2
 8003932:	f7fe f9c3 	bl	8001cbc <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003936:	6863      	ldr	r3, [r4, #4]
 8003938:	4368      	muls	r0, r5
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003940:	fbb3 f3f9 	udiv	r3, r3, r9
 8003944:	fb09 a313 	mls	r3, r9, r3, sl
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	3332      	adds	r3, #50	; 0x32
 800394c:	fbb3 f3f9 	udiv	r3, r3, r9
 8003950:	f003 030f 	and.w	r3, r3, #15
 8003954:	ea43 0308 	orr.w	r3, r3, r8
 8003958:	e783      	b.n	8003862 <UART_SetConfig+0xd2>
 800395a:	f7fe f99f 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
 800395e:	6867      	ldr	r7, [r4, #4]
 8003960:	2519      	movs	r5, #25
 8003962:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003966:	fb05 f300 	mul.w	r3, r5, r0
 800396a:	00bf      	lsls	r7, r7, #2
 800396c:	fbb3 f3f7 	udiv	r3, r3, r7
 8003970:	fbb3 f3f9 	udiv	r3, r3, r9
 8003974:	011f      	lsls	r7, r3, #4
 8003976:	f7fe f991 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
 800397a:	6863      	ldr	r3, [r4, #4]
 800397c:	4368      	muls	r0, r5
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	fbb0 f8f3 	udiv	r8, r0, r3
 8003984:	f7fe f98a 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
 8003988:	6863      	ldr	r3, [r4, #4]
 800398a:	4368      	muls	r0, r5
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003992:	fbb3 f3f9 	udiv	r3, r3, r9
 8003996:	fb09 8313 	mls	r3, r9, r3, r8
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	3332      	adds	r3, #50	; 0x32
 800399e:	fbb3 f3f9 	udiv	r3, r3, r9
 80039a2:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80039a6:	f7fe f979 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
 80039aa:	6862      	ldr	r2, [r4, #4]
 80039ac:	4368      	muls	r0, r5
 80039ae:	0092      	lsls	r2, r2, #2
 80039b0:	fbb0 faf2 	udiv	sl, r0, r2
 80039b4:	f7fe f972 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
 80039b8:	e7bd      	b.n	8003936 <UART_SetConfig+0x1a6>
 80039ba:	bf00      	nop
 80039bc:	40011000 	.word	0x40011000
 80039c0:	40011400 	.word	0x40011400

080039c4 <HAL_UART_Init>:
{
 80039c4:	b510      	push	{r4, lr}
  if(huart == NULL)
 80039c6:	4604      	mov	r4, r0
 80039c8:	b340      	cbz	r0, 8003a1c <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80039ca:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80039ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80039d2:	b91b      	cbnz	r3, 80039dc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80039d4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80039d8:	f004 fd40 	bl	800845c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80039dc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80039de:	2324      	movs	r3, #36	; 0x24
 80039e0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80039e4:	68d3      	ldr	r3, [r2, #12]
 80039e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039ea:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80039ec:	4620      	mov	r0, r4
 80039ee:	f7ff fecf 	bl	8003790 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039f2:	6823      	ldr	r3, [r4, #0]
 80039f4:	691a      	ldr	r2, [r3, #16]
 80039f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039fa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039fc:	695a      	ldr	r2, [r3, #20]
 80039fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a02:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003a04:	68da      	ldr	r2, [r3, #12]
 8003a06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a0a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a0c:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8003a0e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a10:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8003a12:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8003a16:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8003a1a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003a1c:	2001      	movs	r0, #1
}
 8003a1e:	bd10      	pop	{r4, pc}

08003a20 <LL_ADC_CommonInit>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8003a20:	4b0e      	ldr	r3, [pc, #56]	; (8003a5c <LL_ADC_CommonInit+0x3c>)
 8003a22:	4a0f      	ldr	r2, [pc, #60]	; (8003a60 <LL_ADC_CommonInit+0x40>)
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8003a24:	b530      	push	{r4, r5, lr}
 8003a26:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003a2a:	f853 4cf8 	ldr.w	r4, [r3, #-248]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	6892      	ldr	r2, [r2, #8]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8003a32:	4323      	orrs	r3, r4
 8003a34:	4313      	orrs	r3, r2
 8003a36:	07db      	lsls	r3, r3, #31
 8003a38:	d40e      	bmi.n	8003a58 <LL_ADC_CommonInit+0x38>
 8003a3a:	4c0a      	ldr	r4, [pc, #40]	; (8003a64 <LL_ADC_CommonInit+0x44>)
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8003a3c:	6843      	ldr	r3, [r0, #4]
  if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8003a3e:	684d      	ldr	r5, [r1, #4]
 8003a40:	680a      	ldr	r2, [r1, #0]
      MODIFY_REG(ADCxy_COMMON->CCR,
 8003a42:	4023      	ands	r3, r4
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8003a44:	b125      	cbz	r5, 8003a50 <LL_ADC_CommonInit+0x30>
      MODIFY_REG(ADCxy_COMMON->CCR,
 8003a46:	432b      	orrs	r3, r5
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	688a      	ldr	r2, [r1, #8]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	68ca      	ldr	r2, [r1, #12]
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8003a50:	4313      	orrs	r3, r2
 8003a52:	6043      	str	r3, [r0, #4]
  ErrorStatus status = SUCCESS;
 8003a54:	2001      	movs	r0, #1
 8003a56:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8003a58:	2000      	movs	r0, #0
  }
  
  return status;
}
 8003a5a:	bd30      	pop	{r4, r5, pc}
 8003a5c:	40012000 	.word	0x40012000
 8003a60:	40012200 	.word	0x40012200
 8003a64:	fffc10e0 	.word	0xfffc10e0

08003a68 <LL_ADC_Init>:
 8003a68:	6883      	ldr	r3, [r0, #8]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8003a6a:	07db      	lsls	r3, r3, #31
{
 8003a6c:	b510      	push	{r4, lr}
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8003a6e:	d411      	bmi.n	8003a94 <LL_ADC_Init+0x2c>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8003a70:	6842      	ldr	r2, [r0, #4]
 8003a72:	680b      	ldr	r3, [r1, #0]
 8003a74:	688c      	ldr	r4, [r1, #8]
 8003a76:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a7a:	4323      	orrs	r3, r4
 8003a7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a80:	4313      	orrs	r3, r2
 8003a82:	6043      	str	r3, [r0, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8003a84:	6883      	ldr	r3, [r0, #8]
 8003a86:	684a      	ldr	r2, [r1, #4]
 8003a88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	6083      	str	r3, [r0, #8]
  ErrorStatus status = SUCCESS;
 8003a90:	2001      	movs	r0, #1
 8003a92:	bd10      	pop	{r4, pc}

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003a94:	2000      	movs	r0, #0
  }
  return status;
}
 8003a96:	bd10      	pop	{r4, pc}

08003a98 <LL_ADC_REG_Init>:
 8003a98:	6883      	ldr	r3, [r0, #8]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8003a9a:	07db      	lsls	r3, r3, #31
{
 8003a9c:	b510      	push	{r4, lr}
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8003a9e:	d41b      	bmi.n	8003ad8 <LL_ADC_REG_Init+0x40>
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
    {
      MODIFY_REG(ADCx->CR1,
 8003aa0:	6843      	ldr	r3, [r0, #4]
  if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8003aa2:	684a      	ldr	r2, [r1, #4]
      MODIFY_REG(ADCx->CR1,
 8003aa4:	f423 4368 	bic.w	r3, r3, #59392	; 0xe800
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8003aa8:	b112      	cbz	r2, 8003ab0 <LL_ADC_REG_Init+0x18>
      MODIFY_REG(ADCx->CR1,
 8003aaa:	688c      	ldr	r4, [r1, #8]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	4323      	orrs	r3, r4
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8003ab0:	6043      	str	r3, [r0, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8003ab2:	6884      	ldr	r4, [r0, #8]
 8003ab4:	4b09      	ldr	r3, [pc, #36]	; (8003adc <LL_ADC_REG_Init+0x44>)
 8003ab6:	4023      	ands	r3, r4
 8003ab8:	68cc      	ldr	r4, [r1, #12]
 8003aba:	4323      	orrs	r3, r4
 8003abc:	690c      	ldr	r4, [r1, #16]
 8003abe:	6809      	ldr	r1, [r1, #0]
 8003ac0:	4323      	orrs	r3, r4
 8003ac2:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8003ac6:	430b      	orrs	r3, r1
 8003ac8:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003aca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003acc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	62c3      	str	r3, [r0, #44]	; 0x2c
  ErrorStatus status = SUCCESS;
 8003ad4:	2001      	movs	r0, #1
 8003ad6:	bd10      	pop	{r4, pc}
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003ad8:	2000      	movs	r0, #0
  }
  return status;
}
 8003ada:	bd10      	pop	{r4, pc}
 8003adc:	c0fffcfd 	.word	0xc0fffcfd

08003ae0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003ae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003ae4:	680a      	ldr	r2, [r1, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae6:	fa92 f4a2 	rbit	r4, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003aea:	f04f 0e01 	mov.w	lr, #1
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003aee:	fab4 f484 	clz	r4, r4
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003af2:	2503      	movs	r5, #3
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003af4:	270f      	movs	r7, #15
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003af6:	fa32 f304 	lsrs.w	r3, r2, r4
 8003afa:	d10d      	bne.n	8003b18 <LL_GPIO_Init+0x38>
      }
    }
    pinpos++;
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003afc:	684b      	ldr	r3, [r1, #4]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d806      	bhi.n	8003b12 <LL_GPIO_Init+0x32>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003b04:	6843      	ldr	r3, [r0, #4]
 8003b06:	68c9      	ldr	r1, [r1, #12]
 8003b08:	ea23 0302 	bic.w	r3, r3, r2
 8003b0c:	434a      	muls	r2, r1
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	6042      	str	r2, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 8003b12:	2001      	movs	r0, #1
 8003b14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003b18:	fa0e f304 	lsl.w	r3, lr, r4
    if (currentpin)
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	d069      	beq.n	8003bf4 <LL_GPIO_Init+0x114>
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003b20:	f8d1 8004 	ldr.w	r8, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003b24:	f8d0 9000 	ldr.w	r9, [r0]
 8003b28:	fa93 fca3 	rbit	ip, r3
 8003b2c:	fabc fc8c 	clz	ip, ip
 8003b30:	fa93 f6a3 	rbit	r6, r3
 8003b34:	fab6 f686 	clz	r6, r6
 8003b38:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8003b3c:	fa05 fc0c 	lsl.w	ip, r5, ip
 8003b40:	0076      	lsls	r6, r6, #1
 8003b42:	ea29 0c0c 	bic.w	ip, r9, ip
 8003b46:	fa08 f606 	lsl.w	r6, r8, r6
 8003b4a:	ea4c 0606 	orr.w	r6, ip, r6
 8003b4e:	6006      	str	r6, [r0, #0]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003b50:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8003b54:	2e01      	cmp	r6, #1
 8003b56:	d816      	bhi.n	8003b86 <LL_GPIO_Init+0xa6>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003b58:	6886      	ldr	r6, [r0, #8]
 8003b5a:	fa93 fca3 	rbit	ip, r3
 8003b5e:	fabc fc8c 	clz	ip, ip
 8003b62:	fa93 f9a3 	rbit	r9, r3
 8003b66:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8003b6a:	fa05 fc0c 	lsl.w	ip, r5, ip
 8003b6e:	ea26 0c0c 	bic.w	ip, r6, ip
 8003b72:	fab9 f989 	clz	r9, r9
 8003b76:	688e      	ldr	r6, [r1, #8]
 8003b78:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8003b7c:	fa06 f609 	lsl.w	r6, r6, r9
 8003b80:	ea4c 0606 	orr.w	r6, ip, r6
 8003b84:	6086      	str	r6, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003b86:	68c6      	ldr	r6, [r0, #12]
 8003b88:	fa93 fca3 	rbit	ip, r3
 8003b8c:	fabc fc8c 	clz	ip, ip
 8003b90:	fa93 f9a3 	rbit	r9, r3
 8003b94:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8003b98:	fa05 fc0c 	lsl.w	ip, r5, ip
 8003b9c:	ea26 0c0c 	bic.w	ip, r6, ip
 8003ba0:	fab9 f989 	clz	r9, r9
 8003ba4:	690e      	ldr	r6, [r1, #16]
 8003ba6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8003baa:	fa06 f609 	lsl.w	r6, r6, r9
 8003bae:	ea4c 0606 	orr.w	r6, ip, r6
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003bb2:	f1b8 0f02 	cmp.w	r8, #2
 8003bb6:	60c6      	str	r6, [r0, #12]
 8003bb8:	d11c      	bne.n	8003bf4 <LL_GPIO_Init+0x114>
 8003bba:	fa93 f6a3 	rbit	r6, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003bbe:	fab6 f686 	clz	r6, r6
 8003bc2:	2e07      	cmp	r6, #7
 8003bc4:	f8d1 c014 	ldr.w	ip, [r1, #20]
 8003bc8:	dc16      	bgt.n	8003bf8 <LL_GPIO_Init+0x118>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003bca:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8003bce:	fa93 f6a3 	rbit	r6, r3
 8003bd2:	fab6 f686 	clz	r6, r6
 8003bd6:	fa93 f3a3 	rbit	r3, r3
 8003bda:	fab3 f383 	clz	r3, r3
 8003bde:	00b6      	lsls	r6, r6, #2
 8003be0:	fa07 f606 	lsl.w	r6, r7, r6
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	ea28 0606 	bic.w	r6, r8, r6
 8003bea:	fa0c fc03 	lsl.w	ip, ip, r3
 8003bee:	ea46 060c 	orr.w	r6, r6, ip
 8003bf2:	6206      	str	r6, [r0, #32]
    pinpos++;
 8003bf4:	3401      	adds	r4, #1
 8003bf6:	e77e      	b.n	8003af6 <LL_GPIO_Init+0x16>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003bf8:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
 8003bfc:	0a1b      	lsrs	r3, r3, #8
 8003bfe:	fa93 f6a3 	rbit	r6, r3
 8003c02:	fab6 f686 	clz	r6, r6
 8003c06:	fa93 f3a3 	rbit	r3, r3
 8003c0a:	fab3 f383 	clz	r3, r3
 8003c0e:	00b6      	lsls	r6, r6, #2
 8003c10:	fa07 f606 	lsl.w	r6, r7, r6
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	ea28 0606 	bic.w	r6, r8, r6
 8003c1a:	fa0c f303 	lsl.w	r3, ip, r3
 8003c1e:	4333      	orrs	r3, r6
 8003c20:	6243      	str	r3, [r0, #36]	; 0x24
 8003c22:	e7e7      	b.n	8003bf4 <LL_GPIO_Init+0x114>

08003c24 <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003c24:	4b11      	ldr	r3, [pc, #68]	; (8003c6c <SDMMC_GetCmdResp2+0x48>)
 8003c26:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	fbb3 f2f2 	udiv	r2, r3, r2
 8003c30:	f241 3388 	movw	r3, #5000	; 0x1388
 8003c34:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8003c36:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8003c3a:	d314      	bcc.n	8003c66 <SDMMC_GetCmdResp2+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003c3c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003c3e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003c42:	d0f8      	beq.n	8003c36 <SDMMC_GetCmdResp2+0x12>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003c44:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003c46:	075b      	lsls	r3, r3, #29
 8003c48:	d503      	bpl.n	8003c52 <SDMMC_GetCmdResp2+0x2e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003c4a:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003c4c:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	4770      	bx	lr
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003c52:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003c54:	f013 0301 	ands.w	r3, r3, #1
 8003c58:	d001      	beq.n	8003c5e <SDMMC_GetCmdResp2+0x3a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e7f6      	b.n	8003c4c <SDMMC_GetCmdResp2+0x28>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003c5e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003c62:	6382      	str	r2, [r0, #56]	; 0x38
 8003c64:	e7f3      	b.n	8003c4e <SDMMC_GetCmdResp2+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8003c66:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003c6a:	e7f0      	b.n	8003c4e <SDMMC_GetCmdResp2+0x2a>
 8003c6c:	20000010 	.word	0x20000010

08003c70 <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003c70:	4b0e      	ldr	r3, [pc, #56]	; (8003cac <SDMMC_GetCmdResp3+0x3c>)
 8003c72:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	fbb3 f2f2 	udiv	r2, r3, r2
 8003c7c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003c80:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8003c82:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8003c86:	d30e      	bcc.n	8003ca6 <SDMMC_GetCmdResp3+0x36>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003c88:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003c8a:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003c8e:	d0f8      	beq.n	8003c82 <SDMMC_GetCmdResp3+0x12>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003c90:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003c92:	f013 0304 	ands.w	r3, r3, #4
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003c96:	bf15      	itete	ne
 8003c98:	2304      	movne	r3, #4
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003c9a:	f240 52ff 	movweq	r2, #1535	; 0x5ff
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003c9e:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003ca0:	6382      	streq	r2, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8003ca6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8003caa:	4770      	bx	lr
 8003cac:	20000010 	.word	0x20000010

08003cb0 <SDIO_Init>:
{
 8003cb0:	b084      	sub	sp, #16
 8003cb2:	b510      	push	{r4, lr}
 8003cb4:	ac03      	add	r4, sp, #12
 8003cb6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8003cba:	9904      	ldr	r1, [sp, #16]
 8003cbc:	9b03      	ldr	r3, [sp, #12]
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003cbe:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8003cc0:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 8003cc2:	9905      	ldr	r1, [sp, #20]
 8003cc4:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 8003cc6:	9906      	ldr	r1, [sp, #24]
 8003cc8:	430b      	orrs	r3, r1
             Init.BusWide             |\
 8003cca:	9907      	ldr	r1, [sp, #28]
 8003ccc:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8003cce:	9908      	ldr	r1, [sp, #32]
}
 8003cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003cd4:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.HardwareFlowControl |\
 8003cd8:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003cda:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	6043      	str	r3, [r0, #4]
}
 8003ce2:	b004      	add	sp, #16
 8003ce4:	2000      	movs	r0, #0
 8003ce6:	4770      	bx	lr

08003ce8 <SDIO_ReadFIFO>:
 8003ce8:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8003cec:	4770      	bx	lr

08003cee <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 8003cee:	680b      	ldr	r3, [r1, #0]
 8003cf0:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	4770      	bx	lr

08003cf8 <SDIO_PowerState_ON>:
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	6003      	str	r3, [r0, #0]
}
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	4770      	bx	lr

08003d00 <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003d00:	6800      	ldr	r0, [r0, #0]
}
 8003d02:	f000 0003 	and.w	r0, r0, #3
 8003d06:	4770      	bx	lr

08003d08 <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 8003d08:	680b      	ldr	r3, [r1, #0]
{
 8003d0a:	b510      	push	{r4, lr}
  SDIOx->ARG = Command->Argument;
 8003d0c:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003d0e:	688c      	ldr	r4, [r1, #8]
 8003d10:	684b      	ldr	r3, [r1, #4]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003d12:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003d14:	4323      	orrs	r3, r4
                       Command->Response         |\
 8003d16:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 8003d18:	6909      	ldr	r1, [r1, #16]
                       Command->Response         |\
 8003d1a:	4323      	orrs	r3, r4
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003d1c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
                       Command->WaitForInterrupt |\
 8003d20:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003d22:	f022 020f 	bic.w	r2, r2, #15
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60c3      	str	r3, [r0, #12]
}
 8003d2a:	2000      	movs	r0, #0
 8003d2c:	bd10      	pop	{r4, pc}

08003d2e <SDIO_GetResponse>:
{
 8003d2e:	b082      	sub	sp, #8
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8003d30:	3014      	adds	r0, #20
 8003d32:	4401      	add	r1, r0
  __IO uint32_t tmp = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8003d38:	9101      	str	r1, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 8003d3a:	9b01      	ldr	r3, [sp, #4]
 8003d3c:	6818      	ldr	r0, [r3, #0]
}  
 8003d3e:	b002      	add	sp, #8
 8003d40:	4770      	bx	lr
	...

08003d44 <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003d44:	4b45      	ldr	r3, [pc, #276]	; (8003e5c <SDMMC_GetCmdResp1+0x118>)
{
 8003d46:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 8003d4e:	fbb3 f3f4 	udiv	r3, r3, r4
 8003d52:	435a      	muls	r2, r3
    if (count-- == 0U)
 8003d54:	2a00      	cmp	r2, #0
 8003d56:	d04a      	beq.n	8003dee <SDMMC_GetCmdResp1+0xaa>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003d58:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003d5a:	f013 0f45 	tst.w	r3, #69	; 0x45
 8003d5e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8003d62:	d0f7      	beq.n	8003d54 <SDMMC_GetCmdResp1+0x10>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003d64:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003d66:	075c      	lsls	r4, r3, #29
 8003d68:	d503      	bpl.n	8003d72 <SDMMC_GetCmdResp1+0x2e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003d6a:	2304      	movs	r3, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003d6c:	6383      	str	r3, [r0, #56]	; 0x38
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	bd10      	pop	{r4, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003d72:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003d74:	f013 0301 	ands.w	r3, r3, #1
 8003d78:	d001      	beq.n	8003d7e <SDMMC_GetCmdResp1+0x3a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e7f6      	b.n	8003d6c <SDMMC_GetCmdResp1+0x28>
  return (uint8_t)(SDIOx->RESPCMD);
 8003d7e:	6902      	ldr	r2, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	4291      	cmp	r1, r2
 8003d84:	d136      	bne.n	8003df4 <SDMMC_GetCmdResp1+0xb0>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003d86:	f240 52ff 	movw	r2, #1535	; 0x5ff
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003d8a:	4619      	mov	r1, r3
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003d8c:	6382      	str	r2, [r0, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003d8e:	f7ff ffce 	bl	8003d2e <SDIO_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003d92:	4b33      	ldr	r3, [pc, #204]	; (8003e60 <SDMMC_GetCmdResp1+0x11c>)
 8003d94:	4003      	ands	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0e9      	beq.n	8003d6e <SDMMC_GetCmdResp1+0x2a>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003d9a:	2800      	cmp	r0, #0
 8003d9c:	db2c      	blt.n	8003df8 <SDMMC_GetCmdResp1+0xb4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003d9e:	0042      	lsls	r2, r0, #1
 8003da0:	d42d      	bmi.n	8003dfe <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003da2:	0084      	lsls	r4, r0, #2
 8003da4:	d42d      	bmi.n	8003e02 <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003da6:	00c1      	lsls	r1, r0, #3
 8003da8:	d42d      	bmi.n	8003e06 <SDMMC_GetCmdResp1+0xc2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003daa:	0102      	lsls	r2, r0, #4
 8003dac:	d42e      	bmi.n	8003e0c <SDMMC_GetCmdResp1+0xc8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003dae:	0144      	lsls	r4, r0, #5
 8003db0:	d42f      	bmi.n	8003e12 <SDMMC_GetCmdResp1+0xce>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003db2:	01c1      	lsls	r1, r0, #7
 8003db4:	d430      	bmi.n	8003e18 <SDMMC_GetCmdResp1+0xd4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003db6:	0202      	lsls	r2, r0, #8
 8003db8:	d431      	bmi.n	8003e1e <SDMMC_GetCmdResp1+0xda>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003dba:	0244      	lsls	r4, r0, #9
 8003dbc:	d432      	bmi.n	8003e24 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003dbe:	0281      	lsls	r1, r0, #10
 8003dc0:	d433      	bmi.n	8003e2a <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003dc2:	02c2      	lsls	r2, r0, #11
 8003dc4:	d434      	bmi.n	8003e30 <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003dc6:	0344      	lsls	r4, r0, #13
 8003dc8:	d435      	bmi.n	8003e36 <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003dca:	0381      	lsls	r1, r0, #14
 8003dcc:	d436      	bmi.n	8003e3c <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003dce:	03c2      	lsls	r2, r0, #15
 8003dd0:	d437      	bmi.n	8003e42 <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003dd2:	0404      	lsls	r4, r0, #16
 8003dd4:	d438      	bmi.n	8003e48 <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003dd6:	0441      	lsls	r1, r0, #17
 8003dd8:	d439      	bmi.n	8003e4e <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003dda:	0482      	lsls	r2, r0, #18
 8003ddc:	d43a      	bmi.n	8003e54 <SDMMC_GetCmdResp1+0x110>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003dde:	f010 0f08 	tst.w	r0, #8
 8003de2:	bf14      	ite	ne
 8003de4:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8003de8:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8003dec:	e7bf      	b.n	8003d6e <SDMMC_GetCmdResp1+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8003dee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003df2:	e7bc      	b.n	8003d6e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e7ba      	b.n	8003d6e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003df8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dfc:	e7b7      	b.n	8003d6e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003dfe:	2340      	movs	r3, #64	; 0x40
 8003e00:	e7b5      	b.n	8003d6e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003e02:	2380      	movs	r3, #128	; 0x80
 8003e04:	e7b3      	b.n	8003d6e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003e06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e0a:	e7b0      	b.n	8003d6e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003e0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e10:	e7ad      	b.n	8003d6e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003e12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e16:	e7aa      	b.n	8003d6e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003e18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e1c:	e7a7      	b.n	8003d6e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003e1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e22:	e7a4      	b.n	8003d6e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003e24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e28:	e7a1      	b.n	8003d6e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003e2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e2e:	e79e      	b.n	8003d6e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CC_ERR;
 8003e30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e34:	e79b      	b.n	8003d6e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003e36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e3a:	e798      	b.n	8003d6e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003e3c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003e40:	e795      	b.n	8003d6e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003e42:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003e46:	e792      	b.n	8003d6e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003e48:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003e4c:	e78f      	b.n	8003d6e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003e4e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003e52:	e78c      	b.n	8003d6e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_RESET;
 8003e54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e58:	e789      	b.n	8003d6e <SDMMC_GetCmdResp1+0x2a>
 8003e5a:	bf00      	nop
 8003e5c:	20000010 	.word	0x20000010
 8003e60:	fdffe008 	.word	0xfdffe008

08003e64 <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 8003e64:	680b      	ldr	r3, [r1, #0]
{
 8003e66:	b510      	push	{r4, lr}
  SDIOx->DTIMER = Data->DataTimeOut;
 8003e68:	6243      	str	r3, [r0, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 8003e6a:	684b      	ldr	r3, [r1, #4]
 8003e6c:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003e6e:	68cc      	ldr	r4, [r1, #12]
 8003e70:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003e72:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003e74:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 8003e76:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 8003e78:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 8003e7a:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8003e7c:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003e7e:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 8003e82:	4313      	orrs	r3, r2
 8003e84:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8003e86:	2000      	movs	r0, #0
 8003e88:	bd10      	pop	{r4, pc}

08003e8a <SDMMC_CmdBlockLength>:
{
 8003e8a:	b530      	push	{r4, r5, lr}
 8003e8c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e8e:	2340      	movs	r3, #64	; 0x40
 8003e90:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e92:	2300      	movs	r3, #0
{
 8003e94:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003e96:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003e98:	2410      	movs	r4, #16
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e9a:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e9c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ea2:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003ea4:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ea6:	f7ff ff2f 	bl	8003d08 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eae:	4621      	mov	r1, r4
 8003eb0:	4628      	mov	r0, r5
 8003eb2:	f7ff ff47 	bl	8003d44 <SDMMC_GetCmdResp1>
}
 8003eb6:	b007      	add	sp, #28
 8003eb8:	bd30      	pop	{r4, r5, pc}

08003eba <SDMMC_CmdReadSingleBlock>:
{
 8003eba:	b530      	push	{r4, r5, lr}
 8003ebc:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ebe:	2340      	movs	r3, #64	; 0x40
 8003ec0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ec2:	2300      	movs	r3, #0
{
 8003ec4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003ec6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003ec8:	2411      	movs	r4, #17
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003eca:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ecc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ece:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ed2:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003ed4:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ed6:	f7ff ff17 	bl	8003d08 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ede:	4621      	mov	r1, r4
 8003ee0:	4628      	mov	r0, r5
 8003ee2:	f7ff ff2f 	bl	8003d44 <SDMMC_GetCmdResp1>
}
 8003ee6:	b007      	add	sp, #28
 8003ee8:	bd30      	pop	{r4, r5, pc}

08003eea <SDMMC_CmdReadMultiBlock>:
{
 8003eea:	b530      	push	{r4, r5, lr}
 8003eec:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003eee:	2340      	movs	r3, #64	; 0x40
 8003ef0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ef2:	2300      	movs	r3, #0
{
 8003ef4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003ef6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003ef8:	2412      	movs	r4, #18
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003efa:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003efc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003efe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f02:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003f04:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f06:	f7ff feff 	bl	8003d08 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0e:	4621      	mov	r1, r4
 8003f10:	4628      	mov	r0, r5
 8003f12:	f7ff ff17 	bl	8003d44 <SDMMC_GetCmdResp1>
}
 8003f16:	b007      	add	sp, #28
 8003f18:	bd30      	pop	{r4, r5, pc}

08003f1a <SDMMC_CmdWriteSingleBlock>:
{
 8003f1a:	b530      	push	{r4, r5, lr}
 8003f1c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f1e:	2340      	movs	r3, #64	; 0x40
 8003f20:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f22:	2300      	movs	r3, #0
{
 8003f24:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003f26:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003f28:	2418      	movs	r4, #24
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f2a:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f2c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f32:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003f34:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f36:	f7ff fee7 	bl	8003d08 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f3e:	4621      	mov	r1, r4
 8003f40:	4628      	mov	r0, r5
 8003f42:	f7ff feff 	bl	8003d44 <SDMMC_GetCmdResp1>
}
 8003f46:	b007      	add	sp, #28
 8003f48:	bd30      	pop	{r4, r5, pc}

08003f4a <SDMMC_CmdWriteMultiBlock>:
{
 8003f4a:	b530      	push	{r4, r5, lr}
 8003f4c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f4e:	2340      	movs	r3, #64	; 0x40
 8003f50:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f52:	2300      	movs	r3, #0
{
 8003f54:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003f56:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003f58:	2419      	movs	r4, #25
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f5a:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f5c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f62:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003f64:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f66:	f7ff fecf 	bl	8003d08 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6e:	4621      	mov	r1, r4
 8003f70:	4628      	mov	r0, r5
 8003f72:	f7ff fee7 	bl	8003d44 <SDMMC_GetCmdResp1>
}
 8003f76:	b007      	add	sp, #28
 8003f78:	bd30      	pop	{r4, r5, pc}
	...

08003f7c <SDMMC_CmdStopTransfer>:
{
 8003f7c:	b530      	push	{r4, r5, lr}
 8003f7e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 8003f80:	2300      	movs	r3, #0
{
 8003f82:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8003f84:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003f86:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f88:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f8a:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f8c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f92:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f94:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003f96:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f98:	f7ff feb6 	bl	8003d08 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 8003f9c:	4a03      	ldr	r2, [pc, #12]	; (8003fac <SDMMC_CmdStopTransfer+0x30>)
 8003f9e:	4621      	mov	r1, r4
 8003fa0:	4628      	mov	r0, r5
 8003fa2:	f7ff fecf 	bl	8003d44 <SDMMC_GetCmdResp1>
}
 8003fa6:	b007      	add	sp, #28
 8003fa8:	bd30      	pop	{r4, r5, pc}
 8003faa:	bf00      	nop
 8003fac:	05f5e100 	.word	0x05f5e100

08003fb0 <SDMMC_CmdSelDesel>:
{
 8003fb0:	b530      	push	{r4, r5, lr}
 8003fb2:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003fb4:	2340      	movs	r3, #64	; 0x40
 8003fb6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003fb8:	2300      	movs	r3, #0
{
 8003fba:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003fbc:	2407      	movs	r4, #7
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003fbe:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003fc0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003fc6:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003fc8:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003fca:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003fcc:	f7ff fe9c 	bl	8003d08 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd4:	4621      	mov	r1, r4
 8003fd6:	4628      	mov	r0, r5
 8003fd8:	f7ff feb4 	bl	8003d44 <SDMMC_GetCmdResp1>
}
 8003fdc:	b007      	add	sp, #28
 8003fde:	bd30      	pop	{r4, r5, pc}

08003fe0 <SDMMC_CmdGoIdleState>:
{
 8003fe0:	b510      	push	{r4, lr}
 8003fe2:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0U;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003fe8:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003fea:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003fec:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003fee:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ff4:	9305      	str	r3, [sp, #20]
{
 8003ff6:	4604      	mov	r4, r0
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ff8:	f7ff fe86 	bl	8003d08 <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003ffc:	4b0b      	ldr	r3, [pc, #44]	; (800402c <SDMMC_CmdGoIdleState+0x4c>)
 8003ffe:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	fbb3 f2f2 	udiv	r2, r3, r2
 8004008:	f241 3388 	movw	r3, #5000	; 0x1388
 800400c:	4353      	muls	r3, r2
    if (count-- == 0U)
 800400e:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8004012:	d308      	bcc.n	8004026 <SDMMC_CmdGoIdleState+0x46>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004014:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004016:	0612      	lsls	r2, r2, #24
 8004018:	d5f9      	bpl.n	800400e <SDMMC_CmdGoIdleState+0x2e>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800401a:	f240 53ff 	movw	r3, #1535	; 0x5ff
 800401e:	63a3      	str	r3, [r4, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8004020:	2000      	movs	r0, #0
}
 8004022:	b006      	add	sp, #24
 8004024:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8004026:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 800402a:	e7fa      	b.n	8004022 <SDMMC_CmdGoIdleState+0x42>
 800402c:	20000010 	.word	0x20000010

08004030 <SDMMC_CmdOperCond>:
{
 8004030:	b510      	push	{r4, lr}
 8004032:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004034:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004038:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800403a:	2308      	movs	r3, #8
 800403c:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800403e:	2340      	movs	r3, #64	; 0x40
 8004040:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004042:	2300      	movs	r3, #0
 8004044:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004046:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800404c:	9305      	str	r3, [sp, #20]
{
 800404e:	4604      	mov	r4, r0
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004050:	f7ff fe5a 	bl	8003d08 <SDIO_SendCommand>
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004054:	4b11      	ldr	r3, [pc, #68]	; (800409c <SDMMC_CmdOperCond+0x6c>)
 8004056:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004060:	f241 3388 	movw	r3, #5000	; 0x1388
 8004064:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8004066:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800406a:	d314      	bcc.n	8004096 <SDMMC_CmdOperCond+0x66>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800406c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800406e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8004072:	d0f8      	beq.n	8004066 <SDMMC_CmdOperCond+0x36>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004074:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004076:	f012 0204 	ands.w	r2, r2, #4
 800407a:	d004      	beq.n	8004086 <SDMMC_CmdOperCond+0x56>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800407c:	2340      	movs	r3, #64	; 0x40
 800407e:	63a3      	str	r3, [r4, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004080:	2004      	movs	r0, #4
}
 8004082:	b006      	add	sp, #24
 8004084:	bd10      	pop	{r4, pc}
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004086:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004088:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800408c:	d0f9      	beq.n	8004082 <SDMMC_CmdOperCond+0x52>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800408e:	2340      	movs	r3, #64	; 0x40
 8004090:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004092:	4610      	mov	r0, r2
 8004094:	e7f5      	b.n	8004082 <SDMMC_CmdOperCond+0x52>
      return SDMMC_ERROR_TIMEOUT;
 8004096:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800409a:	e7f2      	b.n	8004082 <SDMMC_CmdOperCond+0x52>
 800409c:	20000010 	.word	0x20000010

080040a0 <SDMMC_CmdAppCommand>:
{
 80040a0:	b530      	push	{r4, r5, lr}
 80040a2:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80040a4:	2340      	movs	r3, #64	; 0x40
 80040a6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80040a8:	2300      	movs	r3, #0
{
 80040aa:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80040ac:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80040ae:	2437      	movs	r4, #55	; 0x37
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80040b0:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80040b2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80040b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040b8:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80040ba:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80040bc:	f7ff fe24 	bl	8003d08 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80040c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c4:	4621      	mov	r1, r4
 80040c6:	4628      	mov	r0, r5
 80040c8:	f7ff fe3c 	bl	8003d44 <SDMMC_GetCmdResp1>
}
 80040cc:	b007      	add	sp, #28
 80040ce:	bd30      	pop	{r4, r5, pc}

080040d0 <SDMMC_CmdAppOperCommand>:
{
 80040d0:	b510      	push	{r4, lr}
 80040d2:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80040d4:	2329      	movs	r3, #41	; 0x29
 80040d6:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 80040d8:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80040dc:	2340      	movs	r3, #64	; 0x40
 80040de:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 80040e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80040e4:	2300      	movs	r3, #0
{
 80040e6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 80040e8:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80040ea:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80040ec:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80040ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040f2:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80040f4:	f7ff fe08 	bl	8003d08 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80040f8:	4620      	mov	r0, r4
 80040fa:	f7ff fdb9 	bl	8003c70 <SDMMC_GetCmdResp3>
}
 80040fe:	b006      	add	sp, #24
 8004100:	bd10      	pop	{r4, pc}

08004102 <SDMMC_CmdSendSCR>:
{
 8004102:	b530      	push	{r4, r5, lr}
 8004104:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 8004106:	2300      	movs	r3, #0
{
 8004108:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 800410a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800410c:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800410e:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004110:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004112:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004114:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004118:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800411a:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800411c:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800411e:	f7ff fdf3 	bl	8003d08 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004122:	f241 3288 	movw	r2, #5000	; 0x1388
 8004126:	4621      	mov	r1, r4
 8004128:	4628      	mov	r0, r5
 800412a:	f7ff fe0b 	bl	8003d44 <SDMMC_GetCmdResp1>
}
 800412e:	b007      	add	sp, #28
 8004130:	bd30      	pop	{r4, r5, pc}

08004132 <SDMMC_CmdSendCID>:
{
 8004132:	b510      	push	{r4, lr}
 8004134:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0U;
 8004136:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004138:	2202      	movs	r2, #2
{
 800413a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800413c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800413e:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004140:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004142:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004144:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004148:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800414a:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800414c:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800414e:	f7ff fddb 	bl	8003d08 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004152:	4620      	mov	r0, r4
 8004154:	f7ff fd66 	bl	8003c24 <SDMMC_GetCmdResp2>
}
 8004158:	b006      	add	sp, #24
 800415a:	bd10      	pop	{r4, pc}

0800415c <SDMMC_CmdSendCSD>:
{
 800415c:	b510      	push	{r4, lr}
 800415e:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004160:	2309      	movs	r3, #9
 8004162:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004164:	23c0      	movs	r3, #192	; 0xc0
 8004166:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004168:	2300      	movs	r3, #0
{
 800416a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800416c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800416e:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004170:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004176:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004178:	f7ff fdc6 	bl	8003d08 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800417c:	4620      	mov	r0, r4
 800417e:	f7ff fd51 	bl	8003c24 <SDMMC_GetCmdResp2>
}
 8004182:	b006      	add	sp, #24
 8004184:	bd10      	pop	{r4, pc}
	...

08004188 <SDMMC_CmdSetRelAdd>:
{
 8004188:	b530      	push	{r4, r5, lr}
 800418a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 800418c:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800418e:	2203      	movs	r2, #3
  sdmmc_cmdinit.Argument         = 0U;
 8004190:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004192:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004194:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004196:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004198:	f44f 6380 	mov.w	r3, #1024	; 0x400
{
 800419c:	460d      	mov	r5, r1
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800419e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80041a0:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041a2:	9305      	str	r3, [sp, #20]
{
 80041a4:	4604      	mov	r4, r0
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041a6:	f7ff fdaf 	bl	8003d08 <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80041aa:	4b20      	ldr	r3, [pc, #128]	; (800422c <SDMMC_CmdSetRelAdd+0xa4>)
 80041ac:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80041b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80041ba:	4353      	muls	r3, r2
    if (count-- == 0U)
 80041bc:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80041c0:	d32b      	bcc.n	800421a <SDMMC_CmdSetRelAdd+0x92>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80041c2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80041c4:	f012 0f45 	tst.w	r2, #69	; 0x45
 80041c8:	d0f8      	beq.n	80041bc <SDMMC_CmdSetRelAdd+0x34>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80041ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041cc:	075a      	lsls	r2, r3, #29
 80041ce:	d503      	bpl.n	80041d8 <SDMMC_CmdSetRelAdd+0x50>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80041d0:	2004      	movs	r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80041d2:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80041d4:	b007      	add	sp, #28
 80041d6:	bd30      	pop	{r4, r5, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80041d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041da:	f011 0101 	ands.w	r1, r1, #1
 80041de:	d001      	beq.n	80041e4 <SDMMC_CmdSetRelAdd+0x5c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80041e0:	2001      	movs	r0, #1
 80041e2:	e7f6      	b.n	80041d2 <SDMMC_CmdSetRelAdd+0x4a>
  return (uint8_t)(SDIOx->RESPCMD);
 80041e4:	6923      	ldr	r3, [r4, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b03      	cmp	r3, #3
 80041ea:	d119      	bne.n	8004220 <SDMMC_CmdSetRelAdd+0x98>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80041ec:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80041f0:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80041f2:	4620      	mov	r0, r4
 80041f4:	f7ff fd9b 	bl	8003d2e <SDIO_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80041f8:	f410 4360 	ands.w	r3, r0, #57344	; 0xe000
 80041fc:	d103      	bne.n	8004206 <SDMMC_CmdSetRelAdd+0x7e>
    *pRCA = (uint16_t) (response_r1 >> 16);
 80041fe:	0c00      	lsrs	r0, r0, #16
 8004200:	8028      	strh	r0, [r5, #0]
    return SDMMC_ERROR_NONE;
 8004202:	4618      	mov	r0, r3
 8004204:	e7e6      	b.n	80041d4 <SDMMC_CmdSetRelAdd+0x4c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004206:	0443      	lsls	r3, r0, #17
 8004208:	d40c      	bmi.n	8004224 <SDMMC_CmdSetRelAdd+0x9c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800420a:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800420e:	bf14      	ite	ne
 8004210:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8004214:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8004218:	e7dc      	b.n	80041d4 <SDMMC_CmdSetRelAdd+0x4c>
      return SDMMC_ERROR_TIMEOUT;
 800421a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800421e:	e7d9      	b.n	80041d4 <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004220:	2001      	movs	r0, #1
 8004222:	e7d7      	b.n	80041d4 <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004224:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004228:	e7d4      	b.n	80041d4 <SDMMC_CmdSetRelAdd+0x4c>
 800422a:	bf00      	nop
 800422c:	20000010 	.word	0x20000010

08004230 <SDMMC_CmdSendStatus>:
{
 8004230:	b530      	push	{r4, r5, lr}
 8004232:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004234:	2340      	movs	r3, #64	; 0x40
 8004236:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004238:	2300      	movs	r3, #0
{
 800423a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800423c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800423e:	240d      	movs	r4, #13
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004240:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004242:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004248:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800424a:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800424c:	f7ff fd5c 	bl	8003d08 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004250:	f241 3288 	movw	r2, #5000	; 0x1388
 8004254:	4621      	mov	r1, r4
 8004256:	4628      	mov	r0, r5
 8004258:	f7ff fd74 	bl	8003d44 <SDMMC_GetCmdResp1>
}
 800425c:	b007      	add	sp, #28
 800425e:	bd30      	pop	{r4, r5, pc}

08004260 <SDMMC_CmdSwitch>:
{
 8004260:	b530      	push	{r4, r5, lr}
 8004262:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004264:	2340      	movs	r3, #64	; 0x40
 8004266:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004268:	2300      	movs	r3, #0
{
 800426a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 800426c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800426e:	2406      	movs	r4, #6
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004270:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004272:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004278:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800427a:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800427c:	f7ff fd44 	bl	8003d08 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_HS_SWITCH, SDIO_CMDTIMEOUT);
 8004280:	f241 3288 	movw	r2, #5000	; 0x1388
 8004284:	4621      	mov	r1, r4
 8004286:	4628      	mov	r0, r5
 8004288:	f7ff fd5c 	bl	8003d44 <SDMMC_GetCmdResp1>
}
 800428c:	b007      	add	sp, #28
 800428e:	bd30      	pop	{r4, r5, pc}

08004290 <SDMMC_CmdBusWidth>:
 8004290:	f7ff bfe6 	b.w	8004260 <SDMMC_CmdSwitch>

08004294 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004294:	4a2f      	ldr	r2, [pc, #188]	; (8004354 <LL_TIM_Init+0xc0>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004296:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004298:	4290      	cmp	r0, r2
 800429a:	d012      	beq.n	80042c2 <LL_TIM_Init+0x2e>
 800429c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80042a0:	d00f      	beq.n	80042c2 <LL_TIM_Init+0x2e>
 80042a2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80042a6:	4290      	cmp	r0, r2
 80042a8:	d00b      	beq.n	80042c2 <LL_TIM_Init+0x2e>
 80042aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80042ae:	4290      	cmp	r0, r2
 80042b0:	d007      	beq.n	80042c2 <LL_TIM_Init+0x2e>
 80042b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80042b6:	4290      	cmp	r0, r2
 80042b8:	d003      	beq.n	80042c2 <LL_TIM_Init+0x2e>
 80042ba:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80042be:	4290      	cmp	r0, r2
 80042c0:	d119      	bne.n	80042f6 <LL_TIM_Init+0x62>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80042c2:	684a      	ldr	r2, [r1, #4]
 80042c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042ca:	4a22      	ldr	r2, [pc, #136]	; (8004354 <LL_TIM_Init+0xc0>)
 80042cc:	4290      	cmp	r0, r2
 80042ce:	d029      	beq.n	8004324 <LL_TIM_Init+0x90>
 80042d0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80042d4:	d026      	beq.n	8004324 <LL_TIM_Init+0x90>
 80042d6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80042da:	4290      	cmp	r0, r2
 80042dc:	d022      	beq.n	8004324 <LL_TIM_Init+0x90>
 80042de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80042e2:	4290      	cmp	r0, r2
 80042e4:	d01e      	beq.n	8004324 <LL_TIM_Init+0x90>
 80042e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80042ea:	4290      	cmp	r0, r2
 80042ec:	d01a      	beq.n	8004324 <LL_TIM_Init+0x90>
 80042ee:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80042f2:	4290      	cmp	r0, r2
 80042f4:	d016      	beq.n	8004324 <LL_TIM_Init+0x90>
 80042f6:	4a18      	ldr	r2, [pc, #96]	; (8004358 <LL_TIM_Init+0xc4>)
 80042f8:	4290      	cmp	r0, r2
 80042fa:	d013      	beq.n	8004324 <LL_TIM_Init+0x90>
 80042fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004300:	4290      	cmp	r0, r2
 8004302:	d00f      	beq.n	8004324 <LL_TIM_Init+0x90>
 8004304:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004308:	4290      	cmp	r0, r2
 800430a:	d00b      	beq.n	8004324 <LL_TIM_Init+0x90>
 800430c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004310:	4290      	cmp	r0, r2
 8004312:	d007      	beq.n	8004324 <LL_TIM_Init+0x90>
 8004314:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004318:	4290      	cmp	r0, r2
 800431a:	d003      	beq.n	8004324 <LL_TIM_Init+0x90>
 800431c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004320:	4290      	cmp	r0, r2
 8004322:	d103      	bne.n	800432c <LL_TIM_Init+0x98>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004324:	68ca      	ldr	r2, [r1, #12]
 8004326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800432a:	4313      	orrs	r3, r2
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800432c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800432e:	688b      	ldr	r3, [r1, #8]
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
  WRITE_REG(TIMx->ARR, AutoReload);
 8004330:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004332:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004334:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004336:	4b07      	ldr	r3, [pc, #28]	; (8004354 <LL_TIM_Init+0xc0>)
 8004338:	4298      	cmp	r0, r3
 800433a:	d003      	beq.n	8004344 <LL_TIM_Init+0xb0>
 800433c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004340:	4298      	cmp	r0, r3
 8004342:	d101      	bne.n	8004348 <LL_TIM_Init+0xb4>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004344:	7c0b      	ldrb	r3, [r1, #16]
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004346:	6303      	str	r3, [r0, #48]	; 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004348:	6943      	ldr	r3, [r0, #20]
 800434a:	f043 0301 	orr.w	r3, r3, #1
 800434e:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8004350:	2001      	movs	r0, #1
 8004352:	4770      	bx	lr
 8004354:	40010000 	.word	0x40010000
 8004358:	40014000 	.word	0x40014000

0800435c <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 800435c:	2910      	cmp	r1, #16
{
 800435e:	b530      	push	{r4, r5, lr}
  switch (Channel)
 8004360:	d066      	beq.n	8004430 <LL_TIM_OC_Init+0xd4>
 8004362:	d803      	bhi.n	800436c <LL_TIM_OC_Init+0x10>
 8004364:	2901      	cmp	r1, #1
 8004366:	d02f      	beq.n	80043c8 <LL_TIM_OC_Init+0x6c>
  ErrorStatus result = ERROR;
 8004368:	2000      	movs	r0, #0
    default:
      break;
  }

  return result;
}
 800436a:	bd30      	pop	{r4, r5, pc}
  switch (Channel)
 800436c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004370:	f000 8094 	beq.w	800449c <LL_TIM_OC_Init+0x140>
 8004374:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004378:	d1f6      	bne.n	8004368 <LL_TIM_OC_Init+0xc>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800437a:	6a03      	ldr	r3, [r0, #32]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800437c:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800437e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004382:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004384:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004386:	6844      	ldr	r4, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004388:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800438a:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 800438e:	ea41 2105 	orr.w	r1, r1, r5, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004392:	6915      	ldr	r5, [r2, #16]
 8004394:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004398:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800439c:	6855      	ldr	r5, [r2, #4]
 800439e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043a2:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043a6:	4d58      	ldr	r5, [pc, #352]	; (8004508 <LL_TIM_OC_Init+0x1ac>)
 80043a8:	42a8      	cmp	r0, r5
 80043aa:	d003      	beq.n	80043b4 <LL_TIM_OC_Init+0x58>
 80043ac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80043b0:	42a8      	cmp	r0, r5
 80043b2:	d104      	bne.n	80043be <LL_TIM_OC_Init+0x62>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80043b4:	6995      	ldr	r5, [r2, #24]
 80043b6:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 80043ba:	ea44 1485 	orr.w	r4, r4, r5, lsl #6

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80043be:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80043c0:	6044      	str	r4, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80043c2:	61c1      	str	r1, [r0, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80043c4:	6402      	str	r2, [r0, #64]	; 0x40
 80043c6:	e030      	b.n	800442a <LL_TIM_OC_Init+0xce>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80043c8:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80043ca:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80043cc:	f023 0301 	bic.w	r3, r3, #1
 80043d0:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80043d2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80043d4:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80043d6:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80043d8:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 80043dc:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80043de:	6915      	ldr	r5, [r2, #16]
 80043e0:	f023 0302 	bic.w	r3, r3, #2
 80043e4:	432b      	orrs	r3, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80043e6:	6855      	ldr	r5, [r2, #4]
 80043e8:	f023 0301 	bic.w	r3, r3, #1
 80043ec:	432b      	orrs	r3, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ee:	4d46      	ldr	r5, [pc, #280]	; (8004508 <LL_TIM_OC_Init+0x1ac>)
 80043f0:	42a8      	cmp	r0, r5
 80043f2:	d003      	beq.n	80043fc <LL_TIM_OC_Init+0xa0>
 80043f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80043f8:	42a8      	cmp	r0, r5
 80043fa:	d112      	bne.n	8004422 <LL_TIM_OC_Init+0xc6>
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80043fc:	6955      	ldr	r5, [r2, #20]
 80043fe:	f023 0308 	bic.w	r3, r3, #8
 8004402:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004406:	6895      	ldr	r5, [r2, #8]
 8004408:	f023 0304 	bic.w	r3, r3, #4
 800440c:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004410:	6995      	ldr	r5, [r2, #24]
 8004412:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004416:	4329      	orrs	r1, r5
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004418:	69d5      	ldr	r5, [r2, #28]
 800441a:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 800441e:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004422:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004424:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004426:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004428:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800442a:	6203      	str	r3, [r0, #32]
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800442c:	2001      	movs	r0, #1
      break;
 800442e:	bd30      	pop	{r4, r5, pc}
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8004430:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004432:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8004434:	f023 0310 	bic.w	r3, r3, #16
 8004438:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800443a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800443c:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800443e:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004440:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8004444:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004448:	6915      	ldr	r5, [r2, #16]
 800444a:	f023 0320 	bic.w	r3, r3, #32
 800444e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004452:	6855      	ldr	r5, [r2, #4]
 8004454:	f023 0310 	bic.w	r3, r3, #16
 8004458:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800445c:	4d2a      	ldr	r5, [pc, #168]	; (8004508 <LL_TIM_OC_Init+0x1ac>)
 800445e:	42a8      	cmp	r0, r5
 8004460:	d003      	beq.n	800446a <LL_TIM_OC_Init+0x10e>
 8004462:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004466:	42a8      	cmp	r0, r5
 8004468:	d113      	bne.n	8004492 <LL_TIM_OC_Init+0x136>
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800446a:	6955      	ldr	r5, [r2, #20]
 800446c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004470:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004474:	6895      	ldr	r5, [r2, #8]
 8004476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800447a:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800447e:	6995      	ldr	r5, [r2, #24]
 8004480:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004484:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004488:	69d5      	ldr	r5, [r2, #28]
 800448a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800448e:	ea41 01c5 	orr.w	r1, r1, r5, lsl #3
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004492:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004494:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004496:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004498:	6382      	str	r2, [r0, #56]	; 0x38
 800449a:	e7c6      	b.n	800442a <LL_TIM_OC_Init+0xce>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800449c:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800449e:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80044a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044a4:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80044a6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80044a8:	6841      	ldr	r1, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80044aa:	69c4      	ldr	r4, [r0, #28]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80044ac:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 80044b0:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80044b2:	6915      	ldr	r5, [r2, #16]
 80044b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044b8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80044bc:	6855      	ldr	r5, [r2, #4]
 80044be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044c2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044c6:	4d10      	ldr	r5, [pc, #64]	; (8004508 <LL_TIM_OC_Init+0x1ac>)
 80044c8:	42a8      	cmp	r0, r5
 80044ca:	d003      	beq.n	80044d4 <LL_TIM_OC_Init+0x178>
 80044cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80044d0:	42a8      	cmp	r0, r5
 80044d2:	d113      	bne.n	80044fc <LL_TIM_OC_Init+0x1a0>
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80044d4:	6955      	ldr	r5, [r2, #20]
 80044d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044da:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80044de:	6895      	ldr	r5, [r2, #8]
 80044e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044e4:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80044e8:	6995      	ldr	r5, [r2, #24]
 80044ea:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80044ee:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80044f2:	69d5      	ldr	r5, [r2, #28]
 80044f4:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 80044f8:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80044fc:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80044fe:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004500:	61c4      	str	r4, [r0, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004502:	63c2      	str	r2, [r0, #60]	; 0x3c
 8004504:	e791      	b.n	800442a <LL_TIM_OC_Init+0xce>
 8004506:	bf00      	nop
 8004508:	40010000 	.word	0x40010000

0800450c <LL_TIM_BDTR_Init>:
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 800450c:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 800450e:	7b0b      	ldrb	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8004510:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8004512:	684a      	ldr	r2, [r1, #4]
 8004514:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004518:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 800451a:	680a      	ldr	r2, [r1, #0]
 800451c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004520:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8004522:	89ca      	ldrh	r2, [r1, #14]
 8004524:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004528:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 800452a:	690a      	ldr	r2, [r1, #16]
 800452c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004530:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8004532:	694a      	ldr	r2, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8004534:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004538:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 800453a:	6443      	str	r3, [r0, #68]	; 0x44
}
 800453c:	2001      	movs	r0, #1
 800453e:	4770      	bx	lr

08004540 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004540:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8004542:	4b0f      	ldr	r3, [pc, #60]	; (8004580 <FATFS_LinkDriverEx+0x40>)
 8004544:	7a5d      	ldrb	r5, [r3, #9]
 8004546:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 800454a:	b9b5      	cbnz	r5, 800457a <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 800454c:	7a5d      	ldrb	r5, [r3, #9]
 800454e:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8004550:	7a5d      	ldrb	r5, [r3, #9]
 8004552:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8004556:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8004558:	7a58      	ldrb	r0, [r3, #9]
 800455a:	4418      	add	r0, r3
 800455c:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 800455e:	7a5a      	ldrb	r2, [r3, #9]
 8004560:	b2d2      	uxtb	r2, r2
 8004562:	1c50      	adds	r0, r2, #1
 8004564:	b2c0      	uxtb	r0, r0
 8004566:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8004568:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 800456a:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 800456c:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800456e:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8004570:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8004572:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8004574:	70cc      	strb	r4, [r1, #3]
 8004576:	4620      	mov	r0, r4
 8004578:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 800457a:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 800457c:	bd30      	pop	{r4, r5, pc}
 800457e:	bf00      	nop
 8004580:	20000238 	.word	0x20000238

08004584 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8004584:	2200      	movs	r2, #0
 8004586:	f7ff bfdb 	b.w	8004540 <FATFS_LinkDriverEx>

0800458a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800458a:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800458c:	f000 ffa2 	bl	80054d4 <vTaskStartScheduler>
  
  return osOK;
}
 8004590:	2000      	movs	r0, #0
 8004592:	bd08      	pop	{r3, pc}

08004594 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8004594:	b508      	push	{r3, lr}
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8004596:	f001 fa3d 	bl	8005a14 <xTaskGetSchedulerState>
  else
    return 1;
#else
	return (-1);
#endif	
}
 800459a:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 800459e:	bf18      	it	ne
 80045a0:	2001      	movne	r0, #1
 80045a2:	bd08      	pop	{r3, pc}

080045a4 <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045a4:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 80045a8:	b10b      	cbz	r3, 80045ae <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 80045aa:	f000 bfdd 	b.w	8005568 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 80045ae:	f000 bfd5 	b.w	800555c <xTaskGetTickCount>

080045b2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80045b2:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045b4:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80045b8:	8a02      	ldrh	r2, [r0, #16]
{
 80045ba:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045bc:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 80045c0:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 80045c2:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80045c4:	bf14      	ite	ne
 80045c6:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80045c8:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045ca:	a803      	add	r0, sp, #12
 80045cc:	9001      	str	r0, [sp, #4]
 80045ce:	9400      	str	r4, [sp, #0]
 80045d0:	4628      	mov	r0, r5
 80045d2:	f000 feaf 	bl	8005334 <xTaskCreate>
 80045d6:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80045d8:	bf0c      	ite	eq
 80045da:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 80045dc:	2000      	movne	r0, #0
}
 80045de:	b005      	add	sp, #20
 80045e0:	bd30      	pop	{r4, r5, pc}

080045e2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80045e2:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80045e4:	2800      	cmp	r0, #0
 80045e6:	bf08      	it	eq
 80045e8:	2001      	moveq	r0, #1
 80045ea:	f001 f8cf 	bl	800578c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80045ee:	2000      	movs	r0, #0
 80045f0:	bd08      	pop	{r3, pc}

080045f2 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80045f2:	2200      	movs	r2, #0
 80045f4:	c803      	ldmia	r0, {r0, r1}
 80045f6:	f000 bbed 	b.w	8004dd4 <xQueueGenericCreate>
	...

080045fc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80045fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 80045fe:	2400      	movs	r4, #0
{
 8004600:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004602:	9403      	str	r4, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 8004604:	42a2      	cmp	r2, r4
 8004606:	bf08      	it	eq
 8004608:	2201      	moveq	r2, #1
 800460a:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 800460e:	b1ab      	cbz	r3, 800463c <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004610:	4623      	mov	r3, r4
 8004612:	aa03      	add	r2, sp, #12
 8004614:	a901      	add	r1, sp, #4
 8004616:	f000 fcb5 	bl	8004f84 <xQueueGenericSendFromISR>
 800461a:	2801      	cmp	r0, #1
 800461c:	d002      	beq.n	8004624 <osMessagePut+0x28>
      return osErrorOS;
 800461e:	20ff      	movs	r0, #255	; 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 8004620:	b004      	add	sp, #16
 8004622:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8004624:	9b03      	ldr	r3, [sp, #12]
 8004626:	b13b      	cbz	r3, 8004638 <osMessagePut+0x3c>
 8004628:	4b07      	ldr	r3, [pc, #28]	; (8004648 <osMessagePut+0x4c>)
 800462a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800462e:	601a      	str	r2, [r3, #0]
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	f3bf 8f6f 	isb	sy
  return osOK;
 8004638:	2000      	movs	r0, #0
 800463a:	e7f1      	b.n	8004620 <osMessagePut+0x24>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800463c:	a901      	add	r1, sp, #4
 800463e:	f000 fbeb 	bl	8004e18 <xQueueGenericSend>
 8004642:	2801      	cmp	r0, #1
 8004644:	d1eb      	bne.n	800461e <osMessagePut+0x22>
 8004646:	e7f7      	b.n	8004638 <osMessagePut+0x3c>
 8004648:	e000ed04 	.word	0xe000ed04

0800464c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800464c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800464e:	b085      	sub	sp, #20
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8004650:	2600      	movs	r6, #0
{
 8004652:	4604      	mov	r4, r0
 8004654:	4617      	mov	r7, r2
 8004656:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 8004658:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 800465a:	9602      	str	r6, [sp, #8]
 800465c:	ad01      	add	r5, sp, #4
  
  if (queue_id == NULL) {
 800465e:	b911      	cbnz	r1, 8004666 <osMessageGet+0x1a>
    event.status = osErrorParameter;
 8004660:	2380      	movs	r3, #128	; 0x80
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004662:	9301      	str	r3, [sp, #4]
 8004664:	e017      	b.n	8004696 <osMessageGet+0x4a>
  taskWoken = pdFALSE;
 8004666:	9600      	str	r6, [sp, #0]
 8004668:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 800466c:	b1d3      	cbz	r3, 80046a4 <osMessageGet+0x58>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800466e:	466a      	mov	r2, sp
 8004670:	a902      	add	r1, sp, #8
 8004672:	f000 fdad 	bl	80051d0 <xQueueReceiveFromISR>
 8004676:	2801      	cmp	r0, #1
      event.status = osEventMessage;
 8004678:	bf04      	itt	eq
 800467a:	2310      	moveq	r3, #16
 800467c:	9301      	streq	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 800467e:	9b00      	ldr	r3, [sp, #0]
      event.status = osOK;
 8004680:	bf18      	it	ne
 8004682:	9601      	strne	r6, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8004684:	b13b      	cbz	r3, 8004696 <osMessageGet+0x4a>
 8004686:	4b0d      	ldr	r3, [pc, #52]	; (80046bc <osMessageGet+0x70>)
 8004688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	f3bf 8f6f 	isb	sy
    }
  }
  
  return event;
 8004696:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800469a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800469e:	4620      	mov	r0, r4
 80046a0:	b005      	add	sp, #20
 80046a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80046a4:	a902      	add	r1, sp, #8
 80046a6:	f000 fccf 	bl	8005048 <xQueueGenericReceive>
 80046aa:	2801      	cmp	r0, #1
 80046ac:	d101      	bne.n	80046b2 <osMessageGet+0x66>
      event.status = osEventMessage;
 80046ae:	2310      	movs	r3, #16
 80046b0:	e7d7      	b.n	8004662 <osMessageGet+0x16>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80046b2:	2f00      	cmp	r7, #0
 80046b4:	bf0c      	ite	eq
 80046b6:	2300      	moveq	r3, #0
 80046b8:	2340      	movne	r3, #64	; 0x40
 80046ba:	e7d2      	b.n	8004662 <osMessageGet+0x16>
 80046bc:	e000ed04 	.word	0xe000ed04

080046c0 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80046c0:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80046c2:	f001 f9a7 	bl	8005a14 <xTaskGetSchedulerState>
 80046c6:	2801      	cmp	r0, #1
 80046c8:	d003      	beq.n	80046d2 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80046ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80046ce:	f000 b909 	b.w	80048e4 <xPortSysTickHandler>
 80046d2:	bd08      	pop	{r3, pc}

080046d4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046d4:	f100 0308 	add.w	r3, r0, #8
 80046d8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80046da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046de:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046e0:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80046e2:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80046e4:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80046e6:	6003      	str	r3, [r0, #0]
 80046e8:	4770      	bx	lr

080046ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80046ea:	2300      	movs	r3, #0
 80046ec:	6103      	str	r3, [r0, #16]
 80046ee:	4770      	bx	lr

080046f0 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80046f0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80046f2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80046f4:	689a      	ldr	r2, [r3, #8]
 80046f6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80046f8:	689a      	ldr	r2, [r3, #8]
 80046fa:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80046fc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80046fe:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004700:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004702:	3301      	adds	r3, #1
 8004704:	6003      	str	r3, [r0, #0]
 8004706:	4770      	bx	lr

08004708 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004708:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800470a:	1c53      	adds	r3, r2, #1
{
 800470c:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 800470e:	d10a      	bne.n	8004726 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004710:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004716:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004718:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800471a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800471c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800471e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004720:	3301      	adds	r3, #1
 8004722:	6003      	str	r3, [r0, #0]
 8004724:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004726:	f100 0308 	add.w	r3, r0, #8
 800472a:	685c      	ldr	r4, [r3, #4]
 800472c:	6825      	ldr	r5, [r4, #0]
 800472e:	42aa      	cmp	r2, r5
 8004730:	d3ef      	bcc.n	8004712 <vListInsert+0xa>
 8004732:	4623      	mov	r3, r4
 8004734:	e7f9      	b.n	800472a <vListInsert+0x22>

08004736 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004736:	6841      	ldr	r1, [r0, #4]
 8004738:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800473a:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800473c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800473e:	6882      	ldr	r2, [r0, #8]
 8004740:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004742:	6859      	ldr	r1, [r3, #4]
 8004744:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004746:	bf08      	it	eq
 8004748:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800474a:	2200      	movs	r2, #0
 800474c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800474e:	6818      	ldr	r0, [r3, #0]
 8004750:	3801      	subs	r0, #1
 8004752:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8004754:	4770      	bx	lr
	...

08004758 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004758:	4b0a      	ldr	r3, [pc, #40]	; (8004784 <prvTaskExitError+0x2c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	3301      	adds	r3, #1
 800475e:	d008      	beq.n	8004772 <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004764:	f383 8811 	msr	BASEPRI, r3
 8004768:	f3bf 8f6f 	isb	sy
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	e7fe      	b.n	8004770 <prvTaskExitError+0x18>
 8004772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	e7fe      	b.n	8004782 <prvTaskExitError+0x2a>
 8004784:	20000008 	.word	0x20000008

08004788 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004788:	4806      	ldr	r0, [pc, #24]	; (80047a4 <prvPortStartFirstTask+0x1c>)
 800478a:	6800      	ldr	r0, [r0, #0]
 800478c:	6800      	ldr	r0, [r0, #0]
 800478e:	f380 8808 	msr	MSP, r0
 8004792:	b662      	cpsie	i
 8004794:	b661      	cpsie	f
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	df00      	svc	0
 80047a0:	bf00      	nop
 80047a2:	0000      	.short	0x0000
 80047a4:	e000ed08 	.word	0xe000ed08

080047a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80047a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80047b8 <vPortEnableVFP+0x10>
 80047ac:	6801      	ldr	r1, [r0, #0]
 80047ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80047b2:	6001      	str	r1, [r0, #0]
 80047b4:	4770      	bx	lr
 80047b6:	0000      	.short	0x0000
 80047b8:	e000ed88 	.word	0xe000ed88

080047bc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80047bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047c0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80047c4:	4b07      	ldr	r3, [pc, #28]	; (80047e4 <pxPortInitialiseStack+0x28>)
 80047c6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80047ca:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80047ce:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80047d2:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80047d6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80047da:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80047de:	3844      	subs	r0, #68	; 0x44
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	08004759 	.word	0x08004759
	...

080047f0 <SVC_Handler>:
	__asm volatile (
 80047f0:	4b07      	ldr	r3, [pc, #28]	; (8004810 <pxCurrentTCBConst2>)
 80047f2:	6819      	ldr	r1, [r3, #0]
 80047f4:	6808      	ldr	r0, [r1, #0]
 80047f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047fa:	f380 8809 	msr	PSP, r0
 80047fe:	f3bf 8f6f 	isb	sy
 8004802:	f04f 0000 	mov.w	r0, #0
 8004806:	f380 8811 	msr	BASEPRI, r0
 800480a:	4770      	bx	lr
 800480c:	f3af 8000 	nop.w

08004810 <pxCurrentTCBConst2>:
 8004810:	20003e64 	.word	0x20003e64

08004814 <vPortEnterCritical>:
 8004814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004818:	f383 8811 	msr	BASEPRI, r3
 800481c:	f3bf 8f6f 	isb	sy
 8004820:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8004824:	4a0a      	ldr	r2, [pc, #40]	; (8004850 <vPortEnterCritical+0x3c>)
 8004826:	6813      	ldr	r3, [r2, #0]
 8004828:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800482a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800482c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800482e:	d10d      	bne.n	800484c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004830:	4b08      	ldr	r3, [pc, #32]	; (8004854 <vPortEnterCritical+0x40>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004838:	d008      	beq.n	800484c <vPortEnterCritical+0x38>
 800483a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483e:	f383 8811 	msr	BASEPRI, r3
 8004842:	f3bf 8f6f 	isb	sy
 8004846:	f3bf 8f4f 	dsb	sy
 800484a:	e7fe      	b.n	800484a <vPortEnterCritical+0x36>
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	20000008 	.word	0x20000008
 8004854:	e000ed04 	.word	0xe000ed04

08004858 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8004858:	4a08      	ldr	r2, [pc, #32]	; (800487c <vPortExitCritical+0x24>)
 800485a:	6813      	ldr	r3, [r2, #0]
 800485c:	b943      	cbnz	r3, 8004870 <vPortExitCritical+0x18>
 800485e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004862:	f383 8811 	msr	BASEPRI, r3
 8004866:	f3bf 8f6f 	isb	sy
 800486a:	f3bf 8f4f 	dsb	sy
 800486e:	e7fe      	b.n	800486e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8004870:	3b01      	subs	r3, #1
 8004872:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004874:	b90b      	cbnz	r3, 800487a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004876:	f383 8811 	msr	BASEPRI, r3
 800487a:	4770      	bx	lr
 800487c:	20000008 	.word	0x20000008

08004880 <PendSV_Handler>:
	__asm volatile
 8004880:	f3ef 8009 	mrs	r0, PSP
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	4b15      	ldr	r3, [pc, #84]	; (80048e0 <pxCurrentTCBConst>)
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	f01e 0f10 	tst.w	lr, #16
 8004890:	bf08      	it	eq
 8004892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800489a:	6010      	str	r0, [r2, #0]
 800489c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80048a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80048a4:	f380 8811 	msr	BASEPRI, r0
 80048a8:	f3bf 8f4f 	dsb	sy
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f000 ffca 	bl	8005848 <vTaskSwitchContext>
 80048b4:	f04f 0000 	mov.w	r0, #0
 80048b8:	f380 8811 	msr	BASEPRI, r0
 80048bc:	bc08      	pop	{r3}
 80048be:	6819      	ldr	r1, [r3, #0]
 80048c0:	6808      	ldr	r0, [r1, #0]
 80048c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048c6:	f01e 0f10 	tst.w	lr, #16
 80048ca:	bf08      	it	eq
 80048cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80048d0:	f380 8809 	msr	PSP, r0
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	f3af 8000 	nop.w

080048e0 <pxCurrentTCBConst>:
 80048e0:	20003e64 	.word	0x20003e64

080048e4 <xPortSysTickHandler>:
{
 80048e4:	b508      	push	{r3, lr}
	__asm volatile
 80048e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ea:	f383 8811 	msr	BASEPRI, r3
 80048ee:	f3bf 8f6f 	isb	sy
 80048f2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80048f6:	f000 fe3f 	bl	8005578 <xTaskIncrementTick>
 80048fa:	b118      	cbz	r0, 8004904 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80048fc:	4b03      	ldr	r3, [pc, #12]	; (800490c <xPortSysTickHandler+0x28>)
 80048fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004902:	601a      	str	r2, [r3, #0]
	__asm volatile
 8004904:	2300      	movs	r3, #0
 8004906:	f383 8811 	msr	BASEPRI, r3
 800490a:	bd08      	pop	{r3, pc}
 800490c:	e000ed04 	.word	0xe000ed04

08004910 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004910:	4b06      	ldr	r3, [pc, #24]	; (800492c <vPortSetupTimerInterrupt+0x1c>)
 8004912:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	fbb3 f3f2 	udiv	r3, r3, r2
 800491c:	4a04      	ldr	r2, [pc, #16]	; (8004930 <vPortSetupTimerInterrupt+0x20>)
 800491e:	3b01      	subs	r3, #1
 8004920:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004922:	4b04      	ldr	r3, [pc, #16]	; (8004934 <vPortSetupTimerInterrupt+0x24>)
 8004924:	2207      	movs	r2, #7
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	20000010 	.word	0x20000010
 8004930:	e000e014 	.word	0xe000e014
 8004934:	e000e010 	.word	0xe000e010

08004938 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004938:	4b31      	ldr	r3, [pc, #196]	; (8004a00 <xPortStartScheduler+0xc8>)
 800493a:	4a32      	ldr	r2, [pc, #200]	; (8004a04 <xPortStartScheduler+0xcc>)
{
 800493c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800493e:	6819      	ldr	r1, [r3, #0]
 8004940:	4291      	cmp	r1, r2
 8004942:	d108      	bne.n	8004956 <xPortStartScheduler+0x1e>
	__asm volatile
 8004944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004948:	f383 8811 	msr	BASEPRI, r3
 800494c:	f3bf 8f6f 	isb	sy
 8004950:	f3bf 8f4f 	dsb	sy
 8004954:	e7fe      	b.n	8004954 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	4b2b      	ldr	r3, [pc, #172]	; (8004a08 <xPortStartScheduler+0xd0>)
 800495a:	429a      	cmp	r2, r3
 800495c:	d108      	bne.n	8004970 <xPortStartScheduler+0x38>
 800495e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004962:	f383 8811 	msr	BASEPRI, r3
 8004966:	f3bf 8f6f 	isb	sy
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	e7fe      	b.n	800496e <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004970:	4b26      	ldr	r3, [pc, #152]	; (8004a0c <xPortStartScheduler+0xd4>)
 8004972:	781a      	ldrb	r2, [r3, #0]
 8004974:	b2d2      	uxtb	r2, r2
 8004976:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004978:	22ff      	movs	r2, #255	; 0xff
 800497a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800497c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800497e:	4a24      	ldr	r2, [pc, #144]	; (8004a10 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004980:	b2db      	uxtb	r3, r3
 8004982:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004986:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800498a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800498e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004990:	4b20      	ldr	r3, [pc, #128]	; (8004a14 <xPortStartScheduler+0xdc>)
 8004992:	2207      	movs	r2, #7
 8004994:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004996:	2100      	movs	r1, #0
 8004998:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800499c:	0600      	lsls	r0, r0, #24
 800499e:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
 80049a2:	d423      	bmi.n	80049ec <xPortStartScheduler+0xb4>
 80049a4:	b101      	cbz	r1, 80049a8 <xPortStartScheduler+0x70>
 80049a6:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80049ac:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80049b0:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80049b2:	9b01      	ldr	r3, [sp, #4]
 80049b4:	4a15      	ldr	r2, [pc, #84]	; (8004a0c <xPortStartScheduler+0xd4>)
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80049ba:	4b17      	ldr	r3, [pc, #92]	; (8004a18 <xPortStartScheduler+0xe0>)
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80049c2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80049ca:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80049cc:	f7ff ffa0 	bl	8004910 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80049d0:	4b12      	ldr	r3, [pc, #72]	; (8004a1c <xPortStartScheduler+0xe4>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 80049d6:	f7ff fee7 	bl	80047a8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80049da:	4a11      	ldr	r2, [pc, #68]	; (8004a20 <xPortStartScheduler+0xe8>)
 80049dc:	6813      	ldr	r3, [r2, #0]
 80049de:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80049e2:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80049e4:	f7ff fed0 	bl	8004788 <prvPortStartFirstTask>
	prvTaskExitError();
 80049e8:	f7ff feb6 	bl	8004758 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80049ec:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80049f0:	0052      	lsls	r2, r2, #1
 80049f2:	b2d2      	uxtb	r2, r2
 80049f4:	f88d 2003 	strb.w	r2, [sp, #3]
 80049f8:	2101      	movs	r1, #1
 80049fa:	4622      	mov	r2, r4
 80049fc:	e7cc      	b.n	8004998 <xPortStartScheduler+0x60>
 80049fe:	bf00      	nop
 8004a00:	e000ed00 	.word	0xe000ed00
 8004a04:	410fc271 	.word	0x410fc271
 8004a08:	410fc270 	.word	0x410fc270
 8004a0c:	e000e400 	.word	0xe000e400
 8004a10:	20000244 	.word	0x20000244
 8004a14:	20000248 	.word	0x20000248
 8004a18:	e000ed20 	.word	0xe000ed20
 8004a1c:	20000008 	.word	0x20000008
 8004a20:	e000ef34 	.word	0xe000ef34

08004a24 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8004a24:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a28:	2b0f      	cmp	r3, #15
 8004a2a:	d90e      	bls.n	8004a4a <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a2c:	4a10      	ldr	r2, [pc, #64]	; (8004a70 <vPortValidateInterruptPriority+0x4c>)
 8004a2e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a30:	4a10      	ldr	r2, [pc, #64]	; (8004a74 <vPortValidateInterruptPriority+0x50>)
 8004a32:	7812      	ldrb	r2, [r2, #0]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d908      	bls.n	8004a4a <vPortValidateInterruptPriority+0x26>
 8004a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3c:	f383 8811 	msr	BASEPRI, r3
 8004a40:	f3bf 8f6f 	isb	sy
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	e7fe      	b.n	8004a48 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a4a:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <vPortValidateInterruptPriority+0x54>)
 8004a4c:	4a0b      	ldr	r2, [pc, #44]	; (8004a7c <vPortValidateInterruptPriority+0x58>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6812      	ldr	r2, [r2, #0]
 8004a52:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d908      	bls.n	8004a6c <vPortValidateInterruptPriority+0x48>
 8004a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	e7fe      	b.n	8004a6a <vPortValidateInterruptPriority+0x46>
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	e000e3f0 	.word	0xe000e3f0
 8004a74:	20000244 	.word	0x20000244
 8004a78:	e000ed0c 	.word	0xe000ed0c
 8004a7c:	20000248 	.word	0x20000248

08004a80 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004a80:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a82:	4b0f      	ldr	r3, [pc, #60]	; (8004ac0 <prvInsertBlockIntoFreeList+0x40>)
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	4282      	cmp	r2, r0
 8004a88:	d318      	bcc.n	8004abc <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a8a:	685c      	ldr	r4, [r3, #4]
 8004a8c:	1919      	adds	r1, r3, r4
 8004a8e:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a90:	bf01      	itttt	eq
 8004a92:	6841      	ldreq	r1, [r0, #4]
 8004a94:	4618      	moveq	r0, r3
 8004a96:	1909      	addeq	r1, r1, r4
 8004a98:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a9a:	6844      	ldr	r4, [r0, #4]
 8004a9c:	1901      	adds	r1, r0, r4
 8004a9e:	428a      	cmp	r2, r1
 8004aa0:	d107      	bne.n	8004ab2 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004aa2:	4908      	ldr	r1, [pc, #32]	; (8004ac4 <prvInsertBlockIntoFreeList+0x44>)
 8004aa4:	6809      	ldr	r1, [r1, #0]
 8004aa6:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004aa8:	bf1f      	itttt	ne
 8004aaa:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004aac:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004aae:	1909      	addne	r1, r1, r4
 8004ab0:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ab2:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ab4:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ab6:	bf18      	it	ne
 8004ab8:	6018      	strne	r0, [r3, #0]
 8004aba:	bd10      	pop	{r4, pc}
 8004abc:	4613      	mov	r3, r2
 8004abe:	e7e1      	b.n	8004a84 <prvInsertBlockIntoFreeList+0x4>
 8004ac0:	20003e5c 	.word	0x20003e5c
 8004ac4:	2000024c 	.word	0x2000024c

08004ac8 <pvPortMalloc>:
{
 8004ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004acc:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8004ace:	f000 fd3d 	bl	800554c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8004ad2:	493e      	ldr	r1, [pc, #248]	; (8004bcc <pvPortMalloc+0x104>)
 8004ad4:	4d3e      	ldr	r5, [pc, #248]	; (8004bd0 <pvPortMalloc+0x108>)
 8004ad6:	680b      	ldr	r3, [r1, #0]
 8004ad8:	bb0b      	cbnz	r3, 8004b1e <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8004ada:	4a3e      	ldr	r2, [pc, #248]	; (8004bd4 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004adc:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004ade:	bf1f      	itttt	ne
 8004ae0:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ae2:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ae6:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 8004aea:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004aec:	bf14      	ite	ne
 8004aee:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004af0:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004af4:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8004af6:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004af8:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004afc:	4e36      	ldr	r6, [pc, #216]	; (8004bd8 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8004afe:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004b00:	2000      	movs	r0, #0
 8004b02:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b04:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8004b06:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004b08:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b0a:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b0c:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b0e:	4b33      	ldr	r3, [pc, #204]	; (8004bdc <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b10:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b12:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b14:	4b32      	ldr	r3, [pc, #200]	; (8004be0 <pvPortMalloc+0x118>)
 8004b16:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b1c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b1e:	682f      	ldr	r7, [r5, #0]
 8004b20:	4227      	tst	r7, r4
 8004b22:	d116      	bne.n	8004b52 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8004b24:	2c00      	cmp	r4, #0
 8004b26:	d041      	beq.n	8004bac <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8004b28:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b2c:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b2e:	bf1c      	itt	ne
 8004b30:	f023 0307 	bicne.w	r3, r3, #7
 8004b34:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b36:	b163      	cbz	r3, 8004b52 <pvPortMalloc+0x8a>
 8004b38:	4a29      	ldr	r2, [pc, #164]	; (8004be0 <pvPortMalloc+0x118>)
 8004b3a:	6816      	ldr	r6, [r2, #0]
 8004b3c:	42b3      	cmp	r3, r6
 8004b3e:	4690      	mov	r8, r2
 8004b40:	d807      	bhi.n	8004b52 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8004b42:	4a25      	ldr	r2, [pc, #148]	; (8004bd8 <pvPortMalloc+0x110>)
 8004b44:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b46:	6868      	ldr	r0, [r5, #4]
 8004b48:	4283      	cmp	r3, r0
 8004b4a:	d804      	bhi.n	8004b56 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8004b4c:	6809      	ldr	r1, [r1, #0]
 8004b4e:	428d      	cmp	r5, r1
 8004b50:	d107      	bne.n	8004b62 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8004b52:	2400      	movs	r4, #0
 8004b54:	e02a      	b.n	8004bac <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b56:	682c      	ldr	r4, [r5, #0]
 8004b58:	2c00      	cmp	r4, #0
 8004b5a:	d0f7      	beq.n	8004b4c <pvPortMalloc+0x84>
 8004b5c:	462a      	mov	r2, r5
 8004b5e:	4625      	mov	r5, r4
 8004b60:	e7f1      	b.n	8004b46 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b62:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b64:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b66:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b68:	1ac2      	subs	r2, r0, r3
 8004b6a:	2a10      	cmp	r2, #16
 8004b6c:	d90f      	bls.n	8004b8e <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b6e:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b70:	0741      	lsls	r1, r0, #29
 8004b72:	d008      	beq.n	8004b86 <pvPortMalloc+0xbe>
 8004b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b78:	f383 8811 	msr	BASEPRI, r3
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	e7fe      	b.n	8004b84 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b86:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b88:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b8a:	f7ff ff79 	bl	8004a80 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b8e:	4913      	ldr	r1, [pc, #76]	; (8004bdc <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b90:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b92:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b94:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b96:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b98:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8004b9a:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b9e:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ba2:	bf38      	it	cc
 8004ba4:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ba6:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004ba8:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004baa:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8004bac:	f000 fd76 	bl	800569c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bb0:	0763      	lsls	r3, r4, #29
 8004bb2:	d008      	beq.n	8004bc6 <pvPortMalloc+0xfe>
 8004bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb8:	f383 8811 	msr	BASEPRI, r3
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	e7fe      	b.n	8004bc4 <pvPortMalloc+0xfc>
}
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bcc:	2000024c 	.word	0x2000024c
 8004bd0:	20003e50 	.word	0x20003e50
 8004bd4:	20000250 	.word	0x20000250
 8004bd8:	20003e5c 	.word	0x20003e5c
 8004bdc:	20003e58 	.word	0x20003e58
 8004be0:	20003e54 	.word	0x20003e54

08004be4 <vPortFree>:
{
 8004be4:	b510      	push	{r4, lr}
	if( pv != NULL )
 8004be6:	4604      	mov	r4, r0
 8004be8:	b370      	cbz	r0, 8004c48 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004bea:	4a18      	ldr	r2, [pc, #96]	; (8004c4c <vPortFree+0x68>)
 8004bec:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004bf0:	6812      	ldr	r2, [r2, #0]
 8004bf2:	4213      	tst	r3, r2
 8004bf4:	d108      	bne.n	8004c08 <vPortFree+0x24>
 8004bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfa:	f383 8811 	msr	BASEPRI, r3
 8004bfe:	f3bf 8f6f 	isb	sy
 8004c02:	f3bf 8f4f 	dsb	sy
 8004c06:	e7fe      	b.n	8004c06 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c08:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8004c0c:	b141      	cbz	r1, 8004c20 <vPortFree+0x3c>
 8004c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c12:	f383 8811 	msr	BASEPRI, r3
 8004c16:	f3bf 8f6f 	isb	sy
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	e7fe      	b.n	8004c1e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c20:	ea23 0302 	bic.w	r3, r3, r2
 8004c24:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8004c28:	f000 fc90 	bl	800554c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c2c:	4a08      	ldr	r2, [pc, #32]	; (8004c50 <vPortFree+0x6c>)
 8004c2e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8004c32:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c34:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c38:	440b      	add	r3, r1
 8004c3a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c3c:	f7ff ff20 	bl	8004a80 <prvInsertBlockIntoFreeList>
}
 8004c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8004c44:	f000 bd2a 	b.w	800569c <xTaskResumeAll>
 8004c48:	bd10      	pop	{r4, pc}
 8004c4a:	bf00      	nop
 8004c4c:	20003e50 	.word	0x20003e50
 8004c50:	20003e54 	.word	0x20003e54

08004c54 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004c54:	b570      	push	{r4, r5, r6, lr}
 8004c56:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c58:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c5a:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 8004c5c:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c5e:	b942      	cbnz	r2, 8004c72 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c60:	6805      	ldr	r5, [r0, #0]
 8004c62:	b99d      	cbnz	r5, 8004c8c <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004c64:	6840      	ldr	r0, [r0, #4]
 8004c66:	f000 ff2b 	bl	8005ac0 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8004c6a:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8004c6c:	3601      	adds	r6, #1
 8004c6e:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8004c70:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8004c72:	b96d      	cbnz	r5, 8004c90 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004c74:	6880      	ldr	r0, [r0, #8]
 8004c76:	f003 fd25 	bl	80086c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004c7a:	68a3      	ldr	r3, [r4, #8]
 8004c7c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004c7e:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c80:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004c82:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d301      	bcc.n	8004c8c <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c88:	6823      	ldr	r3, [r4, #0]
 8004c8a:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	e7ed      	b.n	8004c6c <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c90:	68c0      	ldr	r0, [r0, #12]
 8004c92:	f003 fd17 	bl	80086c4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004c96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c98:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c9a:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004c9c:	425b      	negs	r3, r3
 8004c9e:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ca0:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004ca2:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004ca4:	bf3e      	ittt	cc
 8004ca6:	6862      	ldrcc	r2, [r4, #4]
 8004ca8:	189b      	addcc	r3, r3, r2
 8004caa:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8004cac:	2d02      	cmp	r5, #2
 8004cae:	d1ed      	bne.n	8004c8c <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cb0:	b10e      	cbz	r6, 8004cb6 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8004cb2:	3e01      	subs	r6, #1
 8004cb4:	e7ea      	b.n	8004c8c <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8004cb6:	4630      	mov	r0, r6
 8004cb8:	e7d8      	b.n	8004c6c <prvCopyDataToQueue+0x18>

08004cba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004cba:	4603      	mov	r3, r0
 8004cbc:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004cbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8004cc0:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004cc2:	b162      	cbz	r2, 8004cde <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004cc4:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004cc6:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004cc8:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004cca:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004ccc:	60d9      	str	r1, [r3, #12]
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004cce:	bf24      	itt	cs
 8004cd0:	6819      	ldrcs	r1, [r3, #0]
 8004cd2:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004cd4:	68d9      	ldr	r1, [r3, #12]
	}
}
 8004cd6:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004cda:	f003 bcf3 	b.w	80086c4 <memcpy>
}
 8004cde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ce4:	b570      	push	{r4, r5, r6, lr}
 8004ce6:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ce8:	f7ff fd94 	bl	8004814 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004cec:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cf0:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8004cf4:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004cf6:	2d00      	cmp	r5, #0
 8004cf8:	dc14      	bgt.n	8004d24 <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004cfa:	23ff      	movs	r3, #255	; 0xff
 8004cfc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004d00:	f7ff fdaa 	bl	8004858 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d04:	f7ff fd86 	bl	8004814 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d08:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d0c:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8004d10:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d12:	2d00      	cmp	r5, #0
 8004d14:	dc12      	bgt.n	8004d3c <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004d16:	23ff      	movs	r3, #255	; 0xff
 8004d18:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8004d1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8004d20:	f7ff bd9a 	b.w	8004858 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0e7      	beq.n	8004cfa <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d2a:	4630      	mov	r0, r6
 8004d2c:	f000 fde0 	bl	80058f0 <xTaskRemoveFromEventList>
 8004d30:	b108      	cbz	r0, 8004d36 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8004d32:	f000 fe69 	bl	8005a08 <vTaskMissedYield>
 8004d36:	3d01      	subs	r5, #1
 8004d38:	b26d      	sxtb	r5, r5
 8004d3a:	e7dc      	b.n	8004cf6 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d3c:	6923      	ldr	r3, [r4, #16]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0e9      	beq.n	8004d16 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d42:	4630      	mov	r0, r6
 8004d44:	f000 fdd4 	bl	80058f0 <xTaskRemoveFromEventList>
 8004d48:	b108      	cbz	r0, 8004d4e <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8004d4a:	f000 fe5d 	bl	8005a08 <vTaskMissedYield>
 8004d4e:	3d01      	subs	r5, #1
 8004d50:	b26d      	sxtb	r5, r5
 8004d52:	e7de      	b.n	8004d12 <prvUnlockQueue+0x2e>

08004d54 <xQueueGenericReset>:
{
 8004d54:	b538      	push	{r3, r4, r5, lr}
 8004d56:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8004d58:	4604      	mov	r4, r0
 8004d5a:	b940      	cbnz	r0, 8004d6e <xQueueGenericReset+0x1a>
 8004d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d60:	f383 8811 	msr	BASEPRI, r3
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	e7fe      	b.n	8004d6c <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8004d6e:	f7ff fd51 	bl	8004814 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004d72:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004d74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004d76:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d78:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004d7a:	4343      	muls	r3, r0
 8004d7c:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004d7e:	1a1b      	subs	r3, r3, r0
 8004d80:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004d82:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004d84:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d86:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8004d88:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d8a:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8004d8c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004d90:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8004d94:	b995      	cbnz	r5, 8004dbc <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d96:	6923      	ldr	r3, [r4, #16]
 8004d98:	b163      	cbz	r3, 8004db4 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d9a:	f104 0010 	add.w	r0, r4, #16
 8004d9e:	f000 fda7 	bl	80058f0 <xTaskRemoveFromEventList>
 8004da2:	b138      	cbz	r0, 8004db4 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8004da4:	4b0a      	ldr	r3, [pc, #40]	; (8004dd0 <xQueueGenericReset+0x7c>)
 8004da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8004db4:	f7ff fd50 	bl	8004858 <vPortExitCritical>
}
 8004db8:	2001      	movs	r0, #1
 8004dba:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004dbc:	f104 0010 	add.w	r0, r4, #16
 8004dc0:	f7ff fc88 	bl	80046d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004dc4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004dc8:	f7ff fc84 	bl	80046d4 <vListInitialise>
 8004dcc:	e7f2      	b.n	8004db4 <xQueueGenericReset+0x60>
 8004dce:	bf00      	nop
 8004dd0:	e000ed04 	.word	0xe000ed04

08004dd4 <xQueueGenericCreate>:
	{
 8004dd4:	b570      	push	{r4, r5, r6, lr}
 8004dd6:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004dd8:	4606      	mov	r6, r0
 8004dda:	b940      	cbnz	r0, 8004dee <xQueueGenericCreate+0x1a>
 8004ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de0:	f383 8811 	msr	BASEPRI, r3
 8004de4:	f3bf 8f6f 	isb	sy
 8004de8:	f3bf 8f4f 	dsb	sy
 8004dec:	e7fe      	b.n	8004dec <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dee:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004df0:	3048      	adds	r0, #72	; 0x48
 8004df2:	f7ff fe69 	bl	8004ac8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004df6:	4604      	mov	r4, r0
 8004df8:	b138      	cbz	r0, 8004e0a <xQueueGenericCreate+0x36>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004dfa:	b945      	cbnz	r5, 8004e0e <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004dfc:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8004dfe:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e00:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e02:	2101      	movs	r1, #1
 8004e04:	4620      	mov	r0, r4
 8004e06:	f7ff ffa5 	bl	8004d54 <xQueueGenericReset>
	}
 8004e0a:	4620      	mov	r0, r4
 8004e0c:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004e0e:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e12:	6003      	str	r3, [r0, #0]
 8004e14:	e7f3      	b.n	8004dfe <xQueueGenericCreate+0x2a>
	...

08004e18 <xQueueGenericSend>:
{
 8004e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e1c:	4689      	mov	r9, r1
 8004e1e:	9201      	str	r2, [sp, #4]
 8004e20:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8004e22:	4604      	mov	r4, r0
 8004e24:	b940      	cbnz	r0, 8004e38 <xQueueGenericSend+0x20>
 8004e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2a:	f383 8811 	msr	BASEPRI, r3
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	e7fe      	b.n	8004e36 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e38:	2900      	cmp	r1, #0
 8004e3a:	f040 8088 	bne.w	8004f4e <xQueueGenericSend+0x136>
 8004e3e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 8084 	beq.w	8004f4e <xQueueGenericSend+0x136>
 8004e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4a:	f383 8811 	msr	BASEPRI, r3
 8004e4e:	f3bf 8f6f 	isb	sy
 8004e52:	f3bf 8f4f 	dsb	sy
 8004e56:	e7fe      	b.n	8004e56 <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e58:	9e01      	ldr	r6, [sp, #4]
 8004e5a:	2e00      	cmp	r6, #0
 8004e5c:	f000 8082 	beq.w	8004f64 <xQueueGenericSend+0x14c>
 8004e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e64:	f383 8811 	msr	BASEPRI, r3
 8004e68:	f3bf 8f6f 	isb	sy
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	e7fe      	b.n	8004e70 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e72:	9d01      	ldr	r5, [sp, #4]
 8004e74:	b91d      	cbnz	r5, 8004e7e <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 8004e76:	f7ff fcef 	bl	8004858 <vPortExitCritical>
			return errQUEUE_FULL;
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	e058      	b.n	8004f30 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 8004e7e:	b916      	cbnz	r6, 8004e86 <xQueueGenericSend+0x6e>
					vTaskSetTimeOutState( &xTimeOut );
 8004e80:	a802      	add	r0, sp, #8
 8004e82:	f000 fd77 	bl	8005974 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8004e86:	f7ff fce7 	bl	8004858 <vPortExitCritical>
		vTaskSuspendAll();
 8004e8a:	f000 fb5f 	bl	800554c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e8e:	f7ff fcc1 	bl	8004814 <vPortEnterCritical>
 8004e92:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004e96:	2bff      	cmp	r3, #255	; 0xff
 8004e98:	bf08      	it	eq
 8004e9a:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8004e9e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004ea2:	2bff      	cmp	r3, #255	; 0xff
 8004ea4:	bf08      	it	eq
 8004ea6:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8004eaa:	f7ff fcd5 	bl	8004858 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004eae:	a901      	add	r1, sp, #4
 8004eb0:	a802      	add	r0, sp, #8
 8004eb2:	f000 fd6f 	bl	8005994 <xTaskCheckForTimeOut>
 8004eb6:	2800      	cmp	r0, #0
 8004eb8:	d143      	bne.n	8004f42 <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004eba:	f7ff fcab 	bl	8004814 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ebe:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004ec0:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004ec2:	f7ff fcc9 	bl	8004858 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004ec6:	42ae      	cmp	r6, r5
 8004ec8:	d135      	bne.n	8004f36 <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004eca:	9901      	ldr	r1, [sp, #4]
 8004ecc:	f104 0010 	add.w	r0, r4, #16
 8004ed0:	f000 fcf4 	bl	80058bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ed4:	4620      	mov	r0, r4
 8004ed6:	f7ff ff05 	bl	8004ce4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004eda:	f000 fbdf 	bl	800569c <xTaskResumeAll>
 8004ede:	b938      	cbnz	r0, 8004ef0 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8004ee0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004ee4:	f8ca 3000 	str.w	r3, [sl]
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	f3bf 8f6f 	isb	sy
 8004ef0:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004ef2:	f7ff fc8f 	bl	8004814 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ef6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004ef8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d301      	bcc.n	8004f02 <xQueueGenericSend+0xea>
 8004efe:	2f02      	cmp	r7, #2
 8004f00:	d1b7      	bne.n	8004e72 <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f02:	463a      	mov	r2, r7
 8004f04:	4649      	mov	r1, r9
 8004f06:	4620      	mov	r0, r4
 8004f08:	f7ff fea4 	bl	8004c54 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f0e:	b11b      	cbz	r3, 8004f18 <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f10:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004f14:	f000 fcec 	bl	80058f0 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8004f18:	b138      	cbz	r0, 8004f2a <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 8004f1a:	4b19      	ldr	r3, [pc, #100]	; (8004f80 <xQueueGenericSend+0x168>)
 8004f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	f3bf 8f4f 	dsb	sy
 8004f26:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004f2a:	f7ff fc95 	bl	8004858 <vPortExitCritical>
				return pdPASS;
 8004f2e:	2001      	movs	r0, #1
}
 8004f30:	b004      	add	sp, #16
 8004f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8004f36:	4620      	mov	r0, r4
 8004f38:	f7ff fed4 	bl	8004ce4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f3c:	f000 fbae 	bl	800569c <xTaskResumeAll>
 8004f40:	e7d6      	b.n	8004ef0 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 8004f42:	4620      	mov	r0, r4
 8004f44:	f7ff fece 	bl	8004ce4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f48:	f000 fba8 	bl	800569c <xTaskResumeAll>
 8004f4c:	e795      	b.n	8004e7a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f4e:	2f02      	cmp	r7, #2
 8004f50:	d102      	bne.n	8004f58 <xQueueGenericSend+0x140>
 8004f52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d10a      	bne.n	8004f6e <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f58:	f000 fd5c 	bl	8005a14 <xTaskGetSchedulerState>
 8004f5c:	2800      	cmp	r0, #0
 8004f5e:	f43f af7b 	beq.w	8004e58 <xQueueGenericSend+0x40>
 8004f62:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8004f64:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8004f68:	f8df a014 	ldr.w	sl, [pc, #20]	; 8004f80 <xQueueGenericSend+0x168>
 8004f6c:	e7c1      	b.n	8004ef2 <xQueueGenericSend+0xda>
 8004f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f72:	f383 8811 	msr	BASEPRI, r3
 8004f76:	f3bf 8f6f 	isb	sy
 8004f7a:	f3bf 8f4f 	dsb	sy
 8004f7e:	e7fe      	b.n	8004f7e <xQueueGenericSend+0x166>
 8004f80:	e000ed04 	.word	0xe000ed04

08004f84 <xQueueGenericSendFromISR>:
{
 8004f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f88:	4688      	mov	r8, r1
 8004f8a:	4691      	mov	r9, r2
 8004f8c:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8004f8e:	4604      	mov	r4, r0
 8004f90:	b940      	cbnz	r0, 8004fa4 <xQueueGenericSendFromISR+0x20>
 8004f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f96:	f383 8811 	msr	BASEPRI, r3
 8004f9a:	f3bf 8f6f 	isb	sy
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	e7fe      	b.n	8004fa2 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fa4:	bb09      	cbnz	r1, 8004fea <xQueueGenericSendFromISR+0x66>
 8004fa6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004fa8:	b1fb      	cbz	r3, 8004fea <xQueueGenericSendFromISR+0x66>
 8004faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fae:	f383 8811 	msr	BASEPRI, r3
 8004fb2:	f3bf 8f6f 	isb	sy
 8004fb6:	f3bf 8f4f 	dsb	sy
 8004fba:	e7fe      	b.n	8004fba <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fbc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004fc0:	f000 fc96 	bl	80058f0 <xTaskRemoveFromEventList>
 8004fc4:	2800      	cmp	r0, #0
 8004fc6:	d034      	beq.n	8005032 <xQueueGenericSendFromISR+0xae>
							if( pxHigherPriorityTaskWoken != NULL )
 8004fc8:	f1b9 0f00 	cmp.w	r9, #0
 8004fcc:	d031      	beq.n	8005032 <xQueueGenericSendFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004fce:	2001      	movs	r0, #1
 8004fd0:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 8004fd4:	f386 8811 	msr	BASEPRI, r6
}
 8004fd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004fdc:	3501      	adds	r5, #1
 8004fde:	b26d      	sxtb	r5, r5
 8004fe0:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8004fe4:	e025      	b.n	8005032 <xQueueGenericSendFromISR+0xae>
			xReturn = errQUEUE_FULL;
 8004fe6:	2000      	movs	r0, #0
 8004fe8:	e7f4      	b.n	8004fd4 <xQueueGenericSendFromISR+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fea:	2f02      	cmp	r7, #2
 8004fec:	d102      	bne.n	8004ff4 <xQueueGenericSendFromISR+0x70>
 8004fee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d120      	bne.n	8005036 <xQueueGenericSendFromISR+0xb2>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ff4:	f7ff fd16 	bl	8004a24 <vPortValidateInterruptPriority>
	__asm volatile
 8004ff8:	f3ef 8611 	mrs	r6, BASEPRI
 8004ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005000:	f383 8811 	msr	BASEPRI, r3
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800500c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800500e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005010:	429a      	cmp	r2, r3
 8005012:	d301      	bcc.n	8005018 <xQueueGenericSendFromISR+0x94>
 8005014:	2f02      	cmp	r7, #2
 8005016:	d1e6      	bne.n	8004fe6 <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 8005018:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800501c:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 800501e:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005020:	4641      	mov	r1, r8
 8005022:	4620      	mov	r0, r4
 8005024:	f7ff fe16 	bl	8004c54 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8005028:	1c6b      	adds	r3, r5, #1
 800502a:	d1d7      	bne.n	8004fdc <xQueueGenericSendFromISR+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800502c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1c4      	bne.n	8004fbc <xQueueGenericSendFromISR+0x38>
			xReturn = pdPASS;
 8005032:	2001      	movs	r0, #1
 8005034:	e7ce      	b.n	8004fd4 <xQueueGenericSendFromISR+0x50>
	__asm volatile
 8005036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	e7fe      	b.n	8005046 <xQueueGenericSendFromISR+0xc2>

08005048 <xQueueGenericReceive>:
{
 8005048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800504c:	4688      	mov	r8, r1
 800504e:	9201      	str	r2, [sp, #4]
 8005050:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 8005052:	4604      	mov	r4, r0
 8005054:	b940      	cbnz	r0, 8005068 <xQueueGenericReceive+0x20>
 8005056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505a:	f383 8811 	msr	BASEPRI, r3
 800505e:	f3bf 8f6f 	isb	sy
 8005062:	f3bf 8f4f 	dsb	sy
 8005066:	e7fe      	b.n	8005066 <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005068:	2900      	cmp	r1, #0
 800506a:	f040 80a5 	bne.w	80051b8 <xQueueGenericReceive+0x170>
 800506e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 80a1 	beq.w	80051b8 <xQueueGenericReceive+0x170>
 8005076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507a:	f383 8811 	msr	BASEPRI, r3
 800507e:	f3bf 8f6f 	isb	sy
 8005082:	f3bf 8f4f 	dsb	sy
 8005086:	e7fe      	b.n	8005086 <xQueueGenericReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005088:	9e01      	ldr	r6, [sp, #4]
 800508a:	2e00      	cmp	r6, #0
 800508c:	f000 809a 	beq.w	80051c4 <xQueueGenericReceive+0x17c>
 8005090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005094:	f383 8811 	msr	BASEPRI, r3
 8005098:	f3bf 8f6f 	isb	sy
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	e7fe      	b.n	80050a0 <xQueueGenericReceive+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80050a4:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d06d      	beq.n	8005186 <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050aa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80050ae:	e05f      	b.n	8005170 <xQueueGenericReceive+0x128>
				if( xTicksToWait == ( TickType_t ) 0 )
 80050b0:	9d01      	ldr	r5, [sp, #4]
 80050b2:	b91d      	cbnz	r5, 80050bc <xQueueGenericReceive+0x74>
					taskEXIT_CRITICAL();
 80050b4:	f7ff fbd0 	bl	8004858 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80050b8:	4628      	mov	r0, r5
 80050ba:	e067      	b.n	800518c <xQueueGenericReceive+0x144>
				else if( xEntryTimeSet == pdFALSE )
 80050bc:	b916      	cbnz	r6, 80050c4 <xQueueGenericReceive+0x7c>
					vTaskSetTimeOutState( &xTimeOut );
 80050be:	a802      	add	r0, sp, #8
 80050c0:	f000 fc58 	bl	8005974 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 80050c4:	f7ff fbc8 	bl	8004858 <vPortExitCritical>
		vTaskSuspendAll();
 80050c8:	f000 fa40 	bl	800554c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050cc:	f7ff fba2 	bl	8004814 <vPortEnterCritical>
 80050d0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80050d4:	2bff      	cmp	r3, #255	; 0xff
 80050d6:	bf08      	it	eq
 80050d8:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 80050dc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80050e0:	2bff      	cmp	r3, #255	; 0xff
 80050e2:	bf08      	it	eq
 80050e4:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 80050e8:	f7ff fbb6 	bl	8004858 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050ec:	a901      	add	r1, sp, #4
 80050ee:	a802      	add	r0, sp, #8
 80050f0:	f000 fc50 	bl	8005994 <xTaskCheckForTimeOut>
 80050f4:	2800      	cmp	r0, #0
 80050f6:	d152      	bne.n	800519e <xQueueGenericReceive+0x156>
	taskENTER_CRITICAL();
 80050f8:	f7ff fb8c 	bl	8004814 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80050fc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 80050fe:	f7ff fbab 	bl	8004858 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005102:	2d00      	cmp	r5, #0
 8005104:	d145      	bne.n	8005192 <xQueueGenericReceive+0x14a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	b933      	cbnz	r3, 8005118 <xQueueGenericReceive+0xd0>
						taskENTER_CRITICAL();
 800510a:	f7ff fb83 	bl	8004814 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800510e:	6860      	ldr	r0, [r4, #4]
 8005110:	f000 fc90 	bl	8005a34 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8005114:	f7ff fba0 	bl	8004858 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005118:	9901      	ldr	r1, [sp, #4]
 800511a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800511e:	f000 fbcd 	bl	80058bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005122:	4620      	mov	r0, r4
 8005124:	f7ff fdde 	bl	8004ce4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005128:	f000 fab8 	bl	800569c <xTaskResumeAll>
 800512c:	b938      	cbnz	r0, 800513e <xQueueGenericReceive+0xf6>
					portYIELD_WITHIN_API();
 800512e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005132:	f8ca 3000 	str.w	r3, [sl]
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	f3bf 8f6f 	isb	sy
 800513e:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8005140:	f7ff fb68 	bl	8004814 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005144:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005146:	2d00      	cmp	r5, #0
 8005148:	d0b2      	beq.n	80050b0 <xQueueGenericReceive+0x68>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800514a:	4641      	mov	r1, r8
 800514c:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800514e:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005150:	f7ff fdb3 	bl	8004cba <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8005154:	f1b9 0f00 	cmp.w	r9, #0
 8005158:	d1a3      	bne.n	80050a2 <xQueueGenericReceive+0x5a>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800515a:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800515c:	3d01      	subs	r5, #1
 800515e:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005160:	b913      	cbnz	r3, 8005168 <xQueueGenericReceive+0x120>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005162:	f000 fcfd 	bl	8005b60 <pvTaskIncrementMutexHeldCount>
 8005166:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005168:	6923      	ldr	r3, [r4, #16]
 800516a:	b163      	cbz	r3, 8005186 <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800516c:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005170:	f000 fbbe 	bl	80058f0 <xTaskRemoveFromEventList>
 8005174:	b138      	cbz	r0, 8005186 <xQueueGenericReceive+0x13e>
							queueYIELD_IF_USING_PREEMPTION();
 8005176:	4b15      	ldr	r3, [pc, #84]	; (80051cc <xQueueGenericReceive+0x184>)
 8005178:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	f3bf 8f4f 	dsb	sy
 8005182:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005186:	f7ff fb67 	bl	8004858 <vPortExitCritical>
				return pdPASS;
 800518a:	2001      	movs	r0, #1
}
 800518c:	b004      	add	sp, #16
 800518e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8005192:	4620      	mov	r0, r4
 8005194:	f7ff fda6 	bl	8004ce4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005198:	f000 fa80 	bl	800569c <xTaskResumeAll>
 800519c:	e7cf      	b.n	800513e <xQueueGenericReceive+0xf6>
			prvUnlockQueue( pxQueue );
 800519e:	4620      	mov	r0, r4
 80051a0:	f7ff fda0 	bl	8004ce4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051a4:	f000 fa7a 	bl	800569c <xTaskResumeAll>
	taskENTER_CRITICAL();
 80051a8:	f7ff fb34 	bl	8004814 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80051ac:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 80051ae:	f7ff fb53 	bl	8004858 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051b2:	2d00      	cmp	r5, #0
 80051b4:	d1c3      	bne.n	800513e <xQueueGenericReceive+0xf6>
 80051b6:	e77f      	b.n	80050b8 <xQueueGenericReceive+0x70>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051b8:	f000 fc2c 	bl	8005a14 <xTaskGetSchedulerState>
 80051bc:	2800      	cmp	r0, #0
 80051be:	f43f af63 	beq.w	8005088 <xQueueGenericReceive+0x40>
 80051c2:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80051c4:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 80051c6:	f8df a004 	ldr.w	sl, [pc, #4]	; 80051cc <xQueueGenericReceive+0x184>
 80051ca:	e7b9      	b.n	8005140 <xQueueGenericReceive+0xf8>
 80051cc:	e000ed04 	.word	0xe000ed04

080051d0 <xQueueReceiveFromISR>:
{
 80051d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051d4:	4689      	mov	r9, r1
 80051d6:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 80051d8:	4605      	mov	r5, r0
 80051da:	b940      	cbnz	r0, 80051ee <xQueueReceiveFromISR+0x1e>
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	e7fe      	b.n	80051ec <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051ee:	bb71      	cbnz	r1, 800524e <xQueueReceiveFromISR+0x7e>
 80051f0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80051f2:	b363      	cbz	r3, 800524e <xQueueReceiveFromISR+0x7e>
 80051f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	e7fe      	b.n	8005204 <xQueueReceiveFromISR+0x34>
			const int8_t cRxLock = pxQueue->cRxLock;
 8005206:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800520a:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 800520c:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800520e:	4628      	mov	r0, r5
 8005210:	f7ff fd53 	bl	8004cba <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8005214:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 8005216:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8005218:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800521a:	d113      	bne.n	8005244 <xQueueReceiveFromISR+0x74>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800521c:	692b      	ldr	r3, [r5, #16]
 800521e:	b90b      	cbnz	r3, 8005224 <xQueueReceiveFromISR+0x54>
			xReturn = pdPASS;
 8005220:	2001      	movs	r0, #1
 8005222:	e00b      	b.n	800523c <xQueueReceiveFromISR+0x6c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005224:	f105 0010 	add.w	r0, r5, #16
 8005228:	f000 fb62 	bl	80058f0 <xTaskRemoveFromEventList>
 800522c:	2800      	cmp	r0, #0
 800522e:	d0f7      	beq.n	8005220 <xQueueReceiveFromISR+0x50>
						if( pxHigherPriorityTaskWoken != NULL )
 8005230:	f1b8 0f00 	cmp.w	r8, #0
 8005234:	d0f4      	beq.n	8005220 <xQueueReceiveFromISR+0x50>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005236:	2001      	movs	r0, #1
 8005238:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800523c:	f387 8811 	msr	BASEPRI, r7
}
 8005240:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005244:	3601      	adds	r6, #1
 8005246:	b276      	sxtb	r6, r6
 8005248:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 800524c:	e7e8      	b.n	8005220 <xQueueReceiveFromISR+0x50>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800524e:	f7ff fbe9 	bl	8004a24 <vPortValidateInterruptPriority>
	__asm volatile
 8005252:	f3ef 8711 	mrs	r7, BASEPRI
 8005256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525a:	f383 8811 	msr	BASEPRI, r3
 800525e:	f3bf 8f6f 	isb	sy
 8005262:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005266:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005268:	2c00      	cmp	r4, #0
 800526a:	d1cc      	bne.n	8005206 <xQueueReceiveFromISR+0x36>
			xReturn = pdFAIL;
 800526c:	4620      	mov	r0, r4
 800526e:	e7e5      	b.n	800523c <xQueueReceiveFromISR+0x6c>

08005270 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005270:	4a06      	ldr	r2, [pc, #24]	; (800528c <prvResetNextTaskUnblockTime+0x1c>)
 8005272:	6813      	ldr	r3, [r2, #0]
 8005274:	6819      	ldr	r1, [r3, #0]
 8005276:	4b06      	ldr	r3, [pc, #24]	; (8005290 <prvResetNextTaskUnblockTime+0x20>)
 8005278:	b919      	cbnz	r1, 8005282 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800527a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800527e:	601a      	str	r2, [r3, #0]
 8005280:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005282:	6812      	ldr	r2, [r2, #0]
 8005284:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005286:	68d2      	ldr	r2, [r2, #12]
 8005288:	6852      	ldr	r2, [r2, #4]
 800528a:	e7f8      	b.n	800527e <prvResetNextTaskUnblockTime+0xe>
 800528c:	20003e68 	.word	0x20003e68
 8005290:	20003f40 	.word	0x20003f40

08005294 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005296:	4b1b      	ldr	r3, [pc, #108]	; (8005304 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005298:	4e1b      	ldr	r6, [pc, #108]	; (8005308 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800529a:	681d      	ldr	r5, [r3, #0]
{
 800529c:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800529e:	6830      	ldr	r0, [r6, #0]
 80052a0:	3004      	adds	r0, #4
{
 80052a2:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052a4:	f7ff fa47 	bl	8004736 <uxListRemove>
 80052a8:	4633      	mov	r3, r6
 80052aa:	b940      	cbnz	r0, 80052be <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80052ac:	6831      	ldr	r1, [r6, #0]
 80052ae:	4e17      	ldr	r6, [pc, #92]	; (800530c <prvAddCurrentTaskToDelayedList+0x78>)
 80052b0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80052b2:	6832      	ldr	r2, [r6, #0]
 80052b4:	2001      	movs	r0, #1
 80052b6:	4088      	lsls	r0, r1
 80052b8:	ea22 0200 	bic.w	r2, r2, r0
 80052bc:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80052be:	1c62      	adds	r2, r4, #1
 80052c0:	d107      	bne.n	80052d2 <prvAddCurrentTaskToDelayedList+0x3e>
 80052c2:	b137      	cbz	r7, 80052d2 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052c4:	6819      	ldr	r1, [r3, #0]
 80052c6:	4812      	ldr	r0, [pc, #72]	; (8005310 <prvAddCurrentTaskToDelayedList+0x7c>)
 80052c8:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80052ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052ce:	f7ff ba0f 	b.w	80046f0 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80052d2:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80052d4:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 80052d6:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80052d8:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80052da:	d907      	bls.n	80052ec <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052dc:	4a0d      	ldr	r2, [pc, #52]	; (8005314 <prvAddCurrentTaskToDelayedList+0x80>)
 80052de:	6810      	ldr	r0, [r2, #0]
 80052e0:	6819      	ldr	r1, [r3, #0]
}
 80052e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052e6:	3104      	adds	r1, #4
 80052e8:	f7ff ba0e 	b.w	8004708 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052ec:	4a0a      	ldr	r2, [pc, #40]	; (8005318 <prvAddCurrentTaskToDelayedList+0x84>)
 80052ee:	6810      	ldr	r0, [r2, #0]
 80052f0:	6819      	ldr	r1, [r3, #0]
 80052f2:	3104      	adds	r1, #4
 80052f4:	f7ff fa08 	bl	8004708 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80052f8:	4b08      	ldr	r3, [pc, #32]	; (800531c <prvAddCurrentTaskToDelayedList+0x88>)
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80052fe:	bf38      	it	cc
 8005300:	601c      	strcc	r4, [r3, #0]
 8005302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005304:	20003f88 	.word	0x20003f88
 8005308:	20003e64 	.word	0x20003e64
 800530c:	20003f10 	.word	0x20003f10
 8005310:	20003f60 	.word	0x20003f60
 8005314:	20003e6c 	.word	0x20003e6c
 8005318:	20003e68 	.word	0x20003e68
 800531c:	20003f40 	.word	0x20003f40

08005320 <prvTaskIsTaskSuspended.part.0>:
	__asm volatile
 8005320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	e7fe      	b.n	8005330 <prvTaskIsTaskSuspended.part.0+0x10>
	...

08005334 <xTaskCreate>:
	{
 8005334:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005338:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 800533c:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800533e:	4650      	mov	r0, sl
	{
 8005340:	460f      	mov	r7, r1
 8005342:	4699      	mov	r9, r3
 8005344:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005346:	f7ff fbbf 	bl	8004ac8 <pvPortMalloc>
			if( pxStack != NULL )
 800534a:	4605      	mov	r5, r0
 800534c:	2800      	cmp	r0, #0
 800534e:	f000 8096 	beq.w	800547e <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005352:	2054      	movs	r0, #84	; 0x54
 8005354:	f7ff fbb8 	bl	8004ac8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8005358:	4604      	mov	r4, r0
 800535a:	2800      	cmp	r0, #0
 800535c:	f000 808c 	beq.w	8005478 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005360:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8005364:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005366:	4455      	add	r5, sl
 8005368:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800536a:	f025 0a07 	bic.w	sl, r5, #7
 800536e:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8005372:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005374:	7859      	ldrb	r1, [r3, #1]
 8005376:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 800537a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800537e:	b109      	cbz	r1, 8005384 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005380:	42bb      	cmp	r3, r7
 8005382:	d1f7      	bne.n	8005374 <xTaskCreate+0x40>
 8005384:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005386:	2d06      	cmp	r5, #6
 8005388:	bf28      	it	cs
 800538a:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800538c:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005390:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8005392:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8005394:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005396:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005398:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 800539c:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80053a0:	f7ff f9a3 	bl	80046ea <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053a4:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053a8:	f104 0018 	add.w	r0, r4, #24
 80053ac:	f7ff f99d 	bl	80046ea <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80053b0:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053b4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053b6:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80053b8:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80053ba:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053be:	464a      	mov	r2, r9
 80053c0:	4641      	mov	r1, r8
 80053c2:	4650      	mov	r0, sl
 80053c4:	f7ff f9fa 	bl	80047bc <pxPortInitialiseStack>
 80053c8:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80053ca:	b106      	cbz	r6, 80053ce <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80053cc:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 80053ce:	f7ff fa21 	bl	8004814 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80053d2:	4b32      	ldr	r3, [pc, #200]	; (800549c <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 80053d4:	4e32      	ldr	r6, [pc, #200]	; (80054a0 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80054cc <xTaskCreate+0x198>
 80053dc:	3201      	adds	r2, #1
 80053de:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80053e0:	6835      	ldr	r5, [r6, #0]
 80053e2:	2d00      	cmp	r5, #0
 80053e4:	d14e      	bne.n	8005484 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 80053e6:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d11d      	bne.n	800542a <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80053ee:	eb08 0005 	add.w	r0, r8, r5
 80053f2:	3514      	adds	r5, #20
 80053f4:	f7ff f96e 	bl	80046d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053f8:	2d8c      	cmp	r5, #140	; 0x8c
 80053fa:	d1f8      	bne.n	80053ee <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 80053fc:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80054d0 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8005400:	4d28      	ldr	r5, [pc, #160]	; (80054a4 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8005402:	4648      	mov	r0, r9
 8005404:	f7ff f966 	bl	80046d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005408:	4628      	mov	r0, r5
 800540a:	f7ff f963 	bl	80046d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800540e:	4826      	ldr	r0, [pc, #152]	; (80054a8 <xTaskCreate+0x174>)
 8005410:	f7ff f960 	bl	80046d4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8005414:	4825      	ldr	r0, [pc, #148]	; (80054ac <xTaskCreate+0x178>)
 8005416:	f7ff f95d 	bl	80046d4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800541a:	4825      	ldr	r0, [pc, #148]	; (80054b0 <xTaskCreate+0x17c>)
 800541c:	f7ff f95a 	bl	80046d4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8005420:	4b24      	ldr	r3, [pc, #144]	; (80054b4 <xTaskCreate+0x180>)
 8005422:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005426:	4b24      	ldr	r3, [pc, #144]	; (80054b8 <xTaskCreate+0x184>)
 8005428:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800542a:	4a24      	ldr	r2, [pc, #144]	; (80054bc <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 800542c:	4924      	ldr	r1, [pc, #144]	; (80054c0 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 800542e:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8005430:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8005432:	3301      	adds	r3, #1
 8005434:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8005436:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005438:	2501      	movs	r5, #1
 800543a:	fa05 f302 	lsl.w	r3, r5, r2
 800543e:	4303      	orrs	r3, r0
 8005440:	2014      	movs	r0, #20
 8005442:	600b      	str	r3, [r1, #0]
 8005444:	fb00 8002 	mla	r0, r0, r2, r8
 8005448:	4639      	mov	r1, r7
 800544a:	f7ff f951 	bl	80046f0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800544e:	f7ff fa03 	bl	8004858 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8005452:	4b1c      	ldr	r3, [pc, #112]	; (80054c4 <xTaskCreate+0x190>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	b163      	cbz	r3, 8005472 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005458:	6833      	ldr	r3, [r6, #0]
 800545a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800545c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800545e:	429a      	cmp	r2, r3
 8005460:	d207      	bcs.n	8005472 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8005462:	4b19      	ldr	r3, [pc, #100]	; (80054c8 <xTaskCreate+0x194>)
 8005464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005468:	601a      	str	r2, [r3, #0]
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	f3bf 8f6f 	isb	sy
	}
 8005472:	4628      	mov	r0, r5
 8005474:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8005478:	4628      	mov	r0, r5
 800547a:	f7ff fbb3 	bl	8004be4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800547e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005482:	e7f6      	b.n	8005472 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8005484:	4b0f      	ldr	r3, [pc, #60]	; (80054c4 <xTaskCreate+0x190>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1ce      	bne.n	800542a <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800548c:	6833      	ldr	r3, [r6, #0]
 800548e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005490:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005492:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8005494:	bf98      	it	ls
 8005496:	6034      	strls	r4, [r6, #0]
 8005498:	e7c7      	b.n	800542a <xTaskCreate+0xf6>
 800549a:	bf00      	nop
 800549c:	20003efc 	.word	0x20003efc
 80054a0:	20003e64 	.word	0x20003e64
 80054a4:	20003f28 	.word	0x20003f28
 80054a8:	20003f48 	.word	0x20003f48
 80054ac:	20003f74 	.word	0x20003f74
 80054b0:	20003f60 	.word	0x20003f60
 80054b4:	20003e68 	.word	0x20003e68
 80054b8:	20003e6c 	.word	0x20003e6c
 80054bc:	20003f0c 	.word	0x20003f0c
 80054c0:	20003f10 	.word	0x20003f10
 80054c4:	20003f5c 	.word	0x20003f5c
 80054c8:	e000ed04 	.word	0xe000ed04
 80054cc:	20003e70 	.word	0x20003e70
 80054d0:	20003f14 	.word	0x20003f14

080054d4 <vTaskStartScheduler>:
{
 80054d4:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80054d6:	4b17      	ldr	r3, [pc, #92]	; (8005534 <vTaskStartScheduler+0x60>)
 80054d8:	9301      	str	r3, [sp, #4]
 80054da:	2400      	movs	r4, #0
 80054dc:	9400      	str	r4, [sp, #0]
 80054de:	4623      	mov	r3, r4
 80054e0:	2280      	movs	r2, #128	; 0x80
 80054e2:	4915      	ldr	r1, [pc, #84]	; (8005538 <vTaskStartScheduler+0x64>)
 80054e4:	4815      	ldr	r0, [pc, #84]	; (800553c <vTaskStartScheduler+0x68>)
 80054e6:	f7ff ff25 	bl	8005334 <xTaskCreate>
	if( xReturn == pdPASS )
 80054ea:	2801      	cmp	r0, #1
 80054ec:	d114      	bne.n	8005518 <vTaskStartScheduler+0x44>
 80054ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80054fe:	4b10      	ldr	r3, [pc, #64]	; (8005540 <vTaskStartScheduler+0x6c>)
 8005500:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005504:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005506:	4b0f      	ldr	r3, [pc, #60]	; (8005544 <vTaskStartScheduler+0x70>)
 8005508:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800550a:	4b0f      	ldr	r3, [pc, #60]	; (8005548 <vTaskStartScheduler+0x74>)
 800550c:	601c      	str	r4, [r3, #0]
}
 800550e:	b002      	add	sp, #8
 8005510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8005514:	f7ff ba10 	b.w	8004938 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005518:	3001      	adds	r0, #1
 800551a:	d108      	bne.n	800552e <vTaskStartScheduler+0x5a>
 800551c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005520:	f383 8811 	msr	BASEPRI, r3
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	e7fe      	b.n	800552c <vTaskStartScheduler+0x58>
}
 800552e:	b002      	add	sp, #8
 8005530:	bd10      	pop	{r4, pc}
 8005532:	bf00      	nop
 8005534:	20003f3c 	.word	0x20003f3c
 8005538:	08009c20 	.word	0x08009c20
 800553c:	080057d5 	.word	0x080057d5
 8005540:	20003f40 	.word	0x20003f40
 8005544:	20003f5c 	.word	0x20003f5c
 8005548:	20003f88 	.word	0x20003f88

0800554c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800554c:	4a02      	ldr	r2, [pc, #8]	; (8005558 <vTaskSuspendAll+0xc>)
 800554e:	6813      	ldr	r3, [r2, #0]
 8005550:	3301      	adds	r3, #1
 8005552:	6013      	str	r3, [r2, #0]
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	20003f08 	.word	0x20003f08

0800555c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800555c:	4b01      	ldr	r3, [pc, #4]	; (8005564 <xTaskGetTickCount+0x8>)
 800555e:	6818      	ldr	r0, [r3, #0]
}
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	20003f88 	.word	0x20003f88

08005568 <xTaskGetTickCountFromISR>:
{
 8005568:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800556a:	f7ff fa5b 	bl	8004a24 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 800556e:	4b01      	ldr	r3, [pc, #4]	; (8005574 <xTaskGetTickCountFromISR+0xc>)
 8005570:	6818      	ldr	r0, [r3, #0]
}
 8005572:	bd08      	pop	{r3, pc}
 8005574:	20003f88 	.word	0x20003f88

08005578 <xTaskIncrementTick>:
{
 8005578:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800557c:	4b3c      	ldr	r3, [pc, #240]	; (8005670 <xTaskIncrementTick+0xf8>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d153      	bne.n	800562c <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8005584:	4b3b      	ldr	r3, [pc, #236]	; (8005674 <xTaskIncrementTick+0xfc>)
 8005586:	681c      	ldr	r4, [r3, #0]
 8005588:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800558a:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 800558c:	b9bc      	cbnz	r4, 80055be <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800558e:	4b3a      	ldr	r3, [pc, #232]	; (8005678 <xTaskIncrementTick+0x100>)
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	6812      	ldr	r2, [r2, #0]
 8005594:	b142      	cbz	r2, 80055a8 <xTaskIncrementTick+0x30>
 8005596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559a:	f383 8811 	msr	BASEPRI, r3
 800559e:	f3bf 8f6f 	isb	sy
 80055a2:	f3bf 8f4f 	dsb	sy
 80055a6:	e7fe      	b.n	80055a6 <xTaskIncrementTick+0x2e>
 80055a8:	4a34      	ldr	r2, [pc, #208]	; (800567c <xTaskIncrementTick+0x104>)
 80055aa:	6819      	ldr	r1, [r3, #0]
 80055ac:	6810      	ldr	r0, [r2, #0]
 80055ae:	6018      	str	r0, [r3, #0]
 80055b0:	6011      	str	r1, [r2, #0]
 80055b2:	4a33      	ldr	r2, [pc, #204]	; (8005680 <xTaskIncrementTick+0x108>)
 80055b4:	6813      	ldr	r3, [r2, #0]
 80055b6:	3301      	adds	r3, #1
 80055b8:	6013      	str	r3, [r2, #0]
 80055ba:	f7ff fe59 	bl	8005270 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80055be:	4d31      	ldr	r5, [pc, #196]	; (8005684 <xTaskIncrementTick+0x10c>)
 80055c0:	4f31      	ldr	r7, [pc, #196]	; (8005688 <xTaskIncrementTick+0x110>)
 80055c2:	682b      	ldr	r3, [r5, #0]
 80055c4:	429c      	cmp	r4, r3
 80055c6:	f04f 0b00 	mov.w	fp, #0
 80055ca:	d33e      	bcc.n	800564a <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055cc:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8005678 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 80055d0:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8005698 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055d4:	f8d8 2000 	ldr.w	r2, [r8]
 80055d8:	6812      	ldr	r2, [r2, #0]
 80055da:	bb72      	cbnz	r2, 800563a <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055e0:	602a      	str	r2, [r5, #0]
					break;
 80055e2:	e032      	b.n	800564a <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055e4:	f106 0a04 	add.w	sl, r6, #4
 80055e8:	4650      	mov	r0, sl
 80055ea:	f7ff f8a4 	bl	8004736 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80055ee:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80055f0:	b119      	cbz	r1, 80055fa <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055f2:	f106 0018 	add.w	r0, r6, #24
 80055f6:	f7ff f89e 	bl	8004736 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055fa:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80055fc:	f8d9 3000 	ldr.w	r3, [r9]
 8005600:	2201      	movs	r2, #1
 8005602:	fa02 f100 	lsl.w	r1, r2, r0
 8005606:	4319      	orrs	r1, r3
 8005608:	4b20      	ldr	r3, [pc, #128]	; (800568c <xTaskIncrementTick+0x114>)
 800560a:	f8c9 1000 	str.w	r1, [r9]
 800560e:	f04f 0e14 	mov.w	lr, #20
 8005612:	4651      	mov	r1, sl
 8005614:	fb0e 3000 	mla	r0, lr, r0, r3
 8005618:	f7ff f86a 	bl	80046f0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800561c:	6838      	ldr	r0, [r7, #0]
 800561e:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8005620:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8005622:	4291      	cmp	r1, r2
 8005624:	bf28      	it	cs
 8005626:	f04f 0b01 	movcs.w	fp, #1
 800562a:	e7d3      	b.n	80055d4 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 800562c:	4a18      	ldr	r2, [pc, #96]	; (8005690 <xTaskIncrementTick+0x118>)
 800562e:	6813      	ldr	r3, [r2, #0]
 8005630:	3301      	adds	r3, #1
 8005632:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8005634:	f04f 0b00 	mov.w	fp, #0
 8005638:	e011      	b.n	800565e <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800563a:	f8d8 2000 	ldr.w	r2, [r8]
 800563e:	68d2      	ldr	r2, [r2, #12]
 8005640:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005642:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8005644:	428c      	cmp	r4, r1
 8005646:	d2cd      	bcs.n	80055e4 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8005648:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	4b0f      	ldr	r3, [pc, #60]	; (800568c <xTaskIncrementTick+0x114>)
 800564e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005650:	2214      	movs	r2, #20
 8005652:	434a      	muls	r2, r1
 8005654:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8005656:	2a02      	cmp	r2, #2
 8005658:	bf28      	it	cs
 800565a:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800565e:	4a0d      	ldr	r2, [pc, #52]	; (8005694 <xTaskIncrementTick+0x11c>)
 8005660:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8005662:	2a00      	cmp	r2, #0
 8005664:	bf18      	it	ne
 8005666:	f04f 0b01 	movne.w	fp, #1
}
 800566a:	4658      	mov	r0, fp
 800566c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005670:	20003f08 	.word	0x20003f08
 8005674:	20003f88 	.word	0x20003f88
 8005678:	20003e68 	.word	0x20003e68
 800567c:	20003e6c 	.word	0x20003e6c
 8005680:	20003f44 	.word	0x20003f44
 8005684:	20003f40 	.word	0x20003f40
 8005688:	20003e64 	.word	0x20003e64
 800568c:	20003e70 	.word	0x20003e70
 8005690:	20003f04 	.word	0x20003f04
 8005694:	20003f8c 	.word	0x20003f8c
 8005698:	20003f10 	.word	0x20003f10

0800569c <xTaskResumeAll>:
{
 800569c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80056a0:	4c31      	ldr	r4, [pc, #196]	; (8005768 <xTaskResumeAll+0xcc>)
 80056a2:	6823      	ldr	r3, [r4, #0]
 80056a4:	b943      	cbnz	r3, 80056b8 <xTaskResumeAll+0x1c>
 80056a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056aa:	f383 8811 	msr	BASEPRI, r3
 80056ae:	f3bf 8f6f 	isb	sy
 80056b2:	f3bf 8f4f 	dsb	sy
 80056b6:	e7fe      	b.n	80056b6 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80056b8:	f7ff f8ac 	bl	8004814 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80056bc:	6823      	ldr	r3, [r4, #0]
 80056be:	3b01      	subs	r3, #1
 80056c0:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056c2:	6824      	ldr	r4, [r4, #0]
 80056c4:	b12c      	cbz	r4, 80056d2 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80056c6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80056c8:	f7ff f8c6 	bl	8004858 <vPortExitCritical>
}
 80056cc:	4620      	mov	r0, r4
 80056ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80056d2:	4b26      	ldr	r3, [pc, #152]	; (800576c <xTaskResumeAll+0xd0>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d0f5      	beq.n	80056c6 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056da:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8005784 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 80056de:	4f24      	ldr	r7, [pc, #144]	; (8005770 <xTaskResumeAll+0xd4>)
 80056e0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8005788 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056e4:	f8d9 3000 	ldr.w	r3, [r9]
 80056e8:	b9e3      	cbnz	r3, 8005724 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 80056ea:	b10c      	cbz	r4, 80056f0 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 80056ec:	f7ff fdc0 	bl	8005270 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80056f0:	4d20      	ldr	r5, [pc, #128]	; (8005774 <xTaskResumeAll+0xd8>)
 80056f2:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80056f4:	b144      	cbz	r4, 8005708 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 80056f6:	4e20      	ldr	r6, [pc, #128]	; (8005778 <xTaskResumeAll+0xdc>)
 80056f8:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80056fa:	f7ff ff3d 	bl	8005578 <xTaskIncrementTick>
 80056fe:	b100      	cbz	r0, 8005702 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8005700:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005702:	3c01      	subs	r4, #1
 8005704:	d1f9      	bne.n	80056fa <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8005706:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8005708:	4b1b      	ldr	r3, [pc, #108]	; (8005778 <xTaskResumeAll+0xdc>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d0da      	beq.n	80056c6 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8005710:	4b1a      	ldr	r3, [pc, #104]	; (800577c <xTaskResumeAll+0xe0>)
 8005712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005716:	601a      	str	r2, [r3, #0]
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005720:	2401      	movs	r4, #1
 8005722:	e7d1      	b.n	80056c8 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005724:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8005728:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800572a:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800572c:	f104 0018 	add.w	r0, r4, #24
 8005730:	f7ff f801 	bl	8004736 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005734:	4630      	mov	r0, r6
 8005736:	f7fe fffe 	bl	8004736 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800573a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800573c:	6839      	ldr	r1, [r7, #0]
 800573e:	2501      	movs	r5, #1
 8005740:	fa05 f302 	lsl.w	r3, r5, r2
 8005744:	2014      	movs	r0, #20
 8005746:	430b      	orrs	r3, r1
 8005748:	fb00 8002 	mla	r0, r0, r2, r8
 800574c:	4631      	mov	r1, r6
 800574e:	603b      	str	r3, [r7, #0]
 8005750:	f7fe ffce 	bl	80046f0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005754:	4b0a      	ldr	r3, [pc, #40]	; (8005780 <xTaskResumeAll+0xe4>)
 8005756:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575c:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 800575e:	bf24      	itt	cs
 8005760:	4b05      	ldrcs	r3, [pc, #20]	; (8005778 <xTaskResumeAll+0xdc>)
 8005762:	601d      	strcs	r5, [r3, #0]
 8005764:	e7be      	b.n	80056e4 <xTaskResumeAll+0x48>
 8005766:	bf00      	nop
 8005768:	20003f08 	.word	0x20003f08
 800576c:	20003efc 	.word	0x20003efc
 8005770:	20003f10 	.word	0x20003f10
 8005774:	20003f04 	.word	0x20003f04
 8005778:	20003f8c 	.word	0x20003f8c
 800577c:	e000ed04 	.word	0xe000ed04
 8005780:	20003e64 	.word	0x20003e64
 8005784:	20003f48 	.word	0x20003f48
 8005788:	20003e70 	.word	0x20003e70

0800578c <vTaskDelay>:
	{
 800578c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800578e:	b940      	cbnz	r0, 80057a2 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8005790:	4b0e      	ldr	r3, [pc, #56]	; (80057cc <vTaskDelay+0x40>)
 8005792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005796:	601a      	str	r2, [r3, #0]
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	f3bf 8f6f 	isb	sy
 80057a0:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80057a2:	4b0b      	ldr	r3, [pc, #44]	; (80057d0 <vTaskDelay+0x44>)
 80057a4:	6819      	ldr	r1, [r3, #0]
 80057a6:	b141      	cbz	r1, 80057ba <vTaskDelay+0x2e>
 80057a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ac:	f383 8811 	msr	BASEPRI, r3
 80057b0:	f3bf 8f6f 	isb	sy
 80057b4:	f3bf 8f4f 	dsb	sy
 80057b8:	e7fe      	b.n	80057b8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80057ba:	f7ff fec7 	bl	800554c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80057be:	f7ff fd69 	bl	8005294 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80057c2:	f7ff ff6b 	bl	800569c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80057c6:	2800      	cmp	r0, #0
 80057c8:	d0e2      	beq.n	8005790 <vTaskDelay+0x4>
 80057ca:	bd08      	pop	{r3, pc}
 80057cc:	e000ed04 	.word	0xe000ed04
 80057d0:	20003f08 	.word	0x20003f08

080057d4 <prvIdleTask>:
{
 80057d4:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80057d6:	4e17      	ldr	r6, [pc, #92]	; (8005834 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057d8:	4c17      	ldr	r4, [pc, #92]	; (8005838 <prvIdleTask+0x64>)
 80057da:	6823      	ldr	r3, [r4, #0]
 80057dc:	b963      	cbnz	r3, 80057f8 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80057de:	4b17      	ldr	r3, [pc, #92]	; (800583c <prvIdleTask+0x68>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d9f8      	bls.n	80057d8 <prvIdleTask+0x4>
				taskYIELD();
 80057e6:	4b16      	ldr	r3, [pc, #88]	; (8005840 <prvIdleTask+0x6c>)
 80057e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ec:	601a      	str	r2, [r3, #0]
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	f3bf 8f6f 	isb	sy
 80057f6:	e7ef      	b.n	80057d8 <prvIdleTask+0x4>
			vTaskSuspendAll();
 80057f8:	f7ff fea8 	bl	800554c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80057fc:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 80057fe:	f7ff ff4d 	bl	800569c <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8005802:	2d00      	cmp	r5, #0
 8005804:	d0e9      	beq.n	80057da <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8005806:	f7ff f805 	bl	8004814 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800580a:	68f3      	ldr	r3, [r6, #12]
 800580c:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800580e:	1d28      	adds	r0, r5, #4
 8005810:	f7fe ff91 	bl	8004736 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8005814:	4a0b      	ldr	r2, [pc, #44]	; (8005844 <prvIdleTask+0x70>)
 8005816:	6813      	ldr	r3, [r2, #0]
 8005818:	3b01      	subs	r3, #1
 800581a:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800581c:	6823      	ldr	r3, [r4, #0]
 800581e:	3b01      	subs	r3, #1
 8005820:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8005822:	f7ff f819 	bl	8004858 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8005826:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8005828:	f7ff f9dc 	bl	8004be4 <vPortFree>
			vPortFree( pxTCB );
 800582c:	4628      	mov	r0, r5
 800582e:	f7ff f9d9 	bl	8004be4 <vPortFree>
 8005832:	e7d2      	b.n	80057da <prvIdleTask+0x6>
 8005834:	20003f74 	.word	0x20003f74
 8005838:	20003f00 	.word	0x20003f00
 800583c:	20003e70 	.word	0x20003e70
 8005840:	e000ed04 	.word	0xe000ed04
 8005844:	20003efc 	.word	0x20003efc

08005848 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005848:	4b17      	ldr	r3, [pc, #92]	; (80058a8 <vTaskSwitchContext+0x60>)
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	4b17      	ldr	r3, [pc, #92]	; (80058ac <vTaskSwitchContext+0x64>)
{
 800584e:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005850:	b112      	cbz	r2, 8005858 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8005852:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8005858:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800585a:	4b15      	ldr	r3, [pc, #84]	; (80058b0 <vTaskSwitchContext+0x68>)
 800585c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800585e:	fab3 f383 	clz	r3, r3
 8005862:	b2db      	uxtb	r3, r3
 8005864:	f1c3 031f 	rsb	r3, r3, #31
 8005868:	2214      	movs	r2, #20
 800586a:	4912      	ldr	r1, [pc, #72]	; (80058b4 <vTaskSwitchContext+0x6c>)
 800586c:	435a      	muls	r2, r3
 800586e:	1888      	adds	r0, r1, r2
 8005870:	588c      	ldr	r4, [r1, r2]
 8005872:	b944      	cbnz	r4, 8005886 <vTaskSwitchContext+0x3e>
	__asm volatile
 8005874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005878:	f383 8811 	msr	BASEPRI, r3
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	e7fe      	b.n	8005884 <vTaskSwitchContext+0x3c>
 8005886:	6844      	ldr	r4, [r0, #4]
 8005888:	3208      	adds	r2, #8
 800588a:	6864      	ldr	r4, [r4, #4]
 800588c:	6044      	str	r4, [r0, #4]
 800588e:	440a      	add	r2, r1
 8005890:	4294      	cmp	r4, r2
 8005892:	bf04      	itt	eq
 8005894:	6862      	ldreq	r2, [r4, #4]
 8005896:	6042      	streq	r2, [r0, #4]
 8005898:	2214      	movs	r2, #20
 800589a:	fb02 1303 	mla	r3, r2, r3, r1
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	68da      	ldr	r2, [r3, #12]
 80058a2:	4b05      	ldr	r3, [pc, #20]	; (80058b8 <vTaskSwitchContext+0x70>)
 80058a4:	e7d6      	b.n	8005854 <vTaskSwitchContext+0xc>
 80058a6:	bf00      	nop
 80058a8:	20003f08 	.word	0x20003f08
 80058ac:	20003f8c 	.word	0x20003f8c
 80058b0:	20003f10 	.word	0x20003f10
 80058b4:	20003e70 	.word	0x20003e70
 80058b8:	20003e64 	.word	0x20003e64

080058bc <vTaskPlaceOnEventList>:
{
 80058bc:	b510      	push	{r4, lr}
 80058be:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80058c0:	b940      	cbnz	r0, 80058d4 <vTaskPlaceOnEventList+0x18>
 80058c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c6:	f383 8811 	msr	BASEPRI, r3
 80058ca:	f3bf 8f6f 	isb	sy
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	e7fe      	b.n	80058d2 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058d4:	4b05      	ldr	r3, [pc, #20]	; (80058ec <vTaskPlaceOnEventList+0x30>)
 80058d6:	6819      	ldr	r1, [r3, #0]
 80058d8:	3118      	adds	r1, #24
 80058da:	f7fe ff15 	bl	8004708 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058de:	4620      	mov	r0, r4
 80058e0:	2101      	movs	r1, #1
}
 80058e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058e6:	f7ff bcd5 	b.w	8005294 <prvAddCurrentTaskToDelayedList>
 80058ea:	bf00      	nop
 80058ec:	20003e64 	.word	0x20003e64

080058f0 <xTaskRemoveFromEventList>:
{
 80058f0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80058f2:	68c3      	ldr	r3, [r0, #12]
 80058f4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80058f6:	b944      	cbnz	r4, 800590a <xTaskRemoveFromEventList+0x1a>
 80058f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fc:	f383 8811 	msr	BASEPRI, r3
 8005900:	f3bf 8f6f 	isb	sy
 8005904:	f3bf 8f4f 	dsb	sy
 8005908:	e7fe      	b.n	8005908 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800590a:	f104 0518 	add.w	r5, r4, #24
 800590e:	4628      	mov	r0, r5
 8005910:	f7fe ff11 	bl	8004736 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005914:	4b11      	ldr	r3, [pc, #68]	; (800595c <xTaskRemoveFromEventList+0x6c>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	b9e3      	cbnz	r3, 8005954 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800591a:	1d25      	adds	r5, r4, #4
 800591c:	4628      	mov	r0, r5
 800591e:	f7fe ff0a 	bl	8004736 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005922:	490f      	ldr	r1, [pc, #60]	; (8005960 <xTaskRemoveFromEventList+0x70>)
 8005924:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005926:	6808      	ldr	r0, [r1, #0]
 8005928:	2301      	movs	r3, #1
 800592a:	4093      	lsls	r3, r2
 800592c:	4303      	orrs	r3, r0
 800592e:	600b      	str	r3, [r1, #0]
 8005930:	4b0c      	ldr	r3, [pc, #48]	; (8005964 <xTaskRemoveFromEventList+0x74>)
 8005932:	2014      	movs	r0, #20
 8005934:	4629      	mov	r1, r5
 8005936:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800593a:	f7fe fed9 	bl	80046f0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800593e:	4b0a      	ldr	r3, [pc, #40]	; (8005968 <xTaskRemoveFromEventList+0x78>)
 8005940:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005946:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8005948:	bf83      	ittte	hi
 800594a:	4b08      	ldrhi	r3, [pc, #32]	; (800596c <xTaskRemoveFromEventList+0x7c>)
 800594c:	2001      	movhi	r0, #1
 800594e:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8005950:	2000      	movls	r0, #0
}
 8005952:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005954:	4629      	mov	r1, r5
 8005956:	4806      	ldr	r0, [pc, #24]	; (8005970 <xTaskRemoveFromEventList+0x80>)
 8005958:	e7ef      	b.n	800593a <xTaskRemoveFromEventList+0x4a>
 800595a:	bf00      	nop
 800595c:	20003f08 	.word	0x20003f08
 8005960:	20003f10 	.word	0x20003f10
 8005964:	20003e70 	.word	0x20003e70
 8005968:	20003e64 	.word	0x20003e64
 800596c:	20003f8c 	.word	0x20003f8c
 8005970:	20003f48 	.word	0x20003f48

08005974 <vTaskSetTimeOutState>:
{
 8005974:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 8005976:	b908      	cbnz	r0, 800597c <vTaskSetTimeOutState+0x8>
 8005978:	f7ff fcd2 	bl	8005320 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800597c:	4b03      	ldr	r3, [pc, #12]	; (800598c <vTaskSetTimeOutState+0x18>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005982:	4b03      	ldr	r3, [pc, #12]	; (8005990 <vTaskSetTimeOutState+0x1c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6043      	str	r3, [r0, #4]
 8005988:	bd08      	pop	{r3, pc}
 800598a:	bf00      	nop
 800598c:	20003f44 	.word	0x20003f44
 8005990:	20003f88 	.word	0x20003f88

08005994 <xTaskCheckForTimeOut>:
{
 8005994:	b538      	push	{r3, r4, r5, lr}
 8005996:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 8005998:	4604      	mov	r4, r0
 800599a:	b940      	cbnz	r0, 80059ae <xTaskCheckForTimeOut+0x1a>
 800599c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	e7fe      	b.n	80059ac <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80059ae:	b941      	cbnz	r1, 80059c2 <xTaskCheckForTimeOut+0x2e>
 80059b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	e7fe      	b.n	80059c0 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80059c2:	f7fe ff27 	bl	8004814 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80059c6:	4b0e      	ldr	r3, [pc, #56]	; (8005a00 <xTaskCheckForTimeOut+0x6c>)
 80059c8:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80059ca:	682b      	ldr	r3, [r5, #0]
 80059cc:	1c5a      	adds	r2, r3, #1
 80059ce:	d010      	beq.n	80059f2 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80059d0:	4a0c      	ldr	r2, [pc, #48]	; (8005a04 <xTaskCheckForTimeOut+0x70>)
 80059d2:	6820      	ldr	r0, [r4, #0]
 80059d4:	6812      	ldr	r2, [r2, #0]
 80059d6:	4290      	cmp	r0, r2
 80059d8:	6862      	ldr	r2, [r4, #4]
 80059da:	d001      	beq.n	80059e0 <xTaskCheckForTimeOut+0x4c>
 80059dc:	4291      	cmp	r1, r2
 80059de:	d20d      	bcs.n	80059fc <xTaskCheckForTimeOut+0x68>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80059e0:	1a88      	subs	r0, r1, r2
 80059e2:	4283      	cmp	r3, r0
 80059e4:	d90a      	bls.n	80059fc <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80059e6:	1a5b      	subs	r3, r3, r1
 80059e8:	4413      	add	r3, r2
 80059ea:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80059ec:	4620      	mov	r0, r4
 80059ee:	f7ff ffc1 	bl	8005974 <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 80059f2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80059f4:	f7fe ff30 	bl	8004858 <vPortExitCritical>
}
 80059f8:	4620      	mov	r0, r4
 80059fa:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 80059fc:	2401      	movs	r4, #1
 80059fe:	e7f9      	b.n	80059f4 <xTaskCheckForTimeOut+0x60>
 8005a00:	20003f88 	.word	0x20003f88
 8005a04:	20003f44 	.word	0x20003f44

08005a08 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8005a08:	4b01      	ldr	r3, [pc, #4]	; (8005a10 <vTaskMissedYield+0x8>)
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	601a      	str	r2, [r3, #0]
 8005a0e:	4770      	bx	lr
 8005a10:	20003f8c 	.word	0x20003f8c

08005a14 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8005a14:	4b05      	ldr	r3, [pc, #20]	; (8005a2c <xTaskGetSchedulerState+0x18>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	b133      	cbz	r3, 8005a28 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a1a:	4b05      	ldr	r3, [pc, #20]	; (8005a30 <xTaskGetSchedulerState+0x1c>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8005a20:	bf0c      	ite	eq
 8005a22:	2002      	moveq	r0, #2
 8005a24:	2000      	movne	r0, #0
 8005a26:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005a28:	2001      	movs	r0, #1
	}
 8005a2a:	4770      	bx	lr
 8005a2c:	20003f5c 	.word	0x20003f5c
 8005a30:	20003f08 	.word	0x20003f08

08005a34 <vTaskPriorityInherit>:
	{
 8005a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8005a38:	4604      	mov	r4, r0
 8005a3a:	2800      	cmp	r0, #0
 8005a3c:	d038      	beq.n	8005ab0 <vTaskPriorityInherit+0x7c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005a3e:	4d1d      	ldr	r5, [pc, #116]	; (8005ab4 <vTaskPriorityInherit+0x80>)
 8005a40:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005a42:	682a      	ldr	r2, [r5, #0]
 8005a44:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d232      	bcs.n	8005ab0 <vTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005a4a:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005a4c:	4e1a      	ldr	r6, [pc, #104]	; (8005ab8 <vTaskPriorityInherit+0x84>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005a4e:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a50:	bfa1      	itttt	ge
 8005a52:	682a      	ldrge	r2, [r5, #0]
 8005a54:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8005a56:	f1c2 0207 	rsbge	r2, r2, #7
 8005a5a:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005a5c:	2714      	movs	r7, #20
 8005a5e:	6942      	ldr	r2, [r0, #20]
 8005a60:	fb07 6303 	mla	r3, r7, r3, r6
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d120      	bne.n	8005aaa <vTaskPriorityInherit+0x76>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a68:	f100 0804 	add.w	r8, r0, #4
 8005a6c:	4640      	mov	r0, r8
 8005a6e:	f7fe fe62 	bl	8004736 <uxListRemove>
 8005a72:	4a12      	ldr	r2, [pc, #72]	; (8005abc <vTaskPriorityInherit+0x88>)
 8005a74:	b948      	cbnz	r0, 8005a8a <vTaskPriorityInherit+0x56>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005a76:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005a78:	4347      	muls	r7, r0
 8005a7a:	59f3      	ldr	r3, [r6, r7]
 8005a7c:	b92b      	cbnz	r3, 8005a8a <vTaskPriorityInherit+0x56>
 8005a7e:	6813      	ldr	r3, [r2, #0]
 8005a80:	2101      	movs	r1, #1
 8005a82:	4081      	lsls	r1, r0
 8005a84:	ea23 0301 	bic.w	r3, r3, r1
 8005a88:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a8a:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 8005a8c:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a8e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005a90:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8005a92:	2301      	movs	r3, #1
 8005a94:	4083      	lsls	r3, r0
 8005a96:	430b      	orrs	r3, r1
 8005a98:	6013      	str	r3, [r2, #0]
 8005a9a:	2314      	movs	r3, #20
 8005a9c:	4641      	mov	r1, r8
 8005a9e:	fb03 6000 	mla	r0, r3, r0, r6
	}
 8005aa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 8005aa6:	f7fe be23 	b.w	80046f0 <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005aaa:	682b      	ldr	r3, [r5, #0]
 8005aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aae:	62c3      	str	r3, [r0, #44]	; 0x2c
 8005ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ab4:	20003e64 	.word	0x20003e64
 8005ab8:	20003e70 	.word	0x20003e70
 8005abc:	20003f10 	.word	0x20003f10

08005ac0 <xTaskPriorityDisinherit>:
	{
 8005ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8005ac2:	4604      	mov	r4, r0
 8005ac4:	b908      	cbnz	r0, 8005aca <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8005ac6:	2000      	movs	r0, #0
 8005ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8005aca:	4b22      	ldr	r3, [pc, #136]	; (8005b54 <xTaskPriorityDisinherit+0x94>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4298      	cmp	r0, r3
 8005ad0:	d008      	beq.n	8005ae4 <xTaskPriorityDisinherit+0x24>
 8005ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad6:	f383 8811 	msr	BASEPRI, r3
 8005ada:	f3bf 8f6f 	isb	sy
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	e7fe      	b.n	8005ae2 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8005ae4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005ae6:	b943      	cbnz	r3, 8005afa <xTaskPriorityDisinherit+0x3a>
 8005ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aec:	f383 8811 	msr	BASEPRI, r3
 8005af0:	f3bf 8f6f 	isb	sy
 8005af4:	f3bf 8f4f 	dsb	sy
 8005af8:	e7fe      	b.n	8005af8 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005afa:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005afc:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8005afe:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005b00:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8005b02:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005b04:	d0df      	beq.n	8005ac6 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1dd      	bne.n	8005ac6 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b0a:	1d05      	adds	r5, r0, #4
 8005b0c:	4628      	mov	r0, r5
 8005b0e:	f7fe fe12 	bl	8004736 <uxListRemove>
 8005b12:	4e11      	ldr	r6, [pc, #68]	; (8005b58 <xTaskPriorityDisinherit+0x98>)
 8005b14:	4a11      	ldr	r2, [pc, #68]	; (8005b5c <xTaskPriorityDisinherit+0x9c>)
 8005b16:	b950      	cbnz	r0, 8005b2e <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005b18:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005b1a:	2114      	movs	r1, #20
 8005b1c:	4379      	muls	r1, r7
 8005b1e:	5873      	ldr	r3, [r6, r1]
 8005b20:	b92b      	cbnz	r3, 8005b2e <xTaskPriorityDisinherit+0x6e>
 8005b22:	6813      	ldr	r3, [r2, #0]
 8005b24:	2001      	movs	r0, #1
 8005b26:	40b8      	lsls	r0, r7
 8005b28:	ea23 0300 	bic.w	r3, r3, r0
 8005b2c:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005b2e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005b30:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b32:	f1c3 0107 	rsb	r1, r3, #7
 8005b36:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b38:	6811      	ldr	r1, [r2, #0]
 8005b3a:	2401      	movs	r4, #1
 8005b3c:	fa04 f003 	lsl.w	r0, r4, r3
 8005b40:	4308      	orrs	r0, r1
 8005b42:	6010      	str	r0, [r2, #0]
 8005b44:	2014      	movs	r0, #20
 8005b46:	fb00 6003 	mla	r0, r0, r3, r6
 8005b4a:	4629      	mov	r1, r5
 8005b4c:	f7fe fdd0 	bl	80046f0 <vListInsertEnd>
					xReturn = pdTRUE;
 8005b50:	4620      	mov	r0, r4
	}
 8005b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b54:	20003e64 	.word	0x20003e64
 8005b58:	20003e70 	.word	0x20003e70
 8005b5c:	20003f10 	.word	0x20003f10

08005b60 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8005b60:	4b04      	ldr	r3, [pc, #16]	; (8005b74 <pvTaskIncrementMutexHeldCount+0x14>)
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	b11a      	cbz	r2, 8005b6e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8005b66:	6819      	ldr	r1, [r3, #0]
 8005b68:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8005b6a:	3201      	adds	r2, #1
 8005b6c:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8005b6e:	6818      	ldr	r0, [r3, #0]
	}
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	20003e64 	.word	0x20003e64

08005b78 <CAN_Config>:

/*
 * Configures CAN protocol for 250kbit/s without interrupt for reading (only polling).
 */
void CAN_Config(uint32_t id)
{
 8005b78:	b5f0      	push	{r4, r5, r6, r7, lr}
  CAN_FilterTypeDef  sFilterConfig;

  /*##-1- Configure the CAN peripheral #######################################*/
  hcan1.Instance = CAN1;
  hcan1.Init.Prescaler = 9;
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8005b7a:	4a1a      	ldr	r2, [pc, #104]	; (8005be4 <CAN_Config+0x6c>)
  hcan1.Instance = CAN1;
 8005b7c:	4d1a      	ldr	r5, [pc, #104]	; (8005be8 <CAN_Config+0x70>)
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8005b7e:	2400      	movs	r4, #0
 8005b80:	2309      	movs	r3, #9
 8005b82:	e885 001c 	stmia.w	r5, {r2, r3, r4}
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8005b86:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
{
 8005b8a:	b08b      	sub	sp, #44	; 0x2c
 8005b8c:	4607      	mov	r7, r0
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
  hcan1.Init.TimeTriggeredMode = DISABLE;
  hcan1.Init.AutoBusOff = DISABLE;
  hcan1.Init.AutoWakeUp = DISABLE;
  hcan1.Init.AutoRetransmission = ENABLE;
 8005b8e:	2601      	movs	r6, #1
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8005b90:	612b      	str	r3, [r5, #16]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
  hcan1.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8005b92:	4628      	mov	r0, r5
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8005b94:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005b98:	616b      	str	r3, [r5, #20]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8005b9a:	60ec      	str	r4, [r5, #12]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8005b9c:	762c      	strb	r4, [r5, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8005b9e:	766c      	strb	r4, [r5, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8005ba0:	76ac      	strb	r4, [r5, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8005ba2:	76ee      	strb	r6, [r5, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8005ba4:	772c      	strb	r4, [r5, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8005ba6:	776c      	strb	r4, [r5, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8005ba8:	f7fb f9fe 	bl	8000fa8 <HAL_CAN_Init>
  sFilterConfig.FilterIdLow = 0x0000;
  sFilterConfig.FilterMaskIdHigh = 0x0000;
  sFilterConfig.FilterMaskIdLow = 0x0000;
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
  sFilterConfig.FilterActivation = ENABLE;
  sFilterConfig.SlaveStartFilterBank = 14;
 8005bac:	230e      	movs	r3, #14

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8005bae:	4669      	mov	r1, sp
 8005bb0:	4628      	mov	r0, r5
  sFilterConfig.SlaveStartFilterBank = 14;
 8005bb2:	9309      	str	r3, [sp, #36]	; 0x24
  sFilterConfig.FilterBank = 0;
 8005bb4:	9405      	str	r4, [sp, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8005bb6:	9406      	str	r4, [sp, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8005bb8:	9607      	str	r6, [sp, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8005bba:	9400      	str	r4, [sp, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8005bbc:	9401      	str	r4, [sp, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8005bbe:	9402      	str	r4, [sp, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8005bc0:	9403      	str	r4, [sp, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8005bc2:	9404      	str	r4, [sp, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8005bc4:	9608      	str	r6, [sp, #32]
  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8005bc6:	f7fb fa6b 	bl	80010a0 <HAL_CAN_ConfigFilter>
    /* Filter configuration Error */
//	  _Error_Handler(__FILE__, __LINE__);
  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8005bca:	4628      	mov	r0, r5
 8005bcc:	f7fb faf2 	bl	80011b4 <HAL_CAN_Start>
//    /* Notification Error */
//	  _Error_Handler(__FILE__, __LINE__);
//  }

  /*##-5- Configure Transmission process #####################################*/
  TxHeader.StdId = id;
 8005bd0:	4b06      	ldr	r3, [pc, #24]	; (8005bec <CAN_Config+0x74>)
  TxHeader.ExtId = id; // not needed
  TxHeader.RTR = CAN_RTR_DATA;
  TxHeader.IDE = CAN_ID_STD;
  TxHeader.DLC = 8;
 8005bd2:	2208      	movs	r2, #8
  TxHeader.StdId = id;
 8005bd4:	601f      	str	r7, [r3, #0]
  TxHeader.ExtId = id; // not needed
 8005bd6:	605f      	str	r7, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA;
 8005bd8:	60dc      	str	r4, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 8005bda:	609c      	str	r4, [r3, #8]
  TxHeader.DLC = 8;
 8005bdc:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8005bde:	751c      	strb	r4, [r3, #20]
}
 8005be0:	b00b      	add	sp, #44	; 0x2c
 8005be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005be4:	40006400 	.word	0x40006400
 8005be8:	2000401c 	.word	0x2000401c
 8005bec:	20003fb8 	.word	0x20003fb8

08005bf0 <setFrame>:
 * Sends a frame of 8 bytes (payload) on the CAN bus using our predefined protocol.
 * byte 0..3 --> some uint32_t
 * byte 4    --> data_id, see CAN_communication.h
 * byte 5..7 --> timestamp
 */
void setFrame(uint32_t data, uint8_t data_id, uint32_t timestamp) {
 8005bf0:	4613      	mov	r3, r2
	TxData[0] = (uint8_t) (data >> 24);
 8005bf2:	4a10      	ldr	r2, [pc, #64]	; (8005c34 <setFrame+0x44>)
void setFrame(uint32_t data, uint8_t data_id, uint32_t timestamp) {
 8005bf4:	b510      	push	{r4, lr}
	TxData[0] = (uint8_t) (data >> 24);
 8005bf6:	0e04      	lsrs	r4, r0, #24
	TxData[1] = (uint8_t) (data >> 16);
	TxData[2] = (uint8_t) (data >> 8);
	TxData[3] = (uint8_t) (data >> 0);
	TxData[4] = data_id;
 8005bf8:	7111      	strb	r1, [r2, #4]
	TxData[5] = (uint8_t) (timestamp >> 16);
 8005bfa:	0c19      	lsrs	r1, r3, #16
	TxData[0] = (uint8_t) (data >> 24);
 8005bfc:	7014      	strb	r4, [r2, #0]
	TxData[5] = (uint8_t) (timestamp >> 16);
 8005bfe:	7151      	strb	r1, [r2, #5]
	TxData[1] = (uint8_t) (data >> 16);
 8005c00:	0c04      	lsrs	r4, r0, #16
	TxData[6] = (uint8_t) (timestamp >> 8);
 8005c02:	0a19      	lsrs	r1, r3, #8
	TxData[1] = (uint8_t) (data >> 16);
 8005c04:	7054      	strb	r4, [r2, #1]
	TxData[3] = (uint8_t) (data >> 0);
 8005c06:	70d0      	strb	r0, [r2, #3]
	TxData[6] = (uint8_t) (timestamp >> 8);
 8005c08:	7191      	strb	r1, [r2, #6]
	TxData[7] = (uint8_t) (timestamp >> 0);
 8005c0a:	71d3      	strb	r3, [r2, #7]
	TxData[2] = (uint8_t) (data >> 8);
 8005c0c:	0a04      	lsrs	r4, r0, #8

	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 8005c0e:	4b0a      	ldr	r3, [pc, #40]	; (8005c38 <setFrame+0x48>)
 8005c10:	490a      	ldr	r1, [pc, #40]	; (8005c3c <setFrame+0x4c>)
 8005c12:	480b      	ldr	r0, [pc, #44]	; (8005c40 <setFrame+0x50>)
	TxData[2] = (uint8_t) (data >> 8);
 8005c14:	7094      	strb	r4, [r2, #2]
	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 8005c16:	f7fb faf8 	bl	800120a <HAL_CAN_AddTxMessage>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	b130      	cbz	r0, 8005c2c <setFrame+0x3c>
		// deal with it (never fails)
		led_set_rgb(50, 0, 0);
 8005c1e:	2200      	movs	r2, #0
 8005c20:	4611      	mov	r1, r2
 8005c22:	2032      	movs	r0, #50	; 0x32
	}
	else {
		led_set_rgb(0, 1000, 0);
	}
}
 8005c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		led_set_rgb(0, 1000, 0);
 8005c28:	f001 b8d6 	b.w	8006dd8 <led_set_rgb>
 8005c2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005c30:	e7f8      	b.n	8005c24 <setFrame+0x34>
 8005c32:	bf00      	nop
 8005c34:	20003fa4 	.word	0x20003fa4
 8005c38:	20003fac 	.word	0x20003fac
 8005c3c:	20003fb8 	.word	0x20003fb8
 8005c40:	2000401c 	.word	0x2000401c

08005c44 <readFrame>:
 *
 * byte 0..3 --> some uint32_t
 * byte 4    --> data_id, see CAN_communication.h
 * byte 5..7 --> timestamp
 */
uint32_t readFrame(void) {
 8005c44:	b570      	push	{r4, r5, r6, lr}
	uint32_t fill_level = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0);
 8005c46:	2100      	movs	r1, #0
 8005c48:	4810      	ldr	r0, [pc, #64]	; (8005c8c <readFrame+0x48>)
 8005c4a:	f7fb fbab 	bl	80013a4 <HAL_CAN_GetRxFifoFillLevel>
	if (fill_level > 0) {
 8005c4e:	4605      	mov	r5, r0
 8005c50:	b1d0      	cbz	r0, 8005c88 <readFrame+0x44>
		HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 8005c52:	4c0f      	ldr	r4, [pc, #60]	; (8005c90 <readFrame+0x4c>)
 8005c54:	4e0f      	ldr	r6, [pc, #60]	; (8005c94 <readFrame+0x50>)
 8005c56:	480d      	ldr	r0, [pc, #52]	; (8005c8c <readFrame+0x48>)
 8005c58:	4623      	mov	r3, r4
 8005c5a:	4632      	mov	r2, r6
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	f7fb fb23 	bl	80012a8 <HAL_CAN_GetRxMessage>
		memcpy(&current_msg.data, RxData, 4);
 8005c62:	4b0d      	ldr	r3, [pc, #52]	; (8005c98 <readFrame+0x54>)
 8005c64:	6822      	ldr	r2, [r4, #0]
 8005c66:	601a      	str	r2, [r3, #0]
		current_msg.id = RxData[4];
 8005c68:	7922      	ldrb	r2, [r4, #4]
 8005c6a:	711a      	strb	r2, [r3, #4]
		//----------------------------------------------------------------------check if works
		uint8_t* ptr = (uint8_t*) &current_msg.timestamp;
		*ptr = 0;
		memcpy(&ptr[1], &RxData[5], 3);
 8005c6c:	f834 2f05 	ldrh.w	r2, [r4, #5]!
 8005c70:	f8a3 2009 	strh.w	r2, [r3, #9]
 8005c74:	78a2      	ldrb	r2, [r4, #2]
 8005c76:	72da      	strb	r2, [r3, #11]
		*ptr = 0;
 8005c78:	2100      	movs	r1, #0
		//----------------------------------------------------------------------check if works
		current_msg.id_CAN = RxHeader.StdId;
 8005c7a:	6832      	ldr	r2, [r6, #0]
 8005c7c:	60da      	str	r2, [r3, #12]
		*ptr = 0;
 8005c7e:	7219      	strb	r1, [r3, #8]
		led_set_rgb(0, 0, 50);
 8005c80:	2232      	movs	r2, #50	; 0x32
 8005c82:	4608      	mov	r0, r1
 8005c84:	f001 f8a8 	bl	8006dd8 <led_set_rgb>
	}
	return fill_level;
}
 8005c88:	4628      	mov	r0, r5
 8005c8a:	bd70      	pop	{r4, r5, r6, pc}
 8005c8c:	2000401c 	.word	0x2000401c
 8005c90:	20003fb0 	.word	0x20003fb0
 8005c94:	20003fd0 	.word	0x20003fd0
 8005c98:	20003fec 	.word	0x20003fec

08005c9c <longBip>:
//  HAL_GPIO_WritePin (BUZZER_GPIO_Port, BUZZER_Pin, SET);
//  buzzerDelayMs = 300;
}

void longBip ()
{
 8005c9c:	4770      	bx	lr
	...

08005ca0 <TK_state_machine>:
volatile uint32_t currentBaroSeqNumber = 0;
volatile uint32_t currentBaroTimestamp = 0;
volatile uint32_t currentPitotSeqNumber = 0;

void TK_state_machine (void const * argument)
{
 8005ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca4:	ed2d 8b02 	vpush	{d8}

  osDelay (2000);
 8005ca8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
{
 8005cac:	b0b9      	sub	sp, #228	; 0xe4
  osDelay (2000);
 8005cae:	f7fe fc98 	bl	80045e2 <osDelay>
  // TODO: Set low package data rate
  // TODO: Airbrakes HelloWorld

  // State Machine initialization
  // Hyp: rocket is on rail waiting for lift-off
  currentState = STATE_CALIBRATION;
 8005cb2:	4eb3      	ldr	r6, [pc, #716]	; (8005f80 <TK_state_machine+0x2e0>)
  float32_t max_altitude = calib_initial_altitude;
 8005cb4:	4bb3      	ldr	r3, [pc, #716]	; (8005f84 <TK_state_machine+0x2e4>)
  float32_t td_last_alt = 0;
 8005cb6:	ed9f 8ab4 	vldr	s16, [pc, #720]	; 8005f88 <TK_state_machine+0x2e8>
  float32_t max_altitude = calib_initial_altitude;
 8005cba:	edd3 8a00 	vldr	s17, [r3]
 8005cbe:	9300      	str	r3, [sp, #0]
  currentState = STATE_CALIBRATION;
 8005cc0:	2400      	movs	r4, #0
 8005cc2:	7034      	strb	r4, [r6, #0]
  uint32_t sec_counter = 0;
 8005cc4:	46a3      	mov	fp, r4
  uint32_t apogee_counter = 0;
 8005cc6:	46a2      	mov	sl, r4
  uint8_t calibDataCounter = 0;
 8005cc8:	46a0      	mov	r8, r4
  uint32_t lastImuSeqNumber = 0, lastBaroSeqNumber = 0;
 8005cca:	9402      	str	r4, [sp, #8]
 8005ccc:	9401      	str	r4, [sp, #4]
  uint32_t time_tmp = 0;
 8005cce:	4625      	mov	r5, r4

  // State Machine main task loop
  for (;;)
    {
      // Check state at max period where sensors are updated
      osDelay (8);
 8005cd0:	2008      	movs	r0, #8
 8005cd2:	f7fe fc86 	bl	80045e2 <osDelay>

      // if new imu data is available
      if (currentImuSeqNumber > lastImuSeqNumber)
 8005cd6:	4bad      	ldr	r3, [pc, #692]	; (8005f8c <TK_state_machine+0x2ec>)
 8005cd8:	9a01      	ldr	r2, [sp, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d241      	bcs.n	8005d64 <TK_state_machine+0xc4>
extern IMU_data IMU_buffer[];
extern BARO_data BARO_buffer[];

static inline IMU_data* getCurrentIMU_data ()
{
  return &IMU_buffer[currentImuSeqNumber % CIRC_BUFFER_SIZE];
 8005ce0:	4baa      	ldr	r3, [pc, #680]	; (8005f8c <TK_state_machine+0x2ec>)
 8005ce2:	49ab      	ldr	r1, [pc, #684]	; (8005f90 <TK_state_machine+0x2f0>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2228      	movs	r2, #40	; 0x28
 8005ce8:	f003 0307 	and.w	r3, r3, #7
 8005cec:	fb02 1303 	mla	r3, r2, r3, r1
 8005cf0:	9303      	str	r3, [sp, #12]
        {
          // Update accelerometer reading
          imu_data = getCurrentIMU_data ();
          lastImuSeqNumber = currentImuSeqNumber;
 8005cf2:	4ba6      	ldr	r3, [pc, #664]	; (8005f8c <TK_state_machine+0x2ec>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	9301      	str	r3, [sp, #4]
          imuIsReady = 1; // set new data flag to true
 8005cf8:	2101      	movs	r1, #1
        {
          imuIsReady = 0; // set new data flag to false
        }

      // if new barometer data is available
      if (currentBaroSeqNumber > lastBaroSeqNumber)
 8005cfa:	4ba6      	ldr	r3, [pc, #664]	; (8005f94 <TK_state_machine+0x2f4>)
 8005cfc:	9802      	ldr	r0, [sp, #8]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	4290      	cmp	r0, r2
 8005d02:	d231      	bcs.n	8005d68 <TK_state_machine+0xc8>
}

static inline BARO_data* getCurrentBARO_data ()
{
  return &BARO_buffer[currentBaroSeqNumber % CIRC_BUFFER_SIZE];
 8005d04:	681f      	ldr	r7, [r3, #0]
 8005d06:	4aa4      	ldr	r2, [pc, #656]	; (8005f98 <TK_state_machine+0x2f8>)
        {
          // Update barometer reading
          baro_data = getCurrentBARO_data ();
          lastBaroSeqNumber = currentBaroSeqNumber;
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	9302      	str	r3, [sp, #8]
 8005d0c:	f007 0707 	and.w	r7, r7, #7
 8005d10:	200c      	movs	r0, #12
 8005d12:	fb00 2707 	mla	r7, r0, r7, r2
          baroIsReady = 1; // set new data flag to true
 8005d16:	f04f 0901 	mov.w	r9, #1
      else
        {
          baroIsReady = 0; // set new data flag to false
        }

      if (LIFTOFF_TIME != 0 && (HAL_GetTick() - LIFTOFF_TIME) > 4 * 60 * 1000) {
 8005d1a:	4aa0      	ldr	r2, [pc, #640]	; (8005f9c <TK_state_machine+0x2fc>)
 8005d1c:	6810      	ldr	r0, [r2, #0]
 8005d1e:	b168      	cbz	r0, 8005d3c <TK_state_machine+0x9c>
 8005d20:	9205      	str	r2, [sp, #20]
 8005d22:	9104      	str	r1, [sp, #16]
 8005d24:	f7fb f926 	bl	8000f74 <HAL_GetTick>
 8005d28:	9a05      	ldr	r2, [sp, #20]
 8005d2a:	9904      	ldr	r1, [sp, #16]
 8005d2c:	6812      	ldr	r2, [r2, #0]
 8005d2e:	1a80      	subs	r0, r0, r2
 8005d30:	4a9b      	ldr	r2, [pc, #620]	; (8005fa0 <TK_state_machine+0x300>)
 8005d32:	4290      	cmp	r0, r2
          currentState = STATE_TOUCHDOWN;
 8005d34:	bf82      	ittt	hi
 8005d36:	4b92      	ldrhi	r3, [pc, #584]	; (8005f80 <TK_state_machine+0x2e0>)
 8005d38:	2206      	movhi	r2, #6
 8005d3a:	701a      	strbhi	r2, [r3, #0]
      }

      // State Machine
      switch (currentState)
 8005d3c:	4b90      	ldr	r3, [pc, #576]	; (8005f80 <TK_state_machine+0x2e0>)
 8005d3e:	781a      	ldrb	r2, [r3, #0]
 8005d40:	2a06      	cmp	r2, #6
 8005d42:	d8c5      	bhi.n	8005cd0 <TK_state_machine+0x30>
 8005d44:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005d48:	00380013 	.word	0x00380013
 8005d4c:	007b006e 	.word	0x007b006e
 8005d50:	00e000b1 	.word	0x00e000b1
 8005d54:	010a      	.short	0x010a

                // update the minimum altitude detected up to this point
                if ((baro_data->altitude - calib_initial_altitude) > ROCKET_CST_REC_SECONDARY_ALT)
                  {
                    // As long as the measured altitude is above the secondary recovery event altitude, keep buffer counter to 0
                    sec_counter = 0;
 8005d56:	f04f 0b00 	mov.w	fp, #0
 8005d5a:	e7b9      	b.n	8005cd0 <TK_state_machine+0x30>
                          {
                            // if the counter is larger than a given value, toggle the state trigger
                            counterTdTrig = 1;
                          }
                      }
                    td_last_alt = baro_data->altitude;
 8005d5c:	eeb0 8a67 	vmov.f32	s16, s15
                        td_counter = 0;
 8005d60:	2400      	movs	r4, #0
 8005d62:	e7b5      	b.n	8005cd0 <TK_state_machine+0x30>
          imuIsReady = 0; // set new data flag to false
 8005d64:	2100      	movs	r1, #0
 8005d66:	e7c8      	b.n	8005cfa <TK_state_machine+0x5a>
          baroIsReady = 0; // set new data flag to false
 8005d68:	f04f 0900 	mov.w	r9, #0
 8005d6c:	e7d5      	b.n	8005d1a <TK_state_machine+0x7a>
            if (baroIsReady)
 8005d6e:	f1b9 0f00 	cmp.w	r9, #0
 8005d72:	d0ad      	beq.n	8005cd0 <TK_state_machine+0x30>
                if (calibDataCounter > CALIB_BARO_BUFFER_SIZE)
 8005d74:	f1b8 0f32 	cmp.w	r8, #50	; 0x32
 8005d78:	d913      	bls.n	8005da2 <TK_state_machine+0x102>
 8005d7a:	eddf 7a83 	vldr	s15, [pc, #524]	; 8005f88 <TK_state_machine+0x2e8>
 8005d7e:	ab06      	add	r3, sp, #24
 8005d80:	aa38      	add	r2, sp, #224	; 0xe0
  uint8_t i;
  float32_t sum = 0.0;

  for(i = 0 ; i < arraySize ; i++)
    {
      sum += array[i];
 8005d82:	ecb3 7a01 	vldmia	r3!, {s14}
  for(i = 0 ; i < arraySize ; i++)
 8005d86:	429a      	cmp	r2, r3
      sum += array[i];
 8005d88:	ee77 7a87 	vadd.f32	s15, s15, s14
  for(i = 0 ; i < arraySize ; i++)
 8005d8c:	d1f9      	bne.n	8005d82 <TK_state_machine+0xe2>
    }

  return sum/arraySize;
 8005d8e:	eddf 6a85 	vldr	s13, [pc, #532]	; 8005fa4 <TK_state_machine+0x304>
                    calib_initial_altitude = array_mean (calibData, CALIB_BARO_BUFFER_SIZE);
 8005d92:	9b00      	ldr	r3, [sp, #0]
 8005d94:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005d98:	ed83 7a00 	vstr	s14, [r3]
                    currentState = STATE_IDLE;
 8005d9c:	2301      	movs	r3, #1
                currentState = STATE_COAST; // switch to coast state
 8005d9e:	7033      	strb	r3, [r6, #0]
 8005da0:	e796      	b.n	8005cd0 <TK_state_machine+0x30>
                    calibData[calibDataCounter++] = baro_data->altitude;
 8005da2:	aa38      	add	r2, sp, #224	; 0xe0
 8005da4:	f108 0301 	add.w	r3, r8, #1
 8005da8:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	f848 2cc8 	str.w	r2, [r8, #-200]
 8005db2:	fa5f f883 	uxtb.w	r8, r3
 8005db6:	e78b      	b.n	8005cd0 <TK_state_machine+0x30>
            if (imuIsReady)
 8005db8:	2900      	cmp	r1, #0
 8005dba:	d089      	beq.n	8005cd0 <TK_state_machine+0x30>
                uint8_t liftoffAccelTrig = (abs_fl32 (imu_data->acceleration.y) > ROCKET_CST_LIFTOFF_TRIG_ACCEL);
 8005dbc:	9b03      	ldr	r3, [sp, #12]
                if (LIFTOFF_TIME != 0)
 8005dbe:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 8005f9c <TK_state_machine+0x2fc>
                uint8_t liftoffAccelTrig = (abs_fl32 (imu_data->acceleration.y) > ROCKET_CST_LIFTOFF_TRIG_ACCEL);
 8005dc2:	edd3 7a01 	vldr	s15, [r3, #4]
                if (LIFTOFF_TIME != 0)
 8005dc6:	f8d9 2000 	ldr.w	r2, [r9]
  return (v >= 0) ? v : -v;
 8005dca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dd2:	bfb8      	it	lt
 8005dd4:	eef1 7a67 	vneglt.f32	s15, s15
 8005dd8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
                    if (liftoffAccelTrig && HAL_GetTick () - LIFTOFF_TIME > LIFTOFF_DETECTION_DELAY)
 8005ddc:	eef4 7ac7 	vcmpe.f32	s15, s14
                if (LIFTOFF_TIME != 0)
 8005de0:	b1a2      	cbz	r2, 8005e0c <TK_state_machine+0x16c>
                    if (liftoffAccelTrig && HAL_GetTick () - LIFTOFF_TIME > LIFTOFF_DETECTION_DELAY)
 8005de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005de6:	dd0d      	ble.n	8005e04 <TK_state_machine+0x164>
 8005de8:	f7fb f8c4 	bl	8000f74 <HAL_GetTick>
 8005dec:	f8d9 3000 	ldr.w	r3, [r9]
 8005df0:	1ac0      	subs	r0, r0, r3
 8005df2:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 8005df6:	f67f af6b 	bls.w	8005cd0 <TK_state_machine+0x30>
                        currentState = STATE_LIFTOFF; // Switch to lift-off state
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	7033      	strb	r3, [r6, #0]
                        longBip();
 8005dfe:	f7ff ff4d 	bl	8005c9c <longBip>
                        break;
 8005e02:	e765      	b.n	8005cd0 <TK_state_machine+0x30>
                        LIFTOFF_TIME = 0;
 8005e04:	2500      	movs	r5, #0
 8005e06:	f8c9 5000 	str.w	r5, [r9]
 8005e0a:	e761      	b.n	8005cd0 <TK_state_machine+0x30>
                if (liftoffAccelTrig)
 8005e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e10:	f77f af5e 	ble.w	8005cd0 <TK_state_machine+0x30>
                    LIFTOFF_TIME = HAL_GetTick ();
 8005e14:	f7fb f8ae 	bl	8000f74 <HAL_GetTick>
 8005e18:	f8c9 0000 	str.w	r0, [r9]
                    time_tmp = HAL_GetTick (); // Start timer to estimate motor burn out
 8005e1c:	f7fb f8aa 	bl	8000f74 <HAL_GetTick>
 8005e20:	4605      	mov	r5, r0
 8005e22:	e755      	b.n	8005cd0 <TK_state_machine+0x30>
            flight_status = 10;
 8005e24:	4b60      	ldr	r3, [pc, #384]	; (8005fa8 <TK_state_machine+0x308>)
 8005e26:	220a      	movs	r2, #10
 8005e28:	601a      	str	r2, [r3, #0]
            uint32_t currentTime = HAL_GetTick ();
 8005e2a:	f7fb f8a3 	bl	8000f74 <HAL_GetTick>
            if ((currentTime - time_tmp) > ROCKET_CST_MOTOR_BURNTIME)
 8005e2e:	f641 1364 	movw	r3, #6500	; 0x1964
 8005e32:	1b40      	subs	r0, r0, r5
 8005e34:	4298      	cmp	r0, r3
 8005e36:	f67f af4b 	bls.w	8005cd0 <TK_state_machine+0x30>
                currentState = STATE_COAST; // switch to coast state
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e7af      	b.n	8005d9e <TK_state_machine+0xfe>
            flight_status = 20;
 8005e3e:	4a5a      	ldr	r2, [pc, #360]	; (8005fa8 <TK_state_machine+0x308>)
 8005e40:	2114      	movs	r1, #20
 8005e42:	6011      	str	r1, [r2, #0]
            if (baroIsReady)
 8005e44:	f1b9 0f00 	cmp.w	r9, #0
 8005e48:	f43f af42 	beq.w	8005cd0 <TK_state_machine+0x30>
                uint8_t minAltTrig = ((baro_data->altitude - calib_initial_altitude) > ROCKET_CST_MIN_TRIG_AGL);
 8005e4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e50:	9b00      	ldr	r3, [sp, #0]
                if (max_altitude < baro_data->altitude)
 8005e52:	eef4 8ae7 	vcmpe.f32	s17, s15
                uint8_t minAltTrig = ((baro_data->altitude - calib_initial_altitude) > ROCKET_CST_MIN_TRIG_AGL);
 8005e56:	ed93 7a00 	vldr	s14, [r3]
                if (max_altitude < baro_data->altitude)
 8005e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                uint8_t minAltTrig = ((baro_data->altitude - calib_initial_altitude) > ROCKET_CST_MIN_TRIG_AGL);
 8005e5e:	ee37 7ac7 	vsub.f32	s14, s15, s14
                if (max_altitude < baro_data->altitude)
 8005e62:	f100 8088 	bmi.w	8005f76 <TK_state_machine+0x2d6>
                    apogee_counter++;
 8005e66:	f10a 0a01 	add.w	sl, sl, #1
                    if (apogee_counter > APOGEE_BUFFER_SIZE)
 8005e6a:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 8005e6e:	f67f af2f 	bls.w	8005cd0 <TK_state_machine+0x30>
                if (minAltTrig && counterAltTrig && diffAltTrig)
 8005e72:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005fac <TK_state_machine+0x30c>
 8005e76:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8005e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                        if (( max_altitude - baro_data->altitude) > APOGEE_ALT_DIFF)
 8005e7e:	ee78 7ae7 	vsub.f32	s15, s17, s15
                if (minAltTrig && counterAltTrig && diffAltTrig)
 8005e82:	f77f af25 	ble.w	8005cd0 <TK_state_machine+0x30>
 8005e86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e92:	f77f af1d 	ble.w	8005cd0 <TK_state_machine+0x30>
 8005e96:	9204      	str	r2, [sp, #16]
                    time_tmp = HAL_GetTick (); // save time to mute sensors while ejection occures
 8005e98:	f7fb f86c 	bl	8000f74 <HAL_GetTick>
                    currentState = STATE_PRIMARY; // switch to primary descent phase
 8005e9c:	2304      	movs	r3, #4
                    flight_status = 30;
 8005e9e:	9a04      	ldr	r2, [sp, #16]
                    currentState = STATE_PRIMARY; // switch to primary descent phase
 8005ea0:	7033      	strb	r3, [r6, #0]
                    flight_status = 30;
 8005ea2:	231e      	movs	r3, #30
                    time_tmp = HAL_GetTick (); // save time to mute sensors while ejection occures
 8005ea4:	4605      	mov	r5, r0
                    flight_status = 30;
 8005ea6:	6013      	str	r3, [r2, #0]
 8005ea8:	e712      	b.n	8005cd0 <TK_state_machine+0x30>
            longBip();
 8005eaa:	f7ff fef7 	bl	8005c9c <longBip>
            if (baroIsReady)
 8005eae:	f1b9 0f00 	cmp.w	r9, #0
 8005eb2:	f43f af0d 	beq.w	8005cd0 <TK_state_machine+0x30>
                uint8_t sensorMuteTimeTrig = ((HAL_GetTick () - time_tmp) > APOGEE_MUTE_TIME);
 8005eb6:	f7fb f85d 	bl	8000f74 <HAL_GetTick>
                if ((baro_data->altitude - calib_initial_altitude) > ROCKET_CST_REC_SECONDARY_ALT)
 8005eba:	9b00      	ldr	r3, [sp, #0]
 8005ebc:	edd7 7a02 	vldr	s15, [r7, #8]
 8005ec0:	ed93 7a00 	vldr	s14, [r3]
 8005ec4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005ec8:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8005fb0 <TK_state_machine+0x310>
 8005ecc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                uint8_t sensorMuteTimeTrig = ((HAL_GetTick () - time_tmp) > APOGEE_MUTE_TIME);
 8005ed4:	eba0 0005 	sub.w	r0, r0, r5
                if ((baro_data->altitude - calib_initial_altitude) > ROCKET_CST_REC_SECONDARY_ALT)
 8005ed8:	f73f af3d 	bgt.w	8005d56 <TK_state_machine+0xb6>
                    sec_counter++;
 8005edc:	f10b 0b01 	add.w	fp, fp, #1
                    if (sec_counter > SECONDARY_BUFFER_SIZE)
 8005ee0:	f1bb 0f05 	cmp.w	fp, #5
 8005ee4:	f67f aef4 	bls.w	8005cd0 <TK_state_machine+0x30>
                if (sensorMuteTimeTrig && counterSecTrig)
 8005ee8:	f241 3388 	movw	r3, #5000	; 0x1388
 8005eec:	4298      	cmp	r0, r3
 8005eee:	f67f aeef 	bls.w	8005cd0 <TK_state_machine+0x30>
                    time_tmp = HAL_GetTick (); // save current time to start differed touchdown detection rate
 8005ef2:	f7fb f83f 	bl	8000f74 <HAL_GetTick>
                    currentState = STATE_SECONDARY; // switch to secondary recovery phase
 8005ef6:	2305      	movs	r3, #5
 8005ef8:	7033      	strb	r3, [r6, #0]
                    flight_status = 35;
 8005efa:	4b2b      	ldr	r3, [pc, #172]	; (8005fa8 <TK_state_machine+0x308>)
                    td_last_alt = baro_data->altitude; // save altitude measurement for touchdown detection
 8005efc:	ed97 8a02 	vldr	s16, [r7, #8]
                    flight_status = 35;
 8005f00:	2223      	movs	r2, #35	; 0x23
                    time_tmp = HAL_GetTick (); // save current time to start differed touchdown detection rate
 8005f02:	4605      	mov	r5, r0
                    flight_status = 35;
 8005f04:	601a      	str	r2, [r3, #0]
 8005f06:	e6e3      	b.n	8005cd0 <TK_state_machine+0x30>
            longBip();
 8005f08:	f7ff fec8 	bl	8005c9c <longBip>
            if ((HAL_GetTick () - time_tmp) > TOUCHDOWN_DELAY_TIME)
 8005f0c:	f7fb f832 	bl	8000f74 <HAL_GetTick>
 8005f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f14:	1b40      	subs	r0, r0, r5
 8005f16:	4290      	cmp	r0, r2
 8005f18:	f67f aeda 	bls.w	8005cd0 <TK_state_machine+0x30>
                if (baroIsReady)
 8005f1c:	f1b9 0f00 	cmp.w	r9, #0
 8005f20:	f43f aed6 	beq.w	8005cd0 <TK_state_machine+0x30>
                    time_tmp = HAL_GetTick ();
 8005f24:	f7fb f826 	bl	8000f74 <HAL_GetTick>
                    if (abs_fl32 (baro_data->altitude - td_last_alt) > TOUCHDOWN_ALT_DIFF)
 8005f28:	edd7 7a02 	vldr	s15, [r7, #8]
 8005f2c:	ee37 8ac8 	vsub.f32	s16, s15, s16
 8005f30:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005f34:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f3c:	bfb8      	it	lt
 8005f3e:	eeb1 8a48 	vneglt.f32	s16, s16
 8005f42:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8005f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    time_tmp = HAL_GetTick ();
 8005f4a:	4605      	mov	r5, r0
                    if (abs_fl32 (baro_data->altitude - td_last_alt) > TOUCHDOWN_ALT_DIFF)
 8005f4c:	f73f af06 	bgt.w	8005d5c <TK_state_machine+0xbc>
                        td_counter++;
 8005f50:	3401      	adds	r4, #1
                        if (td_counter > TOUCHDOWN_BUFFER_SIZE)
 8005f52:	2c05      	cmp	r4, #5
 8005f54:	d809      	bhi.n	8005f6a <TK_state_machine+0x2ca>
                    td_last_alt = baro_data->altitude;
 8005f56:	eeb0 8a67 	vmov.f32	s16, s15
 8005f5a:	e6b9      	b.n	8005cd0 <TK_state_machine+0x30>

        case STATE_TOUCHDOWN:
          {

            for(;;) {
                longBip();
 8005f5c:	f7ff fe9e 	bl	8005c9c <longBip>
                osDelay(2000);
 8005f60:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005f64:	f7fe fb3d 	bl	80045e2 <osDelay>
 8005f68:	e7f8      	b.n	8005f5c <TK_state_machine+0x2bc>
                        currentState = STATE_TOUCHDOWN;
 8005f6a:	2306      	movs	r3, #6
 8005f6c:	7033      	strb	r3, [r6, #0]
                        flight_status = 40;
 8005f6e:	4b0e      	ldr	r3, [pc, #56]	; (8005fa8 <TK_state_machine+0x308>)
 8005f70:	2228      	movs	r2, #40	; 0x28
 8005f72:	601a      	str	r2, [r3, #0]
 8005f74:	e7ef      	b.n	8005f56 <TK_state_machine+0x2b6>
                    max_altitude = baro_data->altitude;
 8005f76:	eef0 8a67 	vmov.f32	s17, s15
                    apogee_counter = 0;
 8005f7a:	f04f 0a00 	mov.w	sl, #0
 8005f7e:	e6a7      	b.n	8005cd0 <TK_state_machine+0x30>
 8005f80:	20004000 	.word	0x20004000
 8005f84:	20004018 	.word	0x20004018
 8005f88:	00000000 	.word	0x00000000
 8005f8c:	20003f94 	.word	0x20003f94
 8005f90:	2000007c 	.word	0x2000007c
 8005f94:	20003f90 	.word	0x20003f90
 8005f98:	200001bc 	.word	0x200001bc
 8005f9c:	20004004 	.word	0x20004004
 8005fa0:	0003a980 	.word	0x0003a980
 8005fa4:	42480000 	.word	0x42480000
 8005fa8:	20004010 	.word	0x20004010
 8005fac:	44a28000 	.word	0x44a28000
 8005fb0:	43480000 	.word	0x43480000

08005fb4 <LL_AHB1_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8005fb4:	4b05      	ldr	r3, [pc, #20]	; (8005fcc <LL_AHB1_GRP1_EnableClock+0x18>)
 8005fb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fb8:	4302      	orrs	r2, r0
 8005fba:	631a      	str	r2, [r3, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
{
 8005fbe:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005fc0:	4018      	ands	r0, r3
 8005fc2:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8005fc4:	9b01      	ldr	r3, [sp, #4]
}
 8005fc6:	b002      	add	sp, #8
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	40023800 	.word	0x40023800

08005fd0 <LL_ADC_SetChannelSamplingTime.constprop.0>:
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
 8005fd0:	b510      	push	{r4, lr}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005fd6:	fa93 f3a3 	rbit	r3, r3
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8005fda:	f001 7200 	and.w	r2, r1, #33554432	; 0x2000000
 8005fde:	fab3 f383 	clz	r3, r3
 8005fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8005fe6:	300c      	adds	r0, #12
 8005fe8:	f04f 74f8 	mov.w	r4, #32505856	; 0x1f00000
 8005fec:	fa94 f2a4 	rbit	r2, r4
  MODIFY_REG(*preg,
 8005ff0:	fab2 f282 	clz	r2, r2
 8005ff4:	fa94 f4a4 	rbit	r4, r4
 8005ff8:	f001 71f8 	and.w	r1, r1, #32505856	; 0x1f00000
 8005ffc:	40d1      	lsrs	r1, r2
 8005ffe:	2207      	movs	r2, #7
 8006000:	fa02 f101 	lsl.w	r1, r2, r1
 8006004:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8006008:	ea22 0201 	bic.w	r2, r2, r1
 800600c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8006010:	bd10      	pop	{r4, pc}
	...

08006014 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006014:	b570      	push	{r4, r5, r6, lr}
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8006016:	2400      	movs	r4, #0
{
 8006018:	b094      	sub	sp, #80	; 0x50
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800601a:	4621      	mov	r1, r4
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 800601c:	2610      	movs	r6, #16
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800601e:	2214      	movs	r2, #20
 8006020:	a809      	add	r0, sp, #36	; 0x24
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8006022:	9402      	str	r4, [sp, #8]
 8006024:	9403      	str	r4, [sp, #12]
 8006026:	9404      	str	r4, [sp, #16]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8006028:	f002 fb57 	bl	80086da <memset>
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 800602c:	4632      	mov	r2, r6
 800602e:	4621      	mov	r1, r4
 8006030:	a805      	add	r0, sp, #20
 8006032:	f002 fb52 	bl	80086da <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006036:	4621      	mov	r1, r4
 8006038:	2218      	movs	r2, #24
 800603a:	a80e      	add	r0, sp, #56	; 0x38
 800603c:	f002 fb4d 	bl	80086da <memset>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8006040:	4b2c      	ldr	r3, [pc, #176]	; (80060f4 <MX_ADC1_Init+0xe0>)
 8006042:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006044:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006048:	645a      	str	r2, [r3, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800604a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800604c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006050:	9301      	str	r3, [sp, #4]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8006052:	2001      	movs	r0, #1
  (void)tmpreg;
 8006054:	9b01      	ldr	r3, [sp, #4]
 8006056:	f7ff ffad 	bl	8005fb4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800605a:	2004      	movs	r0, #4
 800605c:	f7ff ffaa 	bl	8005fb4 <LL_AHB1_GRP1_EnableClock>
  PA2   ------> ADC1_IN2
  PA3   ------> ADC1_IN3
  PC4   ------> ADC1_IN14 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8006060:	2503      	movs	r5, #3
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8006062:	230c      	movs	r3, #12
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006064:	a90e      	add	r1, sp, #56	; 0x38
 8006066:	4824      	ldr	r0, [pc, #144]	; (80060f8 <MX_ADC1_Init+0xe4>)
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8006068:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800606a:	950f      	str	r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800606c:	9412      	str	r4, [sp, #72]	; 0x48
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800606e:	f7fd fd37 	bl	8003ae0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8006072:	950f      	str	r5, [sp, #60]	; 0x3c
  /**Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8006074:	4d21      	ldr	r5, [pc, #132]	; (80060fc <MX_ADC1_Init+0xe8>)
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006076:	4822      	ldr	r0, [pc, #136]	; (8006100 <MX_ADC1_Init+0xec>)
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8006078:	960e      	str	r6, [sp, #56]	; 0x38
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800607a:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800607c:	9412      	str	r4, [sp, #72]	; 0x48
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800607e:	f7fd fd2f 	bl	8003ae0 <LL_GPIO_Init>
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8006082:	a902      	add	r1, sp, #8
 8006084:	4628      	mov	r0, r5
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8006086:	9402      	str	r4, [sp, #8]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8006088:	9403      	str	r4, [sp, #12]
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 800608a:	9404      	str	r4, [sp, #16]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800608c:	f7fd fcec 	bl	8003a68 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8006090:	f44f 7380 	mov.w	r3, #256	; 0x100
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8006094:	a909      	add	r1, sp, #36	; 0x24
 8006096:	4628      	mov	r0, r5
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8006098:	930d      	str	r3, [sp, #52]	; 0x34
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800609a:	9409      	str	r4, [sp, #36]	; 0x24
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 800609c:	940a      	str	r4, [sp, #40]	; 0x28
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800609e:	940b      	str	r4, [sp, #44]	; 0x2c
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80060a0:	940c      	str	r4, [sp, #48]	; 0x30
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80060a2:	f7fd fcf9 	bl	8003a98 <LL_ADC_REG_Init>
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 80060a6:	68ab      	ldr	r3, [r5, #8]
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
  LL_ADC_DisableIT_EOCS(ADC1);
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80060a8:	4816      	ldr	r0, [pc, #88]	; (8006104 <MX_ADC1_Init+0xf0>)
 80060aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80060ae:	60ab      	str	r3, [r5, #8]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 80060b0:	686b      	ldr	r3, [r5, #4]
 80060b2:	f023 0320 	bic.w	r3, r3, #32
 80060b6:	606b      	str	r3, [r5, #4]
 80060b8:	a905      	add	r1, sp, #20
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 80060ba:	9405      	str	r4, [sp, #20]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80060bc:	9406      	str	r4, [sp, #24]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80060be:	f7fd fcaf 	bl	8003a20 <LL_ADC_CommonInit>
 80060c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80060c6:	fa93 f3a3 	rbit	r3, r3
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80060ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060ce:	fab3 f383 	clz	r3, r3
 80060d2:	40da      	lsrs	r2, r3
 80060d4:	490c      	ldr	r1, [pc, #48]	; (8006108 <MX_ADC1_Init+0xf4>)
  MODIFY_REG(*preg,
 80060d6:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 80060da:	f023 031f 	bic.w	r3, r3, #31
 80060de:	f043 0302 	orr.w	r3, r3, #2
 80060e2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  /**Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_3CYCLES);
 80060e6:	4628      	mov	r0, r5
 80060e8:	4908      	ldr	r1, [pc, #32]	; (800610c <MX_ADC1_Init+0xf8>)
 80060ea:	f7ff ff71 	bl	8005fd0 <LL_ADC_SetChannelSamplingTime.constprop.0>

}
 80060ee:	b014      	add	sp, #80	; 0x50
 80060f0:	bd70      	pop	{r4, r5, r6, pc}
 80060f2:	bf00      	nop
 80060f4:	40023800 	.word	0x40023800
 80060f8:	40020000 	.word	0x40020000
 80060fc:	40012000 	.word	0x40012000
 8006100:	40020800 	.word	0x40020800
 8006104:	40012300 	.word	0x40012300
 8006108:	4001202c 	.word	0x4001202c
 800610c:	02600002 	.word	0x02600002

08006110 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8006110:	b530      	push	{r4, r5, lr}
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8006112:	2214      	movs	r2, #20
{
 8006114:	b091      	sub	sp, #68	; 0x44
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8006116:	2400      	movs	r4, #0
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8006118:	4621      	mov	r1, r4
 800611a:	eb0d 0002 	add.w	r0, sp, r2
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800611e:	9402      	str	r4, [sp, #8]
 8006120:	9403      	str	r4, [sp, #12]
 8006122:	9404      	str	r4, [sp, #16]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8006124:	f002 fad9 	bl	80086da <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006128:	4621      	mov	r1, r4
 800612a:	2218      	movs	r2, #24
 800612c:	a80a      	add	r0, sp, #40	; 0x28
 800612e:	f002 fad4 	bl	80086da <memset>
  SET_BIT(RCC->APB2ENR, Periphs);
 8006132:	4b29      	ldr	r3, [pc, #164]	; (80061d8 <MX_ADC2_Init+0xc8>)
 8006134:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006136:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800613a:	645a      	str	r2, [r3, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800613c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800613e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006142:	9301      	str	r3, [sp, #4]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC2);
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8006144:	2004      	movs	r0, #4
  (void)tmpreg;
 8006146:	9b01      	ldr	r3, [sp, #4]
 8006148:	f7ff ff34 	bl	8005fb4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800614c:	2001      	movs	r0, #1
 800614e:	f7ff ff31 	bl	8005fb4 <LL_AHB1_GRP1_EnableClock>
  PC0   ------> ADC2_IN10
  PC1   ------> ADC2_IN11
  PA4   ------> ADC2_IN4
  PA5   ------> ADC2_IN5 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8006152:	2503      	movs	r5, #3
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006154:	a90a      	add	r1, sp, #40	; 0x28
 8006156:	4821      	ldr	r0, [pc, #132]	; (80061dc <MX_ADC2_Init+0xcc>)
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8006158:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800615a:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800615c:	940e      	str	r4, [sp, #56]	; 0x38
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800615e:	f7fd fcbf 	bl	8003ae0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8006162:	950b      	str	r5, [sp, #44]	; 0x2c
  /**Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8006164:	4d1e      	ldr	r5, [pc, #120]	; (80061e0 <MX_ADC2_Init+0xd0>)
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006166:	481f      	ldr	r0, [pc, #124]	; (80061e4 <MX_ADC2_Init+0xd4>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006168:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 800616a:	2330      	movs	r3, #48	; 0x30
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800616c:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 800616e:	930a      	str	r3, [sp, #40]	; 0x28
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006170:	f7fd fcb6 	bl	8003ae0 <LL_GPIO_Init>
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8006174:	a902      	add	r1, sp, #8
 8006176:	4628      	mov	r0, r5
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8006178:	9402      	str	r4, [sp, #8]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800617a:	9403      	str	r4, [sp, #12]
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 800617c:	9404      	str	r4, [sp, #16]
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 800617e:	f7fd fc73 	bl	8003a68 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8006182:	f44f 7380 	mov.w	r3, #256	; 0x100
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8006186:	a905      	add	r1, sp, #20
 8006188:	4628      	mov	r0, r5
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 800618a:	9309      	str	r3, [sp, #36]	; 0x24
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800618c:	9405      	str	r4, [sp, #20]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 800618e:	9406      	str	r4, [sp, #24]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8006190:	9407      	str	r4, [sp, #28]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8006192:	9408      	str	r4, [sp, #32]
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8006194:	f7fd fc80 	bl	8003a98 <LL_ADC_REG_Init>
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8006198:	68ab      	ldr	r3, [r5, #8]
 800619a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800619e:	60ab      	str	r3, [r5, #8]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 80061a0:	686b      	ldr	r3, [r5, #4]
 80061a2:	f023 0320 	bic.w	r3, r3, #32
 80061a6:	606b      	str	r3, [r5, #4]
 80061a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80061ac:	fa93 f3a3 	rbit	r3, r3
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80061b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061b4:	fab3 f383 	clz	r3, r3
 80061b8:	40da      	lsrs	r2, r3
 80061ba:	490b      	ldr	r1, [pc, #44]	; (80061e8 <MX_ADC2_Init+0xd8>)
  MODIFY_REG(*preg,
 80061bc:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 80061c0:	f023 031f 	bic.w	r3, r3, #31
 80061c4:	f043 0304 	orr.w	r3, r3, #4
 80061c8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  LL_ADC_REG_SetFlagEndOfConversion(ADC2, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
  LL_ADC_DisableIT_EOCS(ADC2);
  /**Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_3CYCLES);
 80061cc:	4628      	mov	r0, r5
 80061ce:	4907      	ldr	r1, [pc, #28]	; (80061ec <MX_ADC2_Init+0xdc>)
 80061d0:	f7ff fefe 	bl	8005fd0 <LL_ADC_SetChannelSamplingTime.constprop.0>

}
 80061d4:	b011      	add	sp, #68	; 0x44
 80061d6:	bd30      	pop	{r4, r5, pc}
 80061d8:	40023800 	.word	0x40023800
 80061dc:	40020800 	.word	0x40020800
 80061e0:	40012100 	.word	0x40012100
 80061e4:	40020000 	.word	0x40020000
 80061e8:	4001212c 	.word	0x4001212c
 80061ec:	02c00004 	.word	0x02c00004

080061f0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 80061f0:	b507      	push	{r0, r1, r2, lr}
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 80061f2:	2001      	movs	r0, #1
 80061f4:	f88d 0007 	strb.w	r0, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 80061f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80061fc:	4283      	cmp	r3, r0
 80061fe:	d10b      	bne.n	8006218 <BSP_SD_Init+0x28>
  sd_state = HAL_SD_Init(&hsd);
 8006200:	4807      	ldr	r0, [pc, #28]	; (8006220 <BSP_SD_Init+0x30>)
 8006202:	f7fc fcb3 	bl	8002b6c <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8006206:	b938      	cbnz	r0, 8006218 <BSP_SD_Init+0x28>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006208:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800620c:	4804      	ldr	r0, [pc, #16]	; (8006220 <BSP_SD_Init+0x30>)
 800620e:	f7fc fcd9 	bl	8002bc4 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR;
 8006212:	3000      	adds	r0, #0
 8006214:	bf18      	it	ne
 8006216:	2001      	movne	r0, #1
}
 8006218:	b003      	add	sp, #12
 800621a:	f85d fb04 	ldr.w	pc, [sp], #4
 800621e:	bf00      	nop
 8006220:	200046a8 	.word	0x200046a8

08006224 <BSP_SD_ReadBlocks_DMA>:
{
 8006224:	b508      	push	{r3, lr}
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006226:	4613      	mov	r3, r2
 8006228:	460a      	mov	r2, r1
 800622a:	4601      	mov	r1, r0
 800622c:	4803      	ldr	r0, [pc, #12]	; (800623c <BSP_SD_ReadBlocks_DMA+0x18>)
 800622e:	f7fc f9ab 	bl	8002588 <HAL_SD_ReadBlocks_DMA>
}
 8006232:	3000      	adds	r0, #0
 8006234:	bf18      	it	ne
 8006236:	2001      	movne	r0, #1
 8006238:	bd08      	pop	{r3, pc}
 800623a:	bf00      	nop
 800623c:	200046a8 	.word	0x200046a8

08006240 <BSP_SD_WriteBlocks_DMA>:
{
 8006240:	b508      	push	{r3, lr}
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006242:	4613      	mov	r3, r2
 8006244:	460a      	mov	r2, r1
 8006246:	4601      	mov	r1, r0
 8006248:	4803      	ldr	r0, [pc, #12]	; (8006258 <BSP_SD_WriteBlocks_DMA+0x18>)
 800624a:	f7fc fa23 	bl	8002694 <HAL_SD_WriteBlocks_DMA>
}
 800624e:	3000      	adds	r0, #0
 8006250:	bf18      	it	ne
 8006252:	2001      	movne	r0, #1
 8006254:	bd08      	pop	{r3, pc}
 8006256:	bf00      	nop
 8006258:	200046a8 	.word	0x200046a8

0800625c <BSP_SD_GetCardState>:
{
 800625c:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800625e:	4803      	ldr	r0, [pc, #12]	; (800626c <BSP_SD_GetCardState+0x10>)
 8006260:	f7fc fd34 	bl	8002ccc <HAL_SD_GetCardState>
}
 8006264:	3804      	subs	r0, #4
 8006266:	bf18      	it	ne
 8006268:	2001      	movne	r0, #1
 800626a:	bd08      	pop	{r3, pc}
 800626c:	200046a8 	.word	0x200046a8

08006270 <BSP_SD_GetCardInfo>:
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006270:	4601      	mov	r1, r0
 8006272:	4801      	ldr	r0, [pc, #4]	; (8006278 <BSP_SD_GetCardInfo+0x8>)
 8006274:	f7fc bc94 	b.w	8002ba0 <HAL_SD_GetCardInfo>
 8006278:	200046a8 	.word	0x200046a8

0800627c <BSP_SD_AbortCallback>:
 800627c:	4770      	bx	lr

0800627e <HAL_SD_AbortCallback>:
{
 800627e:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 8006280:	f7ff fffc 	bl	800627c <BSP_SD_AbortCallback>
 8006284:	bd08      	pop	{r3, pc}

08006286 <HAL_SD_TxCpltCallback>:
{
 8006286:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 8006288:	f000 ff86 	bl	8007198 <BSP_SD_WriteCpltCallback>
 800628c:	bd08      	pop	{r3, pc}

0800628e <HAL_SD_RxCpltCallback>:
{
 800628e:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8006290:	f000 ff8c 	bl	80071ac <BSP_SD_ReadCpltCallback>
 8006294:	bd08      	pop	{r3, pc}
	...

08006298 <HAL_CAN_MspInit>:
  }

}

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8006298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800629a:	4604      	mov	r4, r0
 800629c:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800629e:	2214      	movs	r2, #20
 80062a0:	2100      	movs	r1, #0
 80062a2:	a803      	add	r0, sp, #12
 80062a4:	f002 fa19 	bl	80086da <memset>
  if(canHandle->Instance==CAN1)
 80062a8:	6822      	ldr	r2, [r4, #0]
 80062aa:	4b1f      	ldr	r3, [pc, #124]	; (8006328 <HAL_CAN_MspInit+0x90>)
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d138      	bne.n	8006322 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80062b0:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80062b4:	2400      	movs	r4, #0
 80062b6:	9400      	str	r4, [sp, #0]
 80062b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062ba:	481c      	ldr	r0, [pc, #112]	; (800632c <HAL_CAN_MspInit+0x94>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 80062bc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80062c0:	641a      	str	r2, [r3, #64]	; 0x40
 80062c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062c4:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80062c8:	9200      	str	r2, [sp, #0]
 80062ca:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062cc:	9401      	str	r4, [sp, #4]
 80062ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062d0:	f042 0201 	orr.w	r2, r2, #1
 80062d4:	631a      	str	r2, [r3, #48]	; 0x30
 80062d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062d8:	f002 0201 	and.w	r2, r2, #1
 80062dc:	9201      	str	r2, [sp, #4]
 80062de:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80062e0:	9402      	str	r4, [sp, #8]
 80062e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062e4:	f042 0202 	orr.w	r2, r2, #2
 80062e8:	631a      	str	r2, [r3, #48]	; 0x30
 80062ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ec:	f003 0302 	and.w	r3, r3, #2
 80062f0:	9302      	str	r3, [sp, #8]
 80062f2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062f4:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80062f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062fa:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80062fc:	2509      	movs	r5, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062fe:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006300:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006302:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006304:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8006306:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006308:	f7fb fa64 	bl	80017d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800630c:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006310:	a903      	add	r1, sp, #12
 8006312:	4807      	ldr	r0, [pc, #28]	; (8006330 <HAL_CAN_MspInit+0x98>)
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006314:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006316:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006318:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800631a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800631c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800631e:	f7fb fa59 	bl	80017d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8006322:	b009      	add	sp, #36	; 0x24
 8006324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006326:	bf00      	nop
 8006328:	40006400 	.word	0x40006400
 800632c:	40020000 	.word	0x40020000
 8006330:	40020400 	.word	0x40020400

08006334 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8006334:	b513      	push	{r0, r1, r4, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006336:	4b20      	ldr	r3, [pc, #128]	; (80063b8 <MX_DMA_Init+0x84>)
 8006338:	2400      	movs	r4, #0
 800633a:	9400      	str	r4, [sp, #0]
 800633c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800633e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006342:	631a      	str	r2, [r3, #48]	; 0x30
 8006344:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006346:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800634a:	9200      	str	r2, [sp, #0]
 800634c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800634e:	9401      	str	r4, [sp, #4]
 8006350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006352:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8006356:	631a      	str	r2, [r3, #48]	; 0x30
 8006358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800635e:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006360:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8006362:	2105      	movs	r1, #5
 8006364:	200c      	movs	r0, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006366:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8006368:	f7fb f840 	bl	80013ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800636c:	200c      	movs	r0, #12
 800636e:	f7fb f871 	bl	8001454 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8006372:	4622      	mov	r2, r4
 8006374:	2105      	movs	r1, #5
 8006376:	200d      	movs	r0, #13
 8006378:	f7fb f838 	bl	80013ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800637c:	200d      	movs	r0, #13
 800637e:	f7fb f869 	bl	8001454 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8006382:	4622      	mov	r2, r4
 8006384:	2105      	movs	r1, #5
 8006386:	200f      	movs	r0, #15
 8006388:	f7fb f830 	bl	80013ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800638c:	200f      	movs	r0, #15
 800638e:	f7fb f861 	bl	8001454 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8006392:	4622      	mov	r2, r4
 8006394:	2105      	movs	r1, #5
 8006396:	203b      	movs	r0, #59	; 0x3b
 8006398:	f7fb f828 	bl	80013ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800639c:	203b      	movs	r0, #59	; 0x3b
 800639e:	f7fb f859 	bl	8001454 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80063a2:	4622      	mov	r2, r4
 80063a4:	2105      	movs	r1, #5
 80063a6:	2045      	movs	r0, #69	; 0x45
 80063a8:	f7fb f820 	bl	80013ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80063ac:	2045      	movs	r0, #69	; 0x45
 80063ae:	f7fb f851 	bl	8001454 <HAL_NVIC_EnableIRQ>

}
 80063b2:	b002      	add	sp, #8
 80063b4:	bd10      	pop	{r4, pc}
 80063b6:	bf00      	nop
 80063b8:	40023800 	.word	0x40023800

080063bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80063bc:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80063be:	4903      	ldr	r1, [pc, #12]	; (80063cc <MX_FATFS_Init+0x10>)
 80063c0:	4803      	ldr	r0, [pc, #12]	; (80063d0 <MX_FATFS_Init+0x14>)
 80063c2:	f7fe f8df 	bl	8004584 <FATFS_LinkDriver>
 80063c6:	4b03      	ldr	r3, [pc, #12]	; (80063d4 <MX_FATFS_Init+0x18>)
 80063c8:	7018      	strb	r0, [r3, #0]
 80063ca:	bd08      	pop	{r3, pc}
 80063cc:	20004045 	.word	0x20004045
 80063d0:	08009c50 	.word	0x08009c50
 80063d4:	20004044 	.word	0x20004044

080063d8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80063d8:	b508      	push	{r3, lr}
  /* init code for FATFS */
  MX_FATFS_Init();
 80063da:	f7ff ffef 	bl	80063bc <MX_FATFS_Init>

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80063de:	2001      	movs	r0, #1
 80063e0:	f7fe f8ff 	bl	80045e2 <osDelay>
 80063e4:	e7fb      	b.n	80063de <StartDefaultTask+0x6>
	...

080063e8 <StartReadCAN>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadCAN */
void StartReadCAN(void const * argument)
{
 80063e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* USER CODE BEGIN StartReadCAN */
  /* Infinite loop */
	BARO_data* new_baro_data = 0;
	IMU_data* new_imu_data = 0;
	uint32_t timestamp = HAL_GetTick();
 80063ec:	f7fa fdc2 	bl	8000f74 <HAL_GetTick>
	uint32_t a = HAL_GetTick();
	uint8_t oldState = currentState;
 80063f0:	4f4a      	ldr	r7, [pc, #296]	; (800651c <StartReadCAN+0x134>)
		if (currentState != oldState) {
			setFrame(0, currentState, a);
			oldState = currentState;
		}
		if (readFrame() > 0) {
			if (current_msg.id_CAN == ID_GPS_SENSOR) {
 80063f2:	4d4b      	ldr	r5, [pc, #300]	; (8006520 <StartReadCAN+0x138>)
					new_imu_data->gyro_rps.y = current_msg.data;
					IMUb[4] = current_msg.data;
				}
				if (current_msg.id == DATA_ID_GYRO_Z) {
					new_imu_data->gyro_rps.z = current_msg.data;
					IMUb[5] = current_msg.data;
 80063f4:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8006538 <StartReadCAN+0x150>
	uint32_t timestamp = HAL_GetTick();
 80063f8:	4681      	mov	r9, r0
	uint32_t a = HAL_GetTick();
 80063fa:	f7fa fdbb 	bl	8000f74 <HAL_GetTick>
	uint8_t oldState = currentState;
 80063fe:	f897 b000 	ldrb.w	fp, [r7]
	IMU_data* new_imu_data = 0;
 8006402:	2400      	movs	r4, #0
	uint8_t oldState = currentState;
 8006404:	fa5f fb8b 	uxtb.w	fp, fp
		a = HAL_GetTick();
 8006408:	f7fa fdb4 	bl	8000f74 <HAL_GetTick>
		if (a - timestamp > 2000) {
 800640c:	eba0 0309 	sub.w	r3, r0, r9
 8006410:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
		a = HAL_GetTick();
 8006414:	4682      	mov	sl, r0
		if (a - timestamp > 2000) {
 8006416:	d905      	bls.n	8006424 <StartReadCAN+0x3c>
			setFrame(0, currentState, a);
 8006418:	4602      	mov	r2, r0
 800641a:	7839      	ldrb	r1, [r7, #0]
 800641c:	2000      	movs	r0, #0
 800641e:	f7ff fbe7 	bl	8005bf0 <setFrame>
			timestamp = a;
 8006422:	46d1      	mov	r9, sl
		if (currentState != oldState) {
 8006424:	783e      	ldrb	r6, [r7, #0]
 8006426:	b2f6      	uxtb	r6, r6
 8006428:	45b3      	cmp	fp, r6
 800642a:	d006      	beq.n	800643a <StartReadCAN+0x52>
			setFrame(0, currentState, a);
 800642c:	7839      	ldrb	r1, [r7, #0]
 800642e:	4652      	mov	r2, sl
 8006430:	2000      	movs	r0, #0
 8006432:	f7ff fbdd 	bl	8005bf0 <setFrame>
			oldState = currentState;
 8006436:	783e      	ldrb	r6, [r7, #0]
 8006438:	b2f6      	uxtb	r6, r6
		if (readFrame() > 0) {
 800643a:	f7ff fc03 	bl	8005c44 <readFrame>
 800643e:	b1f0      	cbz	r0, 800647e <StartReadCAN+0x96>
			if (current_msg.id_CAN == ID_GPS_SENSOR) {
 8006440:	68eb      	ldr	r3, [r5, #12]
 8006442:	2b03      	cmp	r3, #3
 8006444:	d11b      	bne.n	800647e <StartReadCAN+0x96>
				if (current_msg.id == DATA_ID_ALTITUDE) {
 8006446:	792b      	ldrb	r3, [r5, #4]
 8006448:	b9db      	cbnz	r3, 8006482 <StartReadCAN+0x9a>
					new_imu_data = &IMU_buffer[(currentImuSeqNumber + 1) % CIRC_BUFFER_SIZE];
 800644a:	4a36      	ldr	r2, [pc, #216]	; (8006524 <StartReadCAN+0x13c>)
					new_baro_data = &BARO_buffer[(currentBaroSeqNumber + 1) % CIRC_BUFFER_SIZE];
 800644c:	4b36      	ldr	r3, [pc, #216]	; (8006528 <StartReadCAN+0x140>)
					new_baro_data->altitude = current_msg.data;
 800644e:	edd5 7a00 	vldr	s15, [r5]
					new_baro_data = &BARO_buffer[(currentBaroSeqNumber + 1) % CIRC_BUFFER_SIZE];
 8006452:	681b      	ldr	r3, [r3, #0]
					new_imu_data = &IMU_buffer[(currentImuSeqNumber + 1) % CIRC_BUFFER_SIZE];
 8006454:	6814      	ldr	r4, [r2, #0]
 8006456:	4a35      	ldr	r2, [pc, #212]	; (800652c <StartReadCAN+0x144>)
 8006458:	3401      	adds	r4, #1
 800645a:	2128      	movs	r1, #40	; 0x28
 800645c:	f004 0407 	and.w	r4, r4, #7
					new_baro_data = &BARO_buffer[(currentBaroSeqNumber + 1) % CIRC_BUFFER_SIZE];
 8006460:	3301      	adds	r3, #1
					new_baro_data->altitude = current_msg.data;
 8006462:	eef8 7a67 	vcvt.f32.u32	s15, s15
					new_imu_data = &IMU_buffer[(currentImuSeqNumber + 1) % CIRC_BUFFER_SIZE];
 8006466:	fb01 2404 	mla	r4, r1, r4, r2
					new_baro_data = &BARO_buffer[(currentBaroSeqNumber + 1) % CIRC_BUFFER_SIZE];
 800646a:	f003 0307 	and.w	r3, r3, #7
					new_baro_data->altitude = current_msg.data;
 800646e:	210c      	movs	r1, #12
 8006470:	fb01 2303 	mla	r3, r1, r3, r2
 8006474:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148
					zdata[0] = current_msg.data;
 8006478:	4b2d      	ldr	r3, [pc, #180]	; (8006530 <StartReadCAN+0x148>)
 800647a:	edc3 7a00 	vstr	s15, [r3]
{
 800647e:	46b3      	mov	fp, r6
 8006480:	e7c2      	b.n	8006408 <StartReadCAN+0x20>
				if (current_msg.id == DATA_ID_ACCELERATION_X) {
 8006482:	2b01      	cmp	r3, #1
 8006484:	d108      	bne.n	8006498 <StartReadCAN+0xb0>
					new_imu_data->acceleration.x = current_msg.data;
 8006486:	edd5 7a00 	vldr	s15, [r5]
 800648a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800648e:	edc4 7a00 	vstr	s15, [r4]
					IMUb[0] = current_msg.data;
 8006492:	edc8 7a00 	vstr	s15, [r8]
 8006496:	e7f2      	b.n	800647e <StartReadCAN+0x96>
				if (current_msg.id == DATA_ID_ACCELERATION_Y) {
 8006498:	2b02      	cmp	r3, #2
 800649a:	d108      	bne.n	80064ae <StartReadCAN+0xc6>
					new_imu_data->acceleration.y = current_msg.data;
 800649c:	edd5 7a00 	vldr	s15, [r5]
 80064a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064a4:	edc4 7a01 	vstr	s15, [r4, #4]
					IMUb[1] = current_msg.data;
 80064a8:	edc8 7a01 	vstr	s15, [r8, #4]
 80064ac:	e7e7      	b.n	800647e <StartReadCAN+0x96>
				if (current_msg.id == DATA_ID_ACCELERATION_Z) {
 80064ae:	2b03      	cmp	r3, #3
 80064b0:	d108      	bne.n	80064c4 <StartReadCAN+0xdc>
					new_imu_data->acceleration.y = current_msg.data;
 80064b2:	edd5 7a00 	vldr	s15, [r5]
 80064b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ba:	edc4 7a01 	vstr	s15, [r4, #4]
					IMUb[2] = current_msg.data;
 80064be:	edc8 7a02 	vstr	s15, [r8, #8]
 80064c2:	e7dc      	b.n	800647e <StartReadCAN+0x96>
				if (current_msg.id == DATA_ID_GYRO_X) {
 80064c4:	2b04      	cmp	r3, #4
 80064c6:	d108      	bne.n	80064da <StartReadCAN+0xf2>
					new_imu_data->gyro_rps.x = current_msg.data;
 80064c8:	edd5 7a00 	vldr	s15, [r5]
 80064cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064d0:	edc4 7a03 	vstr	s15, [r4, #12]
					IMUb[3] = current_msg.data;
 80064d4:	edc8 7a03 	vstr	s15, [r8, #12]
 80064d8:	e7d1      	b.n	800647e <StartReadCAN+0x96>
				if (current_msg.id == DATA_ID_GYRO_Y) {
 80064da:	2b05      	cmp	r3, #5
 80064dc:	d108      	bne.n	80064f0 <StartReadCAN+0x108>
					new_imu_data->gyro_rps.y = current_msg.data;
 80064de:	edd5 7a00 	vldr	s15, [r5]
 80064e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064e6:	edc4 7a04 	vstr	s15, [r4, #16]
					IMUb[4] = current_msg.data;
 80064ea:	edc8 7a04 	vstr	s15, [r8, #16]
 80064ee:	e7c6      	b.n	800647e <StartReadCAN+0x96>
				if (current_msg.id == DATA_ID_GYRO_Z) {
 80064f0:	2b06      	cmp	r3, #6
 80064f2:	d1c4      	bne.n	800647e <StartReadCAN+0x96>
					IMU_avail = 1;
 80064f4:	4b0f      	ldr	r3, [pc, #60]	; (8006534 <StartReadCAN+0x14c>)
					new_imu_data->gyro_rps.z = current_msg.data;
 80064f6:	edd5 7a00 	vldr	s15, [r5]
					IMU_avail = 1;
 80064fa:	2201      	movs	r2, #1
 80064fc:	601a      	str	r2, [r3, #0]
				    currentBaroSeqNumber++;
 80064fe:	4a0a      	ldr	r2, [pc, #40]	; (8006528 <StartReadCAN+0x140>)
 8006500:	6813      	ldr	r3, [r2, #0]
 8006502:	3301      	adds	r3, #1
 8006504:	6013      	str	r3, [r2, #0]
				    currentImuSeqNumber++;
 8006506:	4a07      	ldr	r2, [pc, #28]	; (8006524 <StartReadCAN+0x13c>)
 8006508:	6813      	ldr	r3, [r2, #0]
					new_imu_data->gyro_rps.z = current_msg.data;
 800650a:	eef8 7a67 	vcvt.f32.u32	s15, s15
				    currentImuSeqNumber++;
 800650e:	3301      	adds	r3, #1
					new_imu_data->gyro_rps.z = current_msg.data;
 8006510:	edc4 7a05 	vstr	s15, [r4, #20]
					IMUb[5] = current_msg.data;
 8006514:	edc8 7a05 	vstr	s15, [r8, #20]
				    currentImuSeqNumber++;
 8006518:	6013      	str	r3, [r2, #0]
 800651a:	e7b0      	b.n	800647e <StartReadCAN+0x96>
 800651c:	20004000 	.word	0x20004000
 8006520:	20003fec 	.word	0x20003fec
 8006524:	20003f94 	.word	0x20003f94
 8006528:	20003f90 	.word	0x20003f90
 800652c:	2000007c 	.word	0x2000007c
 8006530:	200044c0 	.word	0x200044c0
 8006534:	20003f98 	.word	0x20003f98
 8006538:	200044d0 	.word	0x200044d0

0800653c <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 800653c:	b570      	push	{r4, r5, r6, lr}
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800653e:	4c1b      	ldr	r4, [pc, #108]	; (80065ac <MX_FREERTOS_Init+0x70>)
 8006540:	4626      	mov	r6, r4
 8006542:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
void MX_FREERTOS_Init(void) {
 8006544:	b094      	sub	sp, #80	; 0x50
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8006546:	466d      	mov	r5, sp
 8006548:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800654a:	6833      	ldr	r3, [r6, #0]
 800654c:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800654e:	2100      	movs	r1, #0
 8006550:	4668      	mov	r0, sp
 8006552:	f7fe f82e 	bl	80045b2 <osThreadCreate>
 8006556:	4b16      	ldr	r3, [pc, #88]	; (80065b0 <MX_FREERTOS_Init+0x74>)
  osThreadDef(readCAN, StartReadCAN, osPriorityNormal, 0, 128);
 8006558:	f104 0614 	add.w	r6, r4, #20
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800655c:	6018      	str	r0, [r3, #0]
  osThreadDef(readCAN, StartReadCAN, osPriorityNormal, 0, 128);
 800655e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006560:	ad05      	add	r5, sp, #20
 8006562:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006564:	6833      	ldr	r3, [r6, #0]
 8006566:	602b      	str	r3, [r5, #0]
  readCANHandle = osThreadCreate(osThread(readCAN), NULL);
 8006568:	2100      	movs	r1, #0
 800656a:	a805      	add	r0, sp, #20
 800656c:	f7fe f821 	bl	80045b2 <osThreadCreate>
 8006570:	4b10      	ldr	r3, [pc, #64]	; (80065b4 <MX_FREERTOS_Init+0x78>)
  osThreadDef(state_machine, TK_state_machine, osPriorityHigh, 0, 1024);
 8006572:	f104 0628 	add.w	r6, r4, #40	; 0x28
  readCANHandle = osThreadCreate(osThread(readCAN), NULL);
 8006576:	6018      	str	r0, [r3, #0]
  osThreadDef(state_machine, TK_state_machine, osPriorityHigh, 0, 1024);
 8006578:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800657a:	ad0a      	add	r5, sp, #40	; 0x28
 800657c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800657e:	6833      	ldr	r3, [r6, #0]
 8006580:	602b      	str	r3, [r5, #0]
  state_machineHandle = osThreadCreate(osThread(state_machine), NULL);
 8006582:	2100      	movs	r1, #0
 8006584:	a80a      	add	r0, sp, #40	; 0x28
 8006586:	f7fe f814 	bl	80045b2 <osThreadCreate>
 800658a:	4b0b      	ldr	r3, [pc, #44]	; (80065b8 <MX_FREERTOS_Init+0x7c>)
  osThreadDef(kalman, TK_kalman, osPriorityHigh, 0, 1024);
 800658c:	343c      	adds	r4, #60	; 0x3c
  state_machineHandle = osThreadCreate(osThread(state_machine), NULL);
 800658e:	6018      	str	r0, [r3, #0]
  osThreadDef(kalman, TK_kalman, osPriorityHigh, 0, 1024);
 8006590:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006592:	ad0f      	add	r5, sp, #60	; 0x3c
 8006594:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006596:	6823      	ldr	r3, [r4, #0]
 8006598:	602b      	str	r3, [r5, #0]
  kalman_handle = osThreadCreate(osThread(kalman), NULL);
 800659a:	2100      	movs	r1, #0
 800659c:	a80f      	add	r0, sp, #60	; 0x3c
 800659e:	f7fe f808 	bl	80045b2 <osThreadCreate>
 80065a2:	4b06      	ldr	r3, [pc, #24]	; (80065bc <MX_FREERTOS_Init+0x80>)
 80065a4:	6018      	str	r0, [r3, #0]
}
 80065a6:	b014      	add	sp, #80	; 0x50
 80065a8:	bd70      	pop	{r4, r5, r6, pc}
 80065aa:	bf00      	nop
 80065ac:	08009a48 	.word	0x08009a48
 80065b0:	200044b0 	.word	0x200044b0
 80065b4:	200044b4 	.word	0x200044b4
 80065b8:	200044bc 	.word	0x200044bc
 80065bc:	200044b8 	.word	0x200044b8

080065c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80065c0:	b086      	sub	sp, #24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80065c2:	4b1b      	ldr	r3, [pc, #108]	; (8006630 <MX_GPIO_Init+0x70>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	9201      	str	r2, [sp, #4]
 80065c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80065ca:	f041 0104 	orr.w	r1, r1, #4
 80065ce:	6319      	str	r1, [r3, #48]	; 0x30
 80065d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80065d2:	f001 0104 	and.w	r1, r1, #4
 80065d6:	9101      	str	r1, [sp, #4]
 80065d8:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80065da:	9202      	str	r2, [sp, #8]
 80065dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80065de:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80065e2:	6319      	str	r1, [r3, #48]	; 0x30
 80065e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80065e6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80065ea:	9102      	str	r1, [sp, #8]
 80065ec:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80065ee:	9203      	str	r2, [sp, #12]
 80065f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80065f2:	f041 0101 	orr.w	r1, r1, #1
 80065f6:	6319      	str	r1, [r3, #48]	; 0x30
 80065f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80065fa:	f001 0101 	and.w	r1, r1, #1
 80065fe:	9103      	str	r1, [sp, #12]
 8006600:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006602:	9204      	str	r2, [sp, #16]
 8006604:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006606:	f041 0102 	orr.w	r1, r1, #2
 800660a:	6319      	str	r1, [r3, #48]	; 0x30
 800660c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800660e:	f001 0102 	and.w	r1, r1, #2
 8006612:	9104      	str	r1, [sp, #16]
 8006614:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006616:	9205      	str	r2, [sp, #20]
 8006618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800661a:	f042 0208 	orr.w	r2, r2, #8
 800661e:	631a      	str	r2, [r3, #48]	; 0x30
 8006620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006622:	f003 0308 	and.w	r3, r3, #8
 8006626:	9305      	str	r3, [sp, #20]
 8006628:	9b05      	ldr	r3, [sp, #20]

}
 800662a:	b006      	add	sp, #24
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	40023800 	.word	0x40023800
 8006634:	00000000 	.word	0x00000000

08006638 <TK_kalman>:

//void error(const char * msg)
//{
//    fprintf(stderr, "%s\n", msg);
//}
void TK_kalman() {
 8006638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800663c:	ed2d 8b0a 	vpush	{d8-d12}
 8006640:	f6ad 5d9c 	subw	sp, sp, #3484	; 0xd9c
	// Do generic EKF initialization
	ekf_t ekf;
	ekf_init(&ekf, Nsta, Mobs);
 8006644:	ad80      	add	r5, sp, #512	; 0x200
 8006646:	2204      	movs	r2, #4
 8006648:	2109      	movs	r1, #9
 800664a:	4628      	mov	r0, r5
 800664c:	f001 f88e 	bl	800776c <ekf_init>
		ekf->x[i] = 0;
 8006650:	2600      	movs	r6, #0
	float Qtmp[81] = { 1.3085e-08, 9.2466e-25, 6.6028e-26, 9.8168e-07,
 8006652:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8006656:	49be      	ldr	r1, [pc, #760]	; (8006950 <TK_kalman+0x318>)
 8006658:	a82f      	add	r0, sp, #188	; 0xbc
 800665a:	f002 f833 	bl	80086c4 <memcpy>
 800665e:	ac82      	add	r4, sp, #520	; 0x208
 8006660:	2300      	movs	r3, #0
 8006662:	4637      	mov	r7, r6
 8006664:	f503 71b8 	add.w	r1, r3, #368	; 0x170
		ekf->x[i] = 0;
 8006668:	f844 6b04 	str.w	r6, [r4], #4
 800666c:	4429      	add	r1, r5
 800666e:	2200      	movs	r2, #0
			ekf->Q[i][j] = Qtmp[i * 9 + j];
 8006670:	18d0      	adds	r0, r2, r3
 8006672:	f10d 0ebc 	add.w	lr, sp, #188	; 0xbc
 8006676:	4470      	add	r0, lr
 8006678:	3204      	adds	r2, #4
 800667a:	6800      	ldr	r0, [r0, #0]
 800667c:	f841 0b04 	str.w	r0, [r1], #4
		for (j = 0; j < 9; j++)
 8006680:	2a24      	cmp	r2, #36	; 0x24
 8006682:	d1f5      	bne.n	8006670 <TK_kalman+0x38>
 8006684:	3324      	adds	r3, #36	; 0x24
	for (i = 0; i < 9; i++) {
 8006686:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 800668a:	d1eb      	bne.n	8006664 <TK_kalman+0x2c>
	float P0[9] = { 2, 2, 2, 1, 1, 1, 0.1, 0.1, 0.1 };
 800668c:	4cb1      	ldr	r4, [pc, #708]	; (8006954 <TK_kalman+0x31c>)
 800668e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006690:	ae26      	add	r6, sp, #152	; 0x98
 8006692:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006694:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006696:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006698:	f854 3b04 	ldr.w	r3, [r4], #4
 800669c:	6033      	str	r3, [r6, #0]
	float R0[4] = { 100, 100, 10, 10 }; //accuracy of the GPS and baro
 800669e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80066a2:	ae22      	add	r6, sp, #136	; 0x88
 80066a4:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80066a8:	ab26      	add	r3, sp, #152	; 0x98
 80066aa:	2200      	movs	r2, #0
		ekf->P[i][i] = P0[i];
 80066ac:	18a9      	adds	r1, r5, r2
 80066ae:	3228      	adds	r2, #40	; 0x28
 80066b0:	f853 0b04 	ldr.w	r0, [r3], #4
 80066b4:	62c8      	str	r0, [r1, #44]	; 0x2c
	for (i = 0; i < 9; ++i)
 80066b6:	f5b2 7fb4 	cmp.w	r2, #360	; 0x168
 80066ba:	d1f7      	bne.n	80066ac <TK_kalman+0x74>
		ekf->R[i][i] = R0[i];
 80066bc:	6833      	ldr	r3, [r6, #0]
 80066be:	f8c5 32b4 	str.w	r3, [r5, #692]	; 0x2b4
 80066c2:	6873      	ldr	r3, [r6, #4]
 80066c4:	f8c5 32c8 	str.w	r3, [r5, #712]	; 0x2c8
 80066c8:	68b3      	ldr	r3, [r6, #8]
 80066ca:	f8c5 32dc 	str.w	r3, [r5, #732]	; 0x2dc
 80066ce:	68f3      	ldr	r3, [r6, #12]
 80066d0:	f8c5 32f0 	str.w	r3, [r5, #752]	; 0x2f0
 80066d4:	2300      	movs	r3, #0
 80066d6:	aa2f      	add	r2, sp, #188	; 0xbc
 80066d8:	441a      	add	r2, r3
 80066da:	a92f      	add	r1, sp, #188	; 0xbc
 80066dc:	3324      	adds	r3, #36	; 0x24
 80066de:	4419      	add	r1, r3
//    fprintf(ofp, "pX,pY,pZ,vX,vY,vZ\n");

	int j, k;
	for (j = 0; j < 9; j++)
		for (k = 0; k < 9; k++)
			F11[j][k] = 0;
 80066e0:	f842 7b04 	str.w	r7, [r2], #4
		for (k = 0; k < 9; k++)
 80066e4:	4291      	cmp	r1, r2
 80066e6:	d1fb      	bne.n	80066e0 <TK_kalman+0xa8>
	for (j = 0; j < 9; j++)
 80066e8:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 80066ec:	d1f3      	bne.n	80066d6 <TK_kalman+0x9e>
	for (j = 0; j < 6; j++) {
		IMUb[j] = 0;
 80066ee:	4c9a      	ldr	r4, [pc, #616]	; (8006958 <TK_kalman+0x320>)

		//readdata(ifp, SV_Pos, SV_Rho);
		// true model 4 rocket
//        readdata2(datafp, IMUb, zdata);
		//TODO: Add data
		if (IMU_avail == 1) {
 80066f0:	4d9a      	ldr	r5, [pc, #616]	; (800695c <TK_kalman+0x324>)
		IMUb[j] = 0;
 80066f2:	6027      	str	r7, [r4, #0]
 80066f4:	2305      	movs	r3, #5
 80066f6:	6067      	str	r7, [r4, #4]
 80066f8:	60a7      	str	r7, [r4, #8]
 80066fa:	60e7      	str	r7, [r4, #12]
 80066fc:	6127      	str	r7, [r4, #16]
 80066fe:	6167      	str	r7, [r4, #20]
 8006700:	930f      	str	r3, [sp, #60]	; 0x3c
		if (IMU_avail == 1) {
 8006702:	682b      	ldr	r3, [r5, #0]
 8006704:	2b01      	cmp	r3, #1
 8006706:	f040 82c5 	bne.w	8006c94 <TK_kalman+0x65c>
			IMU_avail = 0;
			//getting the data of the captor in the mapping frame IMUb to IMUm
			sr = sin(ekf.x[6]); //roll
 800670a:	eddd 9a88 	vldr	s19, [sp, #544]	; 0x220
			IMUm[3] = (float) IMUmd[3];
			IMUm[4] = (float) IMUmd[4];
			IMUm[5] = (float) IMUmd[5];

			//fill fx
			ekf.fx[6] = ekf.x[6] + IMUm[3] * dt;
 800670e:	ed9f 8a94 	vldr	s16, [pc, #592]	; 8006960 <TK_kalman+0x328>
			IMU_avail = 0;
 8006712:	2300      	movs	r3, #0
 8006714:	602b      	str	r3, [r5, #0]
			sr = sin(ekf.x[6]); //roll
 8006716:	ee19 0a90 	vmov	r0, s19
 800671a:	f7f9 fedd 	bl	80004d8 <__aeabi_f2d>
 800671e:	ec41 0b10 	vmov	d0, r0, r1
 8006722:	ec41 0b1c 	vmov	d12, r0, r1
 8006726:	f002 f827 	bl	8008778 <sin>
			sp = sin(ekf.x[7]); //pitch
 800672a:	ed9d 9a89 	vldr	s18, [sp, #548]	; 0x224
 800672e:	ee19 0a10 	vmov	r0, s18
			sr = sin(ekf.x[6]); //roll
 8006732:	ec5b ab10 	vmov	sl, fp, d0
			sp = sin(ekf.x[7]); //pitch
 8006736:	f7f9 fecf 	bl	80004d8 <__aeabi_f2d>
 800673a:	ec41 0b10 	vmov	d0, r0, r1
 800673e:	ec41 0b1b 	vmov	d11, r0, r1
 8006742:	f002 f819 	bl	8008778 <sin>
			sy = sin(ekf.x[8]); //yaw
 8006746:	eddd 8a8a 	vldr	s17, [sp, #552]	; 0x228
 800674a:	ee18 0a90 	vmov	r0, s17
			sp = sin(ekf.x[7]); //pitch
 800674e:	ed8d 0b00 	vstr	d0, [sp]
			sy = sin(ekf.x[8]); //yaw
 8006752:	f7f9 fec1 	bl	80004d8 <__aeabi_f2d>
 8006756:	ec41 0b10 	vmov	d0, r0, r1
 800675a:	ec41 0b1a 	vmov	d10, r0, r1
 800675e:	f002 f80b 	bl	8008778 <sin>
 8006762:	ed8d 0b02 	vstr	d0, [sp, #8]
			cr = cos(ekf.x[6]); //roll
 8006766:	eeb0 0a4c 	vmov.f32	s0, s24
 800676a:	eef0 0a6c 	vmov.f32	s1, s25
 800676e:	f001 ffbf 	bl	80086f0 <cos>
 8006772:	ec57 6b10 	vmov	r6, r7, d0
			cp = cos(ekf.x[7]); //pitch
 8006776:	eeb0 0a4b 	vmov.f32	s0, s22
 800677a:	eef0 0a6b 	vmov.f32	s1, s23
 800677e:	f001 ffb7 	bl	80086f0 <cos>
 8006782:	ed8d 0b04 	vstr	d0, [sp, #16]
			cy = cos(ekf.x[8]); //yaw
 8006786:	eeb0 0a4a 	vmov.f32	s0, s20
 800678a:	eef0 0a6a 	vmov.f32	s1, s21
 800678e:	f001 ffaf 	bl	80086f0 <cos>
			IMUmd[0] = cp * cy * IMUb[0] + (sr * sp * cy + cr * sy) * IMUb[1]
 8006792:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006796:	ec53 2b10 	vmov	r2, r3, d0
			cy = cos(ekf.x[8]); //yaw
 800679a:	ed8d 0b06 	vstr	d0, [sp, #24]
			IMUmd[0] = cp * cy * IMUb[0] + (sr * sp * cy + cr * sy) * IMUb[1]
 800679e:	f7f9 feef 	bl	8000580 <__aeabi_dmul>
 80067a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80067a6:	6820      	ldr	r0, [r4, #0]
 80067a8:	f7f9 fe96 	bl	80004d8 <__aeabi_f2d>
 80067ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80067b4:	4650      	mov	r0, sl
 80067b6:	4659      	mov	r1, fp
 80067b8:	f7f9 fee2 	bl	8000580 <__aeabi_dmul>
 80067bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067c0:	f7f9 fede 	bl	8000580 <__aeabi_dmul>
 80067c4:	4632      	mov	r2, r6
 80067c6:	4680      	mov	r8, r0
 80067c8:	4689      	mov	r9, r1
 80067ca:	463b      	mov	r3, r7
 80067cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067d0:	f7f9 fed6 	bl	8000580 <__aeabi_dmul>
 80067d4:	4602      	mov	r2, r0
 80067d6:	460b      	mov	r3, r1
 80067d8:	4640      	mov	r0, r8
 80067da:	4649      	mov	r1, r9
 80067dc:	f7f9 fd1e 	bl	800021c <__adddf3>
 80067e0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80067e4:	6860      	ldr	r0, [r4, #4]
 80067e6:	f7f9 fe77 	bl	80004d8 <__aeabi_f2d>
					+ (-cr * sp * cy + sr * sy) * IMUb[2];
 80067ea:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80067ee:	9614      	str	r6, [sp, #80]	; 0x50
 80067f0:	9315      	str	r3, [sp, #84]	; 0x54
			IMUmd[0] = cp * cy * IMUb[0] + (sr * sp * cy + cr * sy) * IMUb[1]
 80067f2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
					+ (-cr * sp * cy + sr * sy) * IMUb[2];
 80067f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067fa:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80067fe:	f7f9 febf 	bl	8000580 <__aeabi_dmul>
 8006802:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006806:	f7f9 febb 	bl	8000580 <__aeabi_dmul>
 800680a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800680e:	4680      	mov	r8, r0
 8006810:	4689      	mov	r9, r1
 8006812:	4650      	mov	r0, sl
 8006814:	4659      	mov	r1, fp
 8006816:	f7f9 feb3 	bl	8000580 <__aeabi_dmul>
 800681a:	4602      	mov	r2, r0
 800681c:	460b      	mov	r3, r1
 800681e:	4640      	mov	r0, r8
 8006820:	4649      	mov	r1, r9
 8006822:	f7f9 fcfb 	bl	800021c <__adddf3>
 8006826:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 800682a:	68a0      	ldr	r0, [r4, #8]
 800682c:	f7f9 fe54 	bl	80004d8 <__aeabi_f2d>
			IMUmd[1] = -cp * sy * IMUb[0] + (-sr * sp * sy + cr * cy) * IMUb[1]
 8006830:	9b04      	ldr	r3, [sp, #16]
 8006832:	9318      	str	r3, [sp, #96]	; 0x60
 8006834:	9b05      	ldr	r3, [sp, #20]
 8006836:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800683a:	9319      	str	r3, [sp, #100]	; 0x64
					+ (-cr * sp * cy + sr * sy) * IMUb[2];
 800683c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
			IMUmd[1] = -cp * sy * IMUb[0] + (-sr * sp * sy + cr * cy) * IMUb[1]
 8006840:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006844:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8006848:	f7f9 fe9a 	bl	8000580 <__aeabi_dmul>
 800684c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006850:	f8cd a070 	str.w	sl, [sp, #112]	; 0x70
 8006854:	931d      	str	r3, [sp, #116]	; 0x74
 8006856:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
 800685a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800685e:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8006862:	f7f9 fe8d 	bl	8000580 <__aeabi_dmul>
 8006866:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800686a:	f7f9 fe89 	bl	8000580 <__aeabi_dmul>
 800686e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006872:	4680      	mov	r8, r0
 8006874:	4689      	mov	r9, r1
 8006876:	4630      	mov	r0, r6
 8006878:	4639      	mov	r1, r7
 800687a:	f7f9 fe81 	bl	8000580 <__aeabi_dmul>
 800687e:	4602      	mov	r2, r0
 8006880:	460b      	mov	r3, r1
 8006882:	4640      	mov	r0, r8
 8006884:	4649      	mov	r1, r9
 8006886:	f7f9 fcc9 	bl	800021c <__adddf3>
					+ (cr * sp * sy + sr * cy) * IMUb[2];
 800688a:	4632      	mov	r2, r6
 800688c:	463b      	mov	r3, r7
			IMUmd[1] = -cp * sy * IMUb[0] + (-sr * sp * sy + cr * cy) * IMUb[1]
 800688e:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
					+ (cr * sp * sy + sr * cy) * IMUb[2];
 8006892:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006896:	f7f9 fe73 	bl	8000580 <__aeabi_dmul>
 800689a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800689e:	f7f9 fe6f 	bl	8000580 <__aeabi_dmul>
 80068a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068a6:	4680      	mov	r8, r0
 80068a8:	4689      	mov	r9, r1
 80068aa:	4650      	mov	r0, sl
 80068ac:	4659      	mov	r1, fp
 80068ae:	f7f9 fe67 	bl	8000580 <__aeabi_dmul>
 80068b2:	4602      	mov	r2, r0
 80068b4:	460b      	mov	r3, r1
 80068b6:	4640      	mov	r0, r8
 80068b8:	4649      	mov	r1, r9
 80068ba:	f7f9 fcaf 	bl	800021c <__adddf3>
			IMUmd[2] = sp * IMUb[0] - sr * cp * IMUb[1] + cr * cp * IMUb[2];
 80068be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
					+ (cr * sp * sy + sr * cy) * IMUb[2];
 80068c2:	e9cd 0106 	strd	r0, r1, [sp, #24]
			IMUmd[2] = sp * IMUb[0] - sr * cp * IMUb[1] + cr * cp * IMUb[2];
 80068c6:	4650      	mov	r0, sl
 80068c8:	4659      	mov	r1, fp
 80068ca:	f7f9 fe59 	bl	8000580 <__aeabi_dmul>
 80068ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068d2:	e9cd 0120 	strd	r0, r1, [sp, #128]	; 0x80
 80068d6:	4630      	mov	r0, r6
 80068d8:	4639      	mov	r1, r7
 80068da:	f7f9 fe51 	bl	8000580 <__aeabi_dmul>
 80068de:	e9cd 0104 	strd	r0, r1, [sp, #16]
			IMUmd[3] = cp * cy * IMUb[3] + (sr * sp * cy + cr * sy) * IMUb[4]
 80068e2:	68e0      	ldr	r0, [r4, #12]
 80068e4:	f7f9 fdf8 	bl	80004d8 <__aeabi_f2d>
 80068e8:	4680      	mov	r8, r0
 80068ea:	6920      	ldr	r0, [r4, #16]
 80068ec:	4689      	mov	r9, r1
 80068ee:	f7f9 fdf3 	bl	80004d8 <__aeabi_f2d>
 80068f2:	4682      	mov	sl, r0
					+ (-cr * sp * cy + sr * sy) * IMUb[5];
 80068f4:	6960      	ldr	r0, [r4, #20]
			IMUmd[3] = cp * cy * IMUb[3] + (sr * sp * cy + cr * sy) * IMUb[4]
 80068f6:	468b      	mov	fp, r1
					+ (-cr * sp * cy + sr * sy) * IMUb[5];
 80068f8:	f7f9 fdee 	bl	80004d8 <__aeabi_f2d>
			IMUmd[0] = cp * cy * IMUb[0] + (sr * sp * cy + cr * sy) * IMUb[1]
 80068fc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
					+ (-cr * sp * cy + sr * sy) * IMUb[5];
 8006900:	e9cd 0102 	strd	r0, r1, [sp, #8]
			IMUmd[0] = cp * cy * IMUb[0] + (sr * sp * cy + cr * sy) * IMUb[1]
 8006904:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006908:	f7f9 fe3a 	bl	8000580 <__aeabi_dmul>
 800690c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006910:	4606      	mov	r6, r0
 8006912:	460f      	mov	r7, r1
 8006914:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8006918:	f7f9 fe32 	bl	8000580 <__aeabi_dmul>
 800691c:	4602      	mov	r2, r0
 800691e:	460b      	mov	r3, r1
 8006920:	4630      	mov	r0, r6
 8006922:	4639      	mov	r1, r7
 8006924:	f7f9 fc7a 	bl	800021c <__adddf3>
					+ (-cr * sp * cy + sr * sy) * IMUb[2];
 8006928:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			IMUmd[0] = cp * cy * IMUb[0] + (sr * sp * cy + cr * sy) * IMUb[1]
 800692c:	4606      	mov	r6, r0
 800692e:	460f      	mov	r7, r1
					+ (-cr * sp * cy + sr * sy) * IMUb[2];
 8006930:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8006934:	f7f9 fe24 	bl	8000580 <__aeabi_dmul>
 8006938:	4602      	mov	r2, r0
 800693a:	460b      	mov	r3, r1
 800693c:	4630      	mov	r0, r6
 800693e:	4639      	mov	r1, r7
 8006940:	f7f9 fc6c 	bl	800021c <__adddf3>
			IMUm[0] = (float) IMUmd[0];
 8006944:	f7fa f8f4 	bl	8000b30 <__aeabi_d2f>
			IMUmd[1] = -cp * sy * IMUb[0] + (-sr * sp * sy + cr * cy) * IMUb[1]
 8006948:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800694c:	e00a      	b.n	8006964 <TK_kalman+0x32c>
 800694e:	bf00      	nop
 8006950:	08009a98 	.word	0x08009a98
 8006954:	08009bdc 	.word	0x08009bdc
 8006958:	200044d0 	.word	0x200044d0
 800695c:	20003f98 	.word	0x20003f98
 8006960:	3ca3d70a 	.word	0x3ca3d70a
			IMUm[0] = (float) IMUmd[0];
 8006964:	ee0a 0a90 	vmov	s21, r0
			IMUmd[1] = -cp * sy * IMUb[0] + (-sr * sp * sy + cr * cy) * IMUb[1]
 8006968:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800696c:	f7f9 fe08 	bl	8000580 <__aeabi_dmul>
 8006970:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 8006974:	4606      	mov	r6, r0
 8006976:	460f      	mov	r7, r1
 8006978:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800697c:	f7f9 fe00 	bl	8000580 <__aeabi_dmul>
 8006980:	4602      	mov	r2, r0
 8006982:	460b      	mov	r3, r1
 8006984:	4630      	mov	r0, r6
 8006986:	4639      	mov	r1, r7
 8006988:	f7f9 fc48 	bl	800021c <__adddf3>
					+ (cr * sp * sy + sr * cy) * IMUb[2];
 800698c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			IMUmd[1] = -cp * sy * IMUb[0] + (-sr * sp * sy + cr * cy) * IMUb[1]
 8006990:	4606      	mov	r6, r0
 8006992:	460f      	mov	r7, r1
					+ (cr * sp * sy + sr * cy) * IMUb[2];
 8006994:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006998:	f7f9 fdf2 	bl	8000580 <__aeabi_dmul>
 800699c:	4602      	mov	r2, r0
 800699e:	460b      	mov	r3, r1
 80069a0:	4630      	mov	r0, r6
 80069a2:	4639      	mov	r1, r7
 80069a4:	f7f9 fc3a 	bl	800021c <__adddf3>
			IMUm[1] = (float) IMUmd[1];
 80069a8:	f7fa f8c2 	bl	8000b30 <__aeabi_d2f>
			IMUmd[2] = sp * IMUb[0] - sr * cp * IMUb[1] + cr * cp * IMUb[2];
 80069ac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
			IMUm[1] = (float) IMUmd[1];
 80069b0:	ee0a 0a10 	vmov	s20, r0
			IMUmd[2] = sp * IMUb[0] - sr * cp * IMUb[1] + cr * cp * IMUb[2];
 80069b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069b8:	f7f9 fde2 	bl	8000580 <__aeabi_dmul>
 80069bc:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 80069c0:	4606      	mov	r6, r0
 80069c2:	460f      	mov	r7, r1
 80069c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80069c8:	f7f9 fdda 	bl	8000580 <__aeabi_dmul>
 80069cc:	4602      	mov	r2, r0
 80069ce:	460b      	mov	r3, r1
 80069d0:	4630      	mov	r0, r6
 80069d2:	4639      	mov	r1, r7
 80069d4:	f7f9 fc20 	bl	8000218 <__aeabi_dsub>
 80069d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069dc:	4606      	mov	r6, r0
 80069de:	460f      	mov	r7, r1
 80069e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80069e4:	f7f9 fdcc 	bl	8000580 <__aeabi_dmul>
 80069e8:	4602      	mov	r2, r0
 80069ea:	460b      	mov	r3, r1
 80069ec:	4630      	mov	r0, r6
 80069ee:	4639      	mov	r1, r7
 80069f0:	f7f9 fc14 	bl	800021c <__adddf3>
			IMUm[2] = (float) IMUmd[2] - 9.81;
 80069f4:	f7fa f89c 	bl	8000b30 <__aeabi_d2f>
 80069f8:	f7f9 fd6e 	bl	80004d8 <__aeabi_f2d>
 80069fc:	a3a9      	add	r3, pc, #676	; (adr r3, 8006ca4 <TK_kalman+0x66c>)
 80069fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a02:	f7f9 fc09 	bl	8000218 <__aeabi_dsub>
 8006a06:	f7fa f893 	bl	8000b30 <__aeabi_d2f>
			IMUmd[3] = cp * cy * IMUb[3] + (sr * sp * cy + cr * sy) * IMUb[4]
 8006a0a:	4642      	mov	r2, r8
			IMUm[2] = (float) IMUmd[2] - 9.81;
 8006a0c:	ee0b 0a10 	vmov	s22, r0
			IMUmd[3] = cp * cy * IMUb[3] + (sr * sp * cy + cr * sy) * IMUb[4]
 8006a10:	464b      	mov	r3, r9
 8006a12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a16:	f7f9 fdb3 	bl	8000580 <__aeabi_dmul>
 8006a1a:	4652      	mov	r2, sl
 8006a1c:	4606      	mov	r6, r0
 8006a1e:	460f      	mov	r7, r1
 8006a20:	465b      	mov	r3, fp
 8006a22:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8006a26:	f7f9 fdab 	bl	8000580 <__aeabi_dmul>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	4630      	mov	r0, r6
 8006a30:	4639      	mov	r1, r7
 8006a32:	f7f9 fbf3 	bl	800021c <__adddf3>
					+ (-cr * sp * cy + sr * sy) * IMUb[5];
 8006a36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
			IMUmd[3] = cp * cy * IMUb[3] + (sr * sp * cy + cr * sy) * IMUb[4]
 8006a3a:	4606      	mov	r6, r0
 8006a3c:	460f      	mov	r7, r1
					+ (-cr * sp * cy + sr * sy) * IMUb[5];
 8006a3e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8006a42:	f7f9 fd9d 	bl	8000580 <__aeabi_dmul>
 8006a46:	4602      	mov	r2, r0
 8006a48:	460b      	mov	r3, r1
 8006a4a:	4630      	mov	r0, r6
 8006a4c:	4639      	mov	r1, r7
 8006a4e:	f7f9 fbe5 	bl	800021c <__adddf3>
			IMUm[3] = (float) IMUmd[3];
 8006a52:	f7fa f86d 	bl	8000b30 <__aeabi_d2f>
			ekf.fx[6] = ekf.x[6] + IMUm[3] * dt;
 8006a56:	ee07 0a90 	vmov	s15, r0
 8006a5a:	ee67 ca88 	vmul.f32	s25, s15, s16
 8006a5e:	f60d 2388 	addw	r3, sp, #2696	; 0xa88
 8006a62:	ee79 9aac 	vadd.f32	s19, s19, s25
			IMUmd[4] = -cp * sy * IMUb[3] + (-sr * sp * sy + cr * cy) * IMUb[4]
 8006a66:	4642      	mov	r2, r8
			ekf.fx[6] = ekf.x[6] + IMUm[3] * dt;
 8006a68:	edc3 9a00 	vstr	s19, [r3]
			IMUmd[4] = -cp * sy * IMUb[3] + (-sr * sp * sy + cr * cy) * IMUb[4]
 8006a6c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8006a70:	464b      	mov	r3, r9
 8006a72:	f7f9 fd85 	bl	8000580 <__aeabi_dmul>
 8006a76:	4652      	mov	r2, sl
 8006a78:	4606      	mov	r6, r0
 8006a7a:	460f      	mov	r7, r1
 8006a7c:	465b      	mov	r3, fp
 8006a7e:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 8006a82:	f7f9 fd7d 	bl	8000580 <__aeabi_dmul>
 8006a86:	4602      	mov	r2, r0
 8006a88:	460b      	mov	r3, r1
 8006a8a:	4630      	mov	r0, r6
 8006a8c:	4639      	mov	r1, r7
 8006a8e:	f7f9 fbc5 	bl	800021c <__adddf3>
					+ (cr * sp * sy + sr * cy) * IMUb[5];
 8006a92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
			IMUmd[4] = -cp * sy * IMUb[3] + (-sr * sp * sy + cr * cy) * IMUb[4]
 8006a96:	4606      	mov	r6, r0
 8006a98:	460f      	mov	r7, r1
					+ (cr * sp * sy + sr * cy) * IMUb[5];
 8006a9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a9e:	f7f9 fd6f 	bl	8000580 <__aeabi_dmul>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	4630      	mov	r0, r6
 8006aa8:	4639      	mov	r1, r7
 8006aaa:	f7f9 fbb7 	bl	800021c <__adddf3>
			IMUm[4] = (float) IMUmd[4];
 8006aae:	f7fa f83f 	bl	8000b30 <__aeabi_d2f>
			ekf.fx[7] = ekf.x[7] + IMUm[4] * dt;
 8006ab2:	ee07 0a90 	vmov	s15, r0
 8006ab6:	ee27 ca88 	vmul.f32	s24, s15, s16
 8006aba:	f60d 238c 	addw	r3, sp, #2700	; 0xa8c
 8006abe:	ee39 9a0c 	vadd.f32	s18, s18, s24
			IMUmd[5] = sp * IMUb[3] - sr * cp * IMUb[4] + cr * cp * IMUb[5];
 8006ac2:	4642      	mov	r2, r8
			ekf.fx[7] = ekf.x[7] + IMUm[4] * dt;
 8006ac4:	ed83 9a00 	vstr	s18, [r3]
			IMUmd[5] = sp * IMUb[3] - sr * cp * IMUb[4] + cr * cp * IMUb[5];
 8006ac8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006acc:	464b      	mov	r3, r9
 8006ace:	f7f9 fd57 	bl	8000580 <__aeabi_dmul>
 8006ad2:	4652      	mov	r2, sl
 8006ad4:	4606      	mov	r6, r0
 8006ad6:	460f      	mov	r7, r1
 8006ad8:	465b      	mov	r3, fp
 8006ada:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8006ade:	f7f9 fd4f 	bl	8000580 <__aeabi_dmul>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	4639      	mov	r1, r7
 8006aea:	f7f9 fb95 	bl	8000218 <__aeabi_dsub>
 8006aee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006af2:	4606      	mov	r6, r0
 8006af4:	460f      	mov	r7, r1
 8006af6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006afa:	f7f9 fd41 	bl	8000580 <__aeabi_dmul>
 8006afe:	4602      	mov	r2, r0
 8006b00:	460b      	mov	r3, r1
 8006b02:	4630      	mov	r0, r6
 8006b04:	4639      	mov	r1, r7
 8006b06:	f7f9 fb89 	bl	800021c <__adddf3>
			IMUm[5] = (float) IMUmd[5];
 8006b0a:	f7fa f811 	bl	8000b30 <__aeabi_d2f>
			ekf.fx[8] = ekf.x[8] + IMUm[5] * dt;
 8006b0e:	ee07 0a90 	vmov	s15, r0
 8006b12:	ee67 ba88 	vmul.f32	s23, s15, s16
			ekf.fx[3] = ekf.x[3] + IMUm[0] * dt;
 8006b16:	eddd 6a85 	vldr	s13, [sp, #532]	; 0x214
			ekf.fx[4] = ekf.x[4] + IMUm[1] * dt;
 8006b1a:	ed9d 7a86 	vldr	s14, [sp, #536]	; 0x218
			ekf.fx[0] = ekf.x[0] + ekf.x[3] * dt;
			ekf.fx[1] = ekf.x[1] + ekf.x[4] * dt;
			ekf.fx[2] = ekf.x[2] + ekf.x[5] * dt;

			//fill F
			F11[0][3] = 1 * dt;
 8006b1e:	ed8d 8a32 	vstr	s16, [sp, #200]	; 0xc8
			ekf.fx[3] = ekf.x[3] + IMUm[0] * dt;
 8006b22:	ee6a 9a88 	vmul.f32	s19, s21, s16
			ekf.fx[8] = ekf.x[8] + IMUm[5] * dt;
 8006b26:	ee78 8aab 	vadd.f32	s17, s17, s23
			ekf.fx[3] = ekf.x[3] + IMUm[0] * dt;
 8006b2a:	ee76 7aa9 	vadd.f32	s15, s13, s19
			ekf.fx[4] = ekf.x[4] + IMUm[1] * dt;
 8006b2e:	ee2a 9a08 	vmul.f32	s18, s20, s16
			ekf.fx[8] = ekf.x[8] + IMUm[5] * dt;
 8006b32:	f50d 6329 	add.w	r3, sp, #2704	; 0xa90
 8006b36:	edc3 8a00 	vstr	s17, [r3]
			ekf.fx[3] = ekf.x[3] + IMUm[0] * dt;
 8006b3a:	f60d 237c 	addw	r3, sp, #2684	; 0xa7c
 8006b3e:	edc3 7a00 	vstr	s15, [r3]
			ekf.fx[4] = ekf.x[4] + IMUm[1] * dt;
 8006b42:	ee77 7a09 	vadd.f32	s15, s14, s18
 8006b46:	f50d 6328 	add.w	r3, sp, #2688	; 0xa80
 8006b4a:	edc3 7a00 	vstr	s15, [r3]
			ekf.fx[5] = ekf.x[5] + IMUm[2] * dt;
 8006b4e:	ee6b 8a08 	vmul.f32	s17, s22, s16
 8006b52:	eddd 7a87 	vldr	s15, [sp, #540]	; 0x21c
			F11[1][4] = 1 * dt;
 8006b56:	ed8d 8a3c 	vstr	s16, [sp, #240]	; 0xf0
			ekf.fx[5] = ekf.x[5] + IMUm[2] * dt;
 8006b5a:	ee37 6aa8 	vadd.f32	s12, s15, s17
 8006b5e:	f60d 2384 	addw	r3, sp, #2692	; 0xa84
 8006b62:	ed83 6a00 	vstr	s12, [r3]
			ekf.fx[0] = ekf.x[0] + ekf.x[3] * dt;
 8006b66:	ed9d 6a82 	vldr	s12, [sp, #520]	; 0x208
			F11[2][5] = 1 * dt;
 8006b6a:	ed8d 8a46 	vstr	s16, [sp, #280]	; 0x118
			ekf.fx[0] = ekf.x[0] + ekf.x[3] * dt;
 8006b6e:	eea6 6a88 	vfma.f32	s12, s13, s16
 8006b72:	f50d 6827 	add.w	r8, sp, #2672	; 0xa70
			ekf.fx[1] = ekf.x[1] + ekf.x[4] * dt;
 8006b76:	f60d 2774 	addw	r7, sp, #2676	; 0xa74
			F11[3][7] = -IMUm[2] * dt;
 8006b7a:	ee2b ba48 	vnmul.f32	s22, s22, s16
			ekf.fx[0] = ekf.x[0] + ekf.x[3] * dt;
 8006b7e:	ed88 6a00 	vstr	s12, [r8]
			ekf.fx[1] = ekf.x[1] + ekf.x[4] * dt;
 8006b82:	ed9d 6a83 	vldr	s12, [sp, #524]	; 0x20c
			F11[3][7] = -IMUm[2] * dt;
 8006b86:	ed8d ba51 	vstr	s22, [sp, #324]	; 0x144
			ekf.fx[1] = ekf.x[1] + ekf.x[4] * dt;
 8006b8a:	eea7 6a08 	vfma.f32	s12, s14, s16
			ekf.fx[2] = ekf.x[2] + ekf.x[5] * dt;
 8006b8e:	f60d 2678 	addw	r6, sp, #2680	; 0xa78
			F11[4][6] = IMUm[2] * dt;
			F11[4][8] = -IMUm[0] * dt;
			F11[5][6] = -IMUm[1] * dt;
			F11[5][7] = IMUm[0] * dt;

			mat_exp(F11, ekf.F, 9); //2nd order taylor, exact since F11^3 = 0
 8006b92:	2209      	movs	r2, #9
			F11[4][8] = -IMUm[0] * dt;
 8006b94:	ee6a aac8 	vnmul.f32	s21, s21, s16
			ekf.fx[1] = ekf.x[1] + ekf.x[4] * dt;
 8006b98:	ed87 6a00 	vstr	s12, [r7]
			ekf.fx[2] = ekf.x[2] + ekf.x[5] * dt;
 8006b9c:	ed9d 6a84 	vldr	s12, [sp, #528]	; 0x210
			F11[3][8] = IMUm[1] * dt;
 8006ba0:	ed8d 9a52 	vstr	s18, [sp, #328]	; 0x148
			ekf.fx[2] = ekf.x[2] + ekf.x[5] * dt;
 8006ba4:	eea7 6a88 	vfma.f32	s12, s15, s16
			mat_exp(F11, ekf.F, 9); //2nd order taylor, exact since F11^3 = 0
 8006ba8:	f20d 5184 	addw	r1, sp, #1412	; 0x584
 8006bac:	a82f      	add	r0, sp, #188	; 0xbc
			F11[5][6] = -IMUm[1] * dt;
 8006bae:	ee2a aa48 	vnmul.f32	s20, s20, s16
			ekf.fx[2] = ekf.x[2] + ekf.x[5] * dt;
 8006bb2:	ed86 6a00 	vstr	s12, [r6]
			F11[4][6] = IMUm[2] * dt;
 8006bb6:	edcd 8a59 	vstr	s17, [sp, #356]	; 0x164
			F11[4][8] = -IMUm[0] * dt;
 8006bba:	edcd aa5b 	vstr	s21, [sp, #364]	; 0x16c
			F11[5][6] = -IMUm[1] * dt;
 8006bbe:	ed8d aa62 	vstr	s20, [sp, #392]	; 0x188
			F11[5][7] = IMUm[0] * dt;
 8006bc2:	edcd 9a63 	vstr	s19, [sp, #396]	; 0x18c
			mat_exp(F11, ekf.F, 9); //2nd order taylor, exact since F11^3 = 0
 8006bc6:	f000 fce5 	bl	8007594 <mat_exp>

			//fill H
			ekf.H[0][0] = 1;
 8006bca:	f50d 62d9 	add.w	r2, sp, #1736	; 0x6c8
 8006bce:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006bd2:	6013      	str	r3, [r2, #0]
			ekf.H[1][1] = 1;
 8006bd4:	f50d 62de 	add.w	r2, sp, #1776	; 0x6f0
 8006bd8:	6013      	str	r3, [r2, #0]
			ekf.H[2][2] = 1;
 8006bda:	f50d 62e3 	add.w	r2, sp, #1816	; 0x718
 8006bde:	6013      	str	r3, [r2, #0]
			ekf.H[3][2] = 1;
 8006be0:	f20d 723c 	addw	r2, sp, #1852	; 0x73c
 8006be4:	6013      	str	r3, [r2, #0]

			//fill hx
			ekf.hx[0] = ekf.fx[0];
 8006be6:	f60d 2394 	addw	r3, sp, #2708	; 0xa94
 8006bea:	f8d8 2000 	ldr.w	r2, [r8]
 8006bee:	601a      	str	r2, [r3, #0]
			ekf.hx[1] = ekf.fx[1];
 8006bf0:	f60d 2398 	addw	r3, sp, #2712	; 0xa98
 8006bf4:	683a      	ldr	r2, [r7, #0]
 8006bf6:	601a      	str	r2, [r3, #0]
			ekf.hx[2] = ekf.fx[2];
 8006bf8:	f60d 229c 	addw	r2, sp, #2716	; 0xa9c
 8006bfc:	6833      	ldr	r3, [r6, #0]
 8006bfe:	6013      	str	r3, [r2, #0]
			ekf.hx[3] = ekf.fx[2];
 8006c00:	f50d 622a 	add.w	r2, sp, #2720	; 0xaa0
 8006c04:	6013      	str	r3, [r2, #0]

			if (isGPSHere >= 5) { // go for the kalman
 8006c06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c08:	2b05      	cmp	r3, #5
 8006c0a:	d106      	bne.n	8006c1a <TK_kalman+0x5e2>
				ekf_step(&ekf, zdata);
 8006c0c:	4924      	ldr	r1, [pc, #144]	; (8006ca0 <TK_kalman+0x668>)
 8006c0e:	a880      	add	r0, sp, #512	; 0x200
 8006c10:	f000 fdd8 	bl	80077c4 <ekf_step>
				isGPSHere = 0;
 8006c14:	2300      	movs	r3, #0
 8006c16:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c18:	e573      	b.n	8006702 <TK_kalman+0xca>
			} else { //simple INS
				ekf.x[6] += IMUm[3] * dt;
				ekf.x[7] += IMUm[4] * dt;
				ekf.x[8] += IMUm[5] * dt;
 8006c1a:	eddd 7a8a 	vldr	s15, [sp, #552]	; 0x228
				ekf.x[6] += IMUm[3] * dt;
 8006c1e:	eddd 6a88 	vldr	s13, [sp, #544]	; 0x220
				ekf.x[7] += IMUm[4] * dt;
 8006c22:	ed9d 7a89 	vldr	s14, [sp, #548]	; 0x224
				ekf.x[8] += IMUm[5] * dt;
 8006c26:	ee77 7aab 	vadd.f32	s15, s15, s23
				ekf.x[6] += IMUm[3] * dt;
 8006c2a:	ee76 6aac 	vadd.f32	s13, s13, s25
				ekf.x[8] += IMUm[5] * dt;
 8006c2e:	edcd 7a8a 	vstr	s15, [sp, #552]	; 0x228
				ekf.x[3] += IMUm[0] * dt;
 8006c32:	eddd 7a85 	vldr	s15, [sp, #532]	; 0x214
				ekf.x[6] += IMUm[3] * dt;
 8006c36:	edcd 6a88 	vstr	s13, [sp, #544]	; 0x220
				ekf.x[3] += IMUm[0] * dt;
 8006c3a:	ee79 9aa7 	vadd.f32	s19, s19, s15
				ekf.x[4] += IMUm[1] * dt;
 8006c3e:	eddd 7a86 	vldr	s15, [sp, #536]	; 0x218
				ekf.x[3] += IMUm[0] * dt;
 8006c42:	edcd 9a85 	vstr	s19, [sp, #532]	; 0x214
				ekf.x[4] += IMUm[1] * dt;
 8006c46:	ee39 9a27 	vadd.f32	s18, s18, s15
				ekf.x[5] += IMUm[2] * dt;
 8006c4a:	eddd 7a87 	vldr	s15, [sp, #540]	; 0x21c
				ekf.x[4] += IMUm[1] * dt;
 8006c4e:	ed8d 9a86 	vstr	s18, [sp, #536]	; 0x218
				ekf.x[5] += IMUm[2] * dt;
 8006c52:	ee78 8aa7 	vadd.f32	s17, s17, s15
				ekf.x[0] += ekf.x[3] * dt;
 8006c56:	eddd 7a82 	vldr	s15, [sp, #520]	; 0x208
				ekf.x[5] += IMUm[2] * dt;
 8006c5a:	edcd 8a87 	vstr	s17, [sp, #540]	; 0x21c
				ekf.x[0] += ekf.x[3] * dt;
 8006c5e:	eee9 7a88 	vfma.f32	s15, s19, s16
				ekf.x[1] += ekf.x[4] * dt;
				ekf.x[2] += ekf.x[5] * dt;
				updateP(ekf.P, ekf.F, ekf.Q);
 8006c62:	aadc      	add	r2, sp, #880	; 0x370
 8006c64:	f20d 5184 	addw	r1, sp, #1412	; 0x584
				ekf.x[7] += IMUm[4] * dt;
 8006c68:	ee37 7a0c 	vadd.f32	s14, s14, s24
				ekf.x[0] += ekf.x[3] * dt;
 8006c6c:	edcd 7a82 	vstr	s15, [sp, #520]	; 0x208
				ekf.x[1] += ekf.x[4] * dt;
 8006c70:	eddd 7a83 	vldr	s15, [sp, #524]	; 0x20c
				ekf.x[7] += IMUm[4] * dt;
 8006c74:	ed8d 7a89 	vstr	s14, [sp, #548]	; 0x224
				ekf.x[1] += ekf.x[4] * dt;
 8006c78:	eee9 7a08 	vfma.f32	s15, s18, s16
				updateP(ekf.P, ekf.F, ekf.Q);
 8006c7c:	a88b      	add	r0, sp, #556	; 0x22c
				ekf.x[1] += ekf.x[4] * dt;
 8006c7e:	edcd 7a83 	vstr	s15, [sp, #524]	; 0x20c
				ekf.x[2] += ekf.x[5] * dt;
 8006c82:	eddd 7a84 	vldr	s15, [sp, #528]	; 0x210
 8006c86:	eee8 7a88 	vfma.f32	s15, s17, s16
 8006c8a:	edcd 7a84 	vstr	s15, [sp, #528]	; 0x210
				updateP(ekf.P, ekf.F, ekf.Q);
 8006c8e:	f000 fcfd 	bl	800768c <updateP>
 8006c92:	e536      	b.n	8006702 <TK_kalman+0xca>
//        fprintf(ofp,"%f, %f, %f, %f, %f, %f\n", ekf.x[0], ekf.x[1], ekf.x[2],ekf.x[3], ekf.x[4], ekf.x[5]);
			//printf("%f, %f, %f, %f, %f, %f\n", ekf.x[0], ekf.x[1], ekf.x[2],ekf.x[3], ekf.x[4], ekf.x[5]);
			//printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f \n", IMUb[0], IMUb[1],IMUb[2],IMUb[3],IMUb[4],IMUb[5],zdata[0],zdata[1],zdata[2],zdata[3]);
		}
		else {
			osDelay(10);
 8006c94:	200a      	movs	r0, #10
 8006c96:	f7fd fca4 	bl	80045e2 <osDelay>
 8006c9a:	e532      	b.n	8006702 <TK_kalman+0xca>
 8006c9c:	f3af 8000 	nop.w
 8006ca0:	200044c0 	.word	0x200044c0
 8006ca4:	51eb851f 	.word	0x51eb851f
 8006ca8:	40239eb8 	.word	0x40239eb8

08006cac <MX_I2C3_Init>:
I2C_HandleTypeDef hi2c3;
DMA_HandleTypeDef hdma_i2c3_rx;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8006cac:	b508      	push	{r3, lr}

  hi2c3.Instance = I2C3;
 8006cae:	480c      	ldr	r0, [pc, #48]	; (8006ce0 <MX_I2C3_Init+0x34>)
  hi2c3.Init.ClockSpeed = 100000;
 8006cb0:	4b0c      	ldr	r3, [pc, #48]	; (8006ce4 <MX_I2C3_Init+0x38>)
 8006cb2:	f8df e034 	ldr.w	lr, [pc, #52]	; 8006ce8 <MX_I2C3_Init+0x3c>
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c3.Init.OwnAddress1 = 0;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006cb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c3.Init.ClockSpeed = 100000;
 8006cba:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	6083      	str	r3, [r0, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8006cc2:	60c3      	str	r3, [r0, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006cc4:	6102      	str	r2, [r0, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006cc6:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8006cc8:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006cca:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006ccc:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8006cce:	f7fa fe5b 	bl	8001988 <HAL_I2C_Init>
 8006cd2:	b118      	cbz	r0, 8006cdc <MX_I2C3_Init+0x30>
  {
    Error_Handler();
  }

}
 8006cd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006cd8:	f000 b939 	b.w	8006f4e <Error_Handler>
 8006cdc:	bd08      	pop	{r3, pc}
 8006cde:	bf00      	nop
 8006ce0:	200044e8 	.word	0x200044e8
 8006ce4:	40005c00 	.word	0x40005c00
 8006ce8:	000186a0 	.word	0x000186a0

08006cec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cf0:	4606      	mov	r6, r0
 8006cf2:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cf4:	2214      	movs	r2, #20
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	a803      	add	r0, sp, #12
 8006cfa:	f001 fcee 	bl	80086da <memset>
  if(i2cHandle->Instance==I2C3)
 8006cfe:	6832      	ldr	r2, [r6, #0]
 8006d00:	4b2f      	ldr	r3, [pc, #188]	; (8006dc0 <HAL_I2C_MspInit+0xd4>)
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d159      	bne.n	8006dba <HAL_I2C_MspInit+0xce>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d06:	2500      	movs	r5, #0
 8006d08:	4c2e      	ldr	r4, [pc, #184]	; (8006dc4 <HAL_I2C_MspInit+0xd8>)
 8006d0a:	9500      	str	r5, [sp, #0]
 8006d0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d0e:	482e      	ldr	r0, [pc, #184]	; (8006dc8 <HAL_I2C_MspInit+0xdc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d10:	f043 0301 	orr.w	r3, r3, #1
 8006d14:	6323      	str	r3, [r4, #48]	; 0x30
 8006d16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006d18:	f003 0301 	and.w	r3, r3, #1
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d20:	9501      	str	r5, [sp, #4]
 8006d22:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006d24:	f043 0302 	orr.w	r3, r3, #2
 8006d28:	6323      	str	r3, [r4, #48]	; 0x30
 8006d2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006d2c:	f003 0302 	and.w	r3, r3, #2
 8006d30:	9301      	str	r3, [sp, #4]
 8006d32:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006d34:	f04f 0a12 	mov.w	sl, #18
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006d38:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d3c:	f04f 0901 	mov.w	r9, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d40:	f04f 0803 	mov.w	r8, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006d44:	2704      	movs	r7, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d46:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006d48:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006d4a:	f8cd a010 	str.w	sl, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d4e:	f8cd 9014 	str.w	r9, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d52:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006d56:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d58:	f7fa fd3c 	bl	80017d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006d5c:	2310      	movs	r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d5e:	481b      	ldr	r0, [pc, #108]	; (8006dcc <HAL_I2C_MspInit+0xe0>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006d60:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d62:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006d64:	f8cd a010 	str.w	sl, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d68:	f8cd 9014 	str.w	r9, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d6c:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006d70:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d72:	f7fa fd2f 	bl	80017d4 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006d76:	9502      	str	r5, [sp, #8]
 8006d78:	6c23      	ldr	r3, [r4, #64]	; 0x40
  
    /* I2C3 DMA Init */
    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Stream2;
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_3;
 8006d7a:	4a15      	ldr	r2, [pc, #84]	; (8006dd0 <HAL_I2C_MspInit+0xe4>)
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006d7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006d80:	6423      	str	r3, [r4, #64]	; 0x40
 8006d82:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hdma_i2c3_rx.Instance = DMA1_Stream2;
 8006d84:	4c13      	ldr	r4, [pc, #76]	; (8006dd4 <HAL_I2C_MspInit+0xe8>)
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006d86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d8a:	9302      	str	r3, [sp, #8]
 8006d8c:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006d8e:	60a5      	str	r5, [r4, #8]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_3;
 8006d90:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8006d94:	e884 000c 	stmia.w	r4, {r2, r3}
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8006d98:	4620      	mov	r0, r4
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006d9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d9e:	60e5      	str	r5, [r4, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006da0:	6123      	str	r3, [r4, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006da2:	6165      	str	r5, [r4, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006da4:	61a5      	str	r5, [r4, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8006da6:	61e5      	str	r5, [r4, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006da8:	6225      	str	r5, [r4, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006daa:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8006dac:	f7fa fb8a 	bl	80014c4 <HAL_DMA_Init>
 8006db0:	b108      	cbz	r0, 8006db6 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8006db2:	f000 f8cc 	bl	8006f4e <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c3_rx);
 8006db6:	63b4      	str	r4, [r6, #56]	; 0x38
 8006db8:	63a6      	str	r6, [r4, #56]	; 0x38

  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8006dba:	b008      	add	sp, #32
 8006dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dc0:	40005c00 	.word	0x40005c00
 8006dc4:	40023800 	.word	0x40023800
 8006dc8:	40020000 	.word	0x40020000
 8006dcc:	40020400 	.word	0x40020400
 8006dd0:	40026040 	.word	0x40026040
 8006dd4:	2000453c 	.word	0x2000453c

08006dd8 <led_set_rgb>:
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006dd8:	4b02      	ldr	r3, [pc, #8]	; (8006de4 <led_set_rgb+0xc>)
 8006dda:	6358      	str	r0, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006ddc:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006dde:	63da      	str	r2, [r3, #60]	; 0x3c
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop
 8006de4:	40010400 	.word	0x40010400

08006de8 <led_init>:
  SET_BIT(TIMx->CCER, Channels);
 8006de8:	4b12      	ldr	r3, [pc, #72]	; (8006e34 <led_init+0x4c>)
 8006dea:	6a1a      	ldr	r2, [r3, #32]
 8006dec:	f042 0204 	orr.w	r2, r2, #4
 8006df0:	621a      	str	r2, [r3, #32]
 8006df2:	6a1a      	ldr	r2, [r3, #32]
 8006df4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006df8:	621a      	str	r2, [r3, #32]
 8006dfa:	6a1a      	ldr	r2, [r3, #32]
 8006dfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e00:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->BDTR, TIM_BDTR_AOE);
 8006e02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e08:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	f042 0201 	orr.w	r2, r2, #1
 8006e10:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006e12:	4a09      	ldr	r2, [pc, #36]	; (8006e38 <led_init+0x50>)
 8006e14:	2180      	movs	r1, #128	; 0x80
 8006e16:	6191      	str	r1, [r2, #24]
 8006e18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006e1c:	f8c2 1418 	str.w	r1, [r2, #1048]	; 0x418
 8006e20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006e24:	f8c2 1418 	str.w	r1, [r2, #1048]	; 0x418
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006e28:	2200      	movs	r2, #0
 8006e2a:	635a      	str	r2, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006e2c:	639a      	str	r2, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006e2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	40010400 	.word	0x40010400
 8006e38:	40020000 	.word	0x40020000

08006e3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006e3c:	b530      	push	{r4, r5, lr}
 8006e3e:	b0ad      	sub	sp, #180	; 0xb4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006e40:	2234      	movs	r2, #52	; 0x34
 8006e42:	2100      	movs	r1, #0
 8006e44:	a808      	add	r0, sp, #32
 8006e46:	f001 fc48 	bl	80086da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006e4a:	2214      	movs	r2, #20
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	a803      	add	r0, sp, #12
 8006e50:	f001 fc43 	bl	80086da <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006e54:	2100      	movs	r1, #0
 8006e56:	225c      	movs	r2, #92	; 0x5c
 8006e58:	a815      	add	r0, sp, #84	; 0x54
 8006e5a:	f001 fc3e 	bl	80086da <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006e5e:	2400      	movs	r4, #0
 8006e60:	4b20      	ldr	r3, [pc, #128]	; (8006ee4 <SystemClock_Config+0xa8>)
 8006e62:	9401      	str	r4, [sp, #4]
 8006e64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e66:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006e6a:	641a      	str	r2, [r3, #64]	; 0x40
 8006e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8006e6e:	4a1e      	ldr	r2, [pc, #120]	; (8006ee8 <SystemClock_Config+0xac>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8006e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e74:	9301      	str	r3, [sp, #4]
 8006e76:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8006e78:	9402      	str	r4, [sp, #8]
 8006e7a:	6813      	ldr	r3, [r2, #0]
 8006e7c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e84:	6013      	str	r3, [r2, #0]
 8006e86:	6813      	ldr	r3, [r2, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006e88:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8006e8a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006e8e:	9302      	str	r3, [sp, #8]
 8006e90:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006e92:	2301      	movs	r3, #1
 8006e94:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006e96:	2310      	movs	r3, #16
 8006e98:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006e9a:	2308      	movs	r3, #8
 8006e9c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8006e9e:	2348      	movs	r3, #72	; 0x48
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006ea0:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 72;
 8006ea2:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 3;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006ea4:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006eaa:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006eac:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006eae:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006eb0:	9514      	str	r5, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006eb2:	f7fb f963 	bl	800217c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006eb6:	230f      	movs	r3, #15
 8006eb8:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006eba:	4629      	mov	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006ec0:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006ec2:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006ec4:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006ec6:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006ec8:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006eca:	f7fa fe4d 	bl	8001b68 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8006ece:	f44f 7340 	mov.w	r3, #768	; 0x300
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006ed2:	a815      	add	r0, sp, #84	; 0x54
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8006ed4:	9315      	str	r3, [sp, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8006ed6:	942a      	str	r4, [sp, #168]	; 0xa8
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8006ed8:	9426      	str	r4, [sp, #152]	; 0x98
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006eda:	f7fa feff 	bl	8001cdc <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8006ede:	b02d      	add	sp, #180	; 0xb4
 8006ee0:	bd30      	pop	{r4, r5, pc}
 8006ee2:	bf00      	nop
 8006ee4:	40023800 	.word	0x40023800
 8006ee8:	40007000 	.word	0x40007000

08006eec <main>:
{
 8006eec:	b508      	push	{r3, lr}
  HAL_Init();
 8006eee:	f7fa f81b 	bl	8000f28 <HAL_Init>
  SystemClock_Config();
 8006ef2:	f7ff ffa3 	bl	8006e3c <SystemClock_Config>
  MX_GPIO_Init();
 8006ef6:	f7ff fb63 	bl	80065c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8006efa:	f7ff fa1b 	bl	8006334 <MX_DMA_Init>
  MX_ADC1_Init();
 8006efe:	f7ff f889 	bl	8006014 <MX_ADC1_Init>
  MX_ADC2_Init();
 8006f02:	f7ff f905 	bl	8006110 <MX_ADC2_Init>
  MX_I2C3_Init();
 8006f06:	f7ff fed1 	bl	8006cac <MX_I2C3_Init>
  MX_QUADSPI_Init();
 8006f0a:	f000 f821 	bl	8006f50 <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 8006f0e:	f000 f957 	bl	80071c0 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8006f12:	f000 fa2d 	bl	8007370 <MX_SPI2_Init>
  MX_TIM1_Init();
 8006f16:	f001 f8f7 	bl	8008108 <MX_TIM1_Init>
  MX_TIM2_Init();
 8006f1a:	f001 f959 	bl	80081d0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8006f1e:	f000 fed5 	bl	8007ccc <MX_TIM3_Init>
  MX_TIM4_Init();
 8006f22:	f001 f9a7 	bl	8008274 <MX_TIM4_Init>
  MX_TIM5_Init();
 8006f26:	f001 f9f1 	bl	800830c <MX_TIM5_Init>
  MX_TIM8_Init();
 8006f2a:	f000 ff1b 	bl	8007d64 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8006f2e:	f001 fa41 	bl	80083b4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8006f32:	f001 fa5b 	bl	80083ec <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8006f36:	f001 fa75 	bl	8008424 <MX_USART6_UART_Init>
  CAN_Config(ID_MASTER);
 8006f3a:	2000      	movs	r0, #0
 8006f3c:	f7fe fe1c 	bl	8005b78 <CAN_Config>
  led_init();
 8006f40:	f7ff ff52 	bl	8006de8 <led_init>
  MX_FREERTOS_Init();
 8006f44:	f7ff fafa 	bl	800653c <MX_FREERTOS_Init>
  osKernelStart();
 8006f48:	f7fd fb1f 	bl	800458a <osKernelStart>
 8006f4c:	e7fe      	b.n	8006f4c <main+0x60>

08006f4e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006f4e:	4770      	bx	lr

08006f50 <MX_QUADSPI_Init>:

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{

  hqspi.Instance = QUADSPI;
 8006f50:	480b      	ldr	r0, [pc, #44]	; (8006f80 <MX_QUADSPI_Init+0x30>)
  hqspi.Init.ClockPrescaler = 255;
 8006f52:	4a0c      	ldr	r2, [pc, #48]	; (8006f84 <MX_QUADSPI_Init+0x34>)
{
 8006f54:	b508      	push	{r3, lr}
  hqspi.Init.ClockPrescaler = 255;
 8006f56:	23ff      	movs	r3, #255	; 0xff
 8006f58:	e880 000c 	stmia.w	r0, {r2, r3}
  hqspi.Init.FifoThreshold = 1;
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8006f5c:	2300      	movs	r3, #0
  hqspi.Init.FifoThreshold = 1;
 8006f5e:	2201      	movs	r2, #1
 8006f60:	6082      	str	r2, [r0, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8006f62:	60c3      	str	r3, [r0, #12]
  hqspi.Init.FlashSize = 1;
 8006f64:	6102      	str	r2, [r0, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8006f66:	6143      	str	r3, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8006f68:	6183      	str	r3, [r0, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8006f6a:	61c3      	str	r3, [r0, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8006f6c:	6203      	str	r3, [r0, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8006f6e:	f7fa fd9f 	bl	8001ab0 <HAL_QSPI_Init>
 8006f72:	b118      	cbz	r0, 8006f7c <MX_QUADSPI_Init+0x2c>
  {
    Error_Handler();
  }

}
 8006f74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006f78:	f7ff bfe9 	b.w	8006f4e <Error_Handler>
 8006f7c:	bd08      	pop	{r3, pc}
 8006f7e:	bf00      	nop
 8006f80:	2000459c 	.word	0x2000459c
 8006f84:	a0001000 	.word	0xa0001000

08006f88 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8006f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f8a:	4604      	mov	r4, r0
 8006f8c:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f8e:	2214      	movs	r2, #20
 8006f90:	2100      	movs	r1, #0
 8006f92:	a803      	add	r0, sp, #12
 8006f94:	f001 fba1 	bl	80086da <memset>
  if(qspiHandle->Instance==QUADSPI)
 8006f98:	6822      	ldr	r2, [r4, #0]
 8006f9a:	4b23      	ldr	r3, [pc, #140]	; (8007028 <HAL_QSPI_MspInit+0xa0>)
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d141      	bne.n	8007024 <HAL_QSPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8006fa0:	4b22      	ldr	r3, [pc, #136]	; (800702c <HAL_QSPI_MspInit+0xa4>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fa2:	4823      	ldr	r0, [pc, #140]	; (8007030 <HAL_QSPI_MspInit+0xa8>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 8006fa4:	2400      	movs	r4, #0
 8006fa6:	9400      	str	r4, [sp, #0]
 8006fa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006faa:	f042 0202 	orr.w	r2, r2, #2
 8006fae:	639a      	str	r2, [r3, #56]	; 0x38
 8006fb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fb2:	f002 0202 	and.w	r2, r2, #2
 8006fb6:	9200      	str	r2, [sp, #0]
 8006fb8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fba:	9401      	str	r4, [sp, #4]
 8006fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fbe:	f042 0202 	orr.w	r2, r2, #2
 8006fc2:	631a      	str	r2, [r3, #48]	; 0x30
 8006fc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fc6:	f002 0202 	and.w	r2, r2, #2
 8006fca:	9201      	str	r2, [sp, #4]
 8006fcc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006fce:	9402      	str	r4, [sp, #8]
 8006fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fd2:	f042 0204 	orr.w	r2, r2, #4
 8006fd6:	631a      	str	r2, [r3, #48]	; 0x30
 8006fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fda:	f003 0304 	and.w	r3, r3, #4
 8006fde:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fe0:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fe2:	2503      	movs	r5, #3
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006fe4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fe6:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006fe8:	2304      	movs	r3, #4
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8006fea:	2709      	movs	r7, #9
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fec:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006fee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ff0:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8006ff2:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ff4:	f7fa fbee 	bl	80017d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006ff8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ffc:	a903      	add	r1, sp, #12
 8006ffe:	480d      	ldr	r0, [pc, #52]	; (8007034 <HAL_QSPI_MspInit+0xac>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007000:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007002:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007004:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007006:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8007008:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800700a:	f7fa fbe3 	bl	80017d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800700e:	2340      	movs	r3, #64	; 0x40
 8007010:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007012:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8007014:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007016:	4806      	ldr	r0, [pc, #24]	; (8007030 <HAL_QSPI_MspInit+0xa8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007018:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800701a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800701c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 800701e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007020:	f7fa fbd8 	bl	80017d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8007024:	b009      	add	sp, #36	; 0x24
 8007026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007028:	a0001000 	.word	0xa0001000
 800702c:	40023800 	.word	0x40023800
 8007030:	40020400 	.word	0x40020400
 8007034:	40020800 	.word	0x40020800

08007038 <SD_CheckStatus.isra.0>:
/* USER CODE BEGIN beforeFunctionSection */
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
 8007038:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 800703a:	4c06      	ldr	r4, [pc, #24]	; (8007054 <SD_CheckStatus.isra.0+0x1c>)
 800703c:	2301      	movs	r3, #1
 800703e:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007040:	f7ff f90c 	bl	800625c <BSP_SD_GetCardState>
 8007044:	4623      	mov	r3, r4
 8007046:	b918      	cbnz	r0, 8007050 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 8007048:	7822      	ldrb	r2, [r4, #0]
 800704a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800704e:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 8007050:	7818      	ldrb	r0, [r3, #0]
}
 8007052:	bd10      	pop	{r4, pc}
 8007054:	2000000c 	.word	0x2000000c

08007058 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007058:	b513      	push	{r0, r1, r4, lr}
  Stat = STA_NOINIT;
 800705a:	4c0e      	ldr	r4, [pc, #56]	; (8007094 <SD_initialize+0x3c>)
 800705c:	2301      	movs	r3, #1
 800705e:	7023      	strb	r3, [r4, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 8007060:	f7fd fa98 	bl	8004594 <osKernelRunning>
 8007064:	b198      	cbz	r0, 800708e <SD_initialize+0x36>
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8007066:	f7ff f8c3 	bl	80061f0 <BSP_SD_Init>
 800706a:	b910      	cbnz	r0, 8007072 <SD_initialize+0x1a>
    {
      Stat = SD_CheckStatus(lun);
 800706c:	f7ff ffe4 	bl	8007038 <SD_CheckStatus.isra.0>
 8007070:	7020      	strb	r0, [r4, #0]

    /*
     * if the SD is correctly initialized, create the operation queue
     */

    if (Stat != STA_NOINIT)
 8007072:	7823      	ldrb	r3, [r4, #0]
 8007074:	2b01      	cmp	r3, #1
 8007076:	d00a      	beq.n	800708e <SD_initialize+0x36>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8007078:	4a07      	ldr	r2, [pc, #28]	; (8007098 <SD_initialize+0x40>)
 800707a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800707e:	e88d 0003 	stmia.w	sp, {r0, r1}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8007082:	2100      	movs	r1, #0
 8007084:	4668      	mov	r0, sp
 8007086:	f7fd fab4 	bl	80045f2 <osMessageCreate>
 800708a:	4b04      	ldr	r3, [pc, #16]	; (800709c <SD_initialize+0x44>)
 800708c:	6018      	str	r0, [r3, #0]
    }
  }
  return Stat;
 800708e:	7820      	ldrb	r0, [r4, #0]
}
 8007090:	b002      	add	sp, #8
 8007092:	bd10      	pop	{r4, pc}
 8007094:	2000000c 	.word	0x2000000c
 8007098:	08009c10 	.word	0x08009c10
 800709c:	20003f9c 	.word	0x20003f9c

080070a0 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 80070a0:	f7ff bfca 	b.w	8007038 <SD_CheckStatus.isra.0>

080070a4 <SD_read.part.1>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
 80070a4:	b510      	push	{r4, lr}

    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
        timer = osKernelSysTick() + SD_TIMEOUT;
 80070a6:	f7fd fa7d 	bl	80045a4 <osKernelSysTick>
 80070aa:	f500 44ea 	add.w	r4, r0, #29952	; 0x7500
 80070ae:	3430      	adds	r4, #48	; 0x30
        /* block until SDIO IP is ready or a timeout occur */
        while(timer > osKernelSysTick())
 80070b0:	f7fd fa78 	bl	80045a4 <osKernelSysTick>
 80070b4:	4284      	cmp	r4, r0
 80070b6:	d801      	bhi.n	80070bc <SD_read.part.1+0x18>
  DRESULT res = RES_ERROR;
 80070b8:	2001      	movs	r0, #1
 80070ba:	e003      	b.n	80070c4 <SD_read.part.1+0x20>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80070bc:	f7ff f8ce 	bl	800625c <BSP_SD_GetCardState>
 80070c0:	2800      	cmp	r0, #0
 80070c2:	d1f5      	bne.n	80070b0 <SD_read.part.1+0xc>
      }
    }
  }

  return res;
}
 80070c4:	bd10      	pop	{r4, pc}
	...

080070c8 <SD_read>:
{
 80070c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070ca:	4608      	mov	r0, r1
 80070cc:	4611      	mov	r1, r2
  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80070ce:	461a      	mov	r2, r3
 80070d0:	f7ff f8a8 	bl	8006224 <BSP_SD_ReadBlocks_DMA>
 80070d4:	b988      	cbnz	r0, 80070fa <SD_read+0x32>
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80070d6:	4b0b      	ldr	r3, [pc, #44]	; (8007104 <SD_read+0x3c>)
 80070d8:	f247 5230 	movw	r2, #30000	; 0x7530
 80070dc:	6819      	ldr	r1, [r3, #0]
 80070de:	a801      	add	r0, sp, #4
 80070e0:	f7fd fab4 	bl	800464c <osMessageGet>
    if (event.status == osEventMessage)
 80070e4:	9b01      	ldr	r3, [sp, #4]
 80070e6:	2b10      	cmp	r3, #16
 80070e8:	d107      	bne.n	80070fa <SD_read+0x32>
      if (event.value.v == READ_CPLT_MSG)
 80070ea:	9b02      	ldr	r3, [sp, #8]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d104      	bne.n	80070fa <SD_read+0x32>
}
 80070f0:	b005      	add	sp, #20
 80070f2:	f85d eb04 	ldr.w	lr, [sp], #4
 80070f6:	f7ff bfd5 	b.w	80070a4 <SD_read.part.1>
 80070fa:	2001      	movs	r0, #1
 80070fc:	b005      	add	sp, #20
 80070fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8007102:	bf00      	nop
 8007104:	20003f9c 	.word	0x20003f9c

08007108 <SD_write>:
{
 8007108:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800710a:	4608      	mov	r0, r1
 800710c:	4611      	mov	r1, r2
  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800710e:	461a      	mov	r2, r3
 8007110:	f7ff f896 	bl	8006240 <BSP_SD_WriteBlocks_DMA>
 8007114:	b988      	cbnz	r0, 800713a <SD_write+0x32>
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8007116:	4b0b      	ldr	r3, [pc, #44]	; (8007144 <SD_write+0x3c>)
 8007118:	f247 5230 	movw	r2, #30000	; 0x7530
 800711c:	6819      	ldr	r1, [r3, #0]
 800711e:	a801      	add	r0, sp, #4
 8007120:	f7fd fa94 	bl	800464c <osMessageGet>
    if (event.status == osEventMessage)
 8007124:	9b01      	ldr	r3, [sp, #4]
 8007126:	2b10      	cmp	r3, #16
 8007128:	d107      	bne.n	800713a <SD_write+0x32>
      if (event.value.v == WRITE_CPLT_MSG)
 800712a:	9b02      	ldr	r3, [sp, #8]
 800712c:	2b02      	cmp	r3, #2
 800712e:	d104      	bne.n	800713a <SD_write+0x32>
}
 8007130:	b005      	add	sp, #20
 8007132:	f85d eb04 	ldr.w	lr, [sp], #4
 8007136:	f7ff bfb5 	b.w	80070a4 <SD_read.part.1>
 800713a:	2001      	movs	r0, #1
 800713c:	b005      	add	sp, #20
 800713e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007142:	bf00      	nop
 8007144:	20003f9c 	.word	0x20003f9c

08007148 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007148:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800714a:	4b12      	ldr	r3, [pc, #72]	; (8007194 <SD_ioctl+0x4c>)
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	07db      	lsls	r3, r3, #31
{
 8007150:	b088      	sub	sp, #32
 8007152:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007154:	d41b      	bmi.n	800718e <SD_ioctl+0x46>

  switch (cmd)
 8007156:	2903      	cmp	r1, #3
 8007158:	d803      	bhi.n	8007162 <SD_ioctl+0x1a>
 800715a:	e8df f001 	tbb	[pc, r1]
 800715e:	0510      	.short	0x0510
 8007160:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 8007162:	2004      	movs	r0, #4
  }

  return res;
}
 8007164:	b008      	add	sp, #32
 8007166:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8007168:	4668      	mov	r0, sp
 800716a:	f7ff f881 	bl	8006270 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800716e:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007170:	6023      	str	r3, [r4, #0]
 8007172:	e004      	b.n	800717e <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 8007174:	4668      	mov	r0, sp
 8007176:	f7ff f87b 	bl	8006270 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800717a:	9b07      	ldr	r3, [sp, #28]
 800717c:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 800717e:	2000      	movs	r0, #0
 8007180:	e7f0      	b.n	8007164 <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 8007182:	4668      	mov	r0, sp
 8007184:	f7ff f874 	bl	8006270 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007188:	9b07      	ldr	r3, [sp, #28]
 800718a:	0a5b      	lsrs	r3, r3, #9
 800718c:	e7f0      	b.n	8007170 <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800718e:	2003      	movs	r0, #3
 8007190:	e7e8      	b.n	8007164 <SD_ioctl+0x1c>
 8007192:	bf00      	nop
 8007194:	2000000c 	.word	0x2000000c

08007198 <BSP_SD_WriteCpltCallback>:
{
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, WRITE_CPLT_MSG, osWaitForever);
 8007198:	4b03      	ldr	r3, [pc, #12]	; (80071a8 <BSP_SD_WriteCpltCallback+0x10>)
 800719a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800719e:	2102      	movs	r1, #2
 80071a0:	6818      	ldr	r0, [r3, #0]
 80071a2:	f7fd ba2b 	b.w	80045fc <osMessagePut>
 80071a6:	bf00      	nop
 80071a8:	20003f9c 	.word	0x20003f9c

080071ac <BSP_SD_ReadCpltCallback>:
{
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 80071ac:	4b03      	ldr	r3, [pc, #12]	; (80071bc <BSP_SD_ReadCpltCallback+0x10>)
 80071ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071b2:	2101      	movs	r1, #1
 80071b4:	6818      	ldr	r0, [r3, #0]
 80071b6:	f7fd ba21 	b.w	80045fc <osMessagePut>
 80071ba:	bf00      	nop
 80071bc:	20003f9c 	.word	0x20003f9c

080071c0 <MX_SDIO_SD_Init>:
/* SDIO init function */

void MX_SDIO_SD_Init(void)
{

  hsd.Instance = SDIO;
 80071c0:	4b05      	ldr	r3, [pc, #20]	; (80071d8 <MX_SDIO_SD_Init+0x18>)
 80071c2:	4a06      	ldr	r2, [pc, #24]	; (80071dc <MX_SDIO_SD_Init+0x1c>)
 80071c4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80071c6:	2200      	movs	r2, #0
 80071c8:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80071ca:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80071cc:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80071ce:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80071d0:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80071d2:	619a      	str	r2, [r3, #24]
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	200046a8 	.word	0x200046a8
 80071dc:	40012c00 	.word	0x40012c00

080071e0 <HAL_SD_MspInit>:

}

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80071e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071e4:	2214      	movs	r2, #20
{
 80071e6:	b08b      	sub	sp, #44	; 0x2c
 80071e8:	4606      	mov	r6, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071ea:	2100      	movs	r1, #0
 80071ec:	eb0d 0002 	add.w	r0, sp, r2
 80071f0:	f001 fa73 	bl	80086da <memset>
  if(sdHandle->Instance==SDIO)
 80071f4:	6832      	ldr	r2, [r6, #0]
 80071f6:	4b56      	ldr	r3, [pc, #344]	; (8007350 <HAL_SD_MspInit+0x170>)
 80071f8:	429a      	cmp	r2, r3
 80071fa:	f040 80a5 	bne.w	8007348 <HAL_SD_MspInit+0x168>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80071fe:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8007202:	2500      	movs	r5, #0
 8007204:	9501      	str	r5, [sp, #4]
 8007206:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007208:	4852      	ldr	r0, [pc, #328]	; (8007354 <HAL_SD_MspInit+0x174>)
    __HAL_RCC_SDIO_CLK_ENABLE();
 800720a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800720e:	645a      	str	r2, [r3, #68]	; 0x44
 8007210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007212:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007216:	9201      	str	r2, [sp, #4]
 8007218:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800721a:	9502      	str	r5, [sp, #8]
 800721c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800721e:	f042 0202 	orr.w	r2, r2, #2
 8007222:	631a      	str	r2, [r3, #48]	; 0x30
 8007224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007226:	f002 0202 	and.w	r2, r2, #2
 800722a:	9202      	str	r2, [sp, #8]
 800722c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800722e:	9503      	str	r5, [sp, #12]
 8007230:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007232:	f042 0204 	orr.w	r2, r2, #4
 8007236:	631a      	str	r2, [r3, #48]	; 0x30
 8007238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800723a:	f002 0204 	and.w	r2, r2, #4
 800723e:	9203      	str	r2, [sp, #12]
 8007240:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007242:	9504      	str	r5, [sp, #16]
 8007244:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007246:	f042 0208 	orr.w	r2, r2, #8
 800724a:	631a      	str	r2, [r3, #48]	; 0x30
 800724c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724e:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007252:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8007254:	240c      	movs	r4, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007256:	f04f 0802 	mov.w	r8, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800725a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800725c:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800725e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8007260:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007262:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007264:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007268:	9708      	str	r7, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800726a:	f7fa fab3 	bl	80017d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800726e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007272:	a905      	add	r1, sp, #20
 8007274:	4838      	ldr	r0, [pc, #224]	; (8007358 <HAL_SD_MspInit+0x178>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8007276:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8007278:	9409      	str	r4, [sp, #36]	; 0x24

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800727a:	f04f 0904 	mov.w	r9, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800727e:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007282:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007284:	9708      	str	r7, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007286:	f7fa faa5 	bl	80017d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800728a:	4834      	ldr	r0, [pc, #208]	; (800735c <HAL_SD_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800728c:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800728e:	a905      	add	r1, sp, #20

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream6;
 8007290:	4c33      	ldr	r4, [pc, #204]	; (8007360 <HAL_SD_MspInit+0x180>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007292:	f8cd 9014 	str.w	r9, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007296:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800729a:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800729c:	9708      	str	r7, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800729e:	f7fa fa99 	bl	80017d4 <HAL_GPIO_Init>
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80072a2:	4b30      	ldr	r3, [pc, #192]	; (8007364 <HAL_SD_MspInit+0x184>)
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80072a4:	60a5      	str	r5, [r4, #8]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80072a6:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
 80072aa:	e884 4008 	stmia.w	r4, {r3, lr}
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80072ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072b2:	6123      	str	r3, [r4, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80072b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072b8:	6163      	str	r3, [r4, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80072ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80072be:	61a3      	str	r3, [r4, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80072c0:	2320      	movs	r3, #32
 80072c2:	61e3      	str	r3, [r4, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80072c4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80072c8:	62e3      	str	r3, [r4, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80072ca:	4620      	mov	r0, r4
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80072cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80072d0:	60e5      	str	r5, [r4, #12]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80072d2:	6225      	str	r5, [r4, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80072d4:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80072d8:	62a7      	str	r7, [r4, #40]	; 0x28
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80072da:	6323      	str	r3, [r4, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80072dc:	f7fa f8f2 	bl	80014c4 <HAL_DMA_Init>
 80072e0:	b108      	cbz	r0, 80072e6 <HAL_SD_MspInit+0x106>
    {
      Error_Handler();
 80072e2:	f7ff fe34 	bl	8006f4e <Error_Handler>
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream3;
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80072e6:	4b20      	ldr	r3, [pc, #128]	; (8007368 <HAL_SD_MspInit+0x188>)
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 80072e8:	63f4      	str	r4, [r6, #60]	; 0x3c
 80072ea:	63a6      	str	r6, [r4, #56]	; 0x38
    hdma_sdio_tx.Instance = DMA2_Stream3;
 80072ec:	4c1f      	ldr	r4, [pc, #124]	; (800736c <HAL_SD_MspInit+0x18c>)
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80072ee:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 80072f2:	2740      	movs	r7, #64	; 0x40
 80072f4:	e884 00a8 	stmia.w	r4, {r3, r5, r7}
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80072f8:	2300      	movs	r3, #0
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80072fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80072fe:	60e3      	str	r3, [r4, #12]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007300:	6223      	str	r3, [r4, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007302:	2304      	movs	r3, #4
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007304:	6122      	str	r2, [r4, #16]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007306:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007308:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800730c:	2303      	movs	r3, #3
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800730e:	6162      	str	r2, [r4, #20]
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007310:	62a3      	str	r3, [r4, #40]	; 0x28
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007312:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8007316:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800731a:	61a2      	str	r2, [r4, #24]
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800731c:	62e3      	str	r3, [r4, #44]	; 0x2c
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800731e:	2220      	movs	r2, #32
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8007320:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8007324:	4620      	mov	r0, r4
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8007326:	61e2      	str	r2, [r4, #28]
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8007328:	6323      	str	r3, [r4, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800732a:	f7fa f8cb 	bl	80014c4 <HAL_DMA_Init>
 800732e:	b108      	cbz	r0, 8007334 <HAL_SD_MspInit+0x154>
    {
      Error_Handler();
 8007330:	f7ff fe0d 	bl	8006f4e <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8007334:	2031      	movs	r0, #49	; 0x31
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8007336:	6434      	str	r4, [r6, #64]	; 0x40
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8007338:	2200      	movs	r2, #0
 800733a:	2105      	movs	r1, #5
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 800733c:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 800733e:	f7fa f855 	bl	80013ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8007342:	2031      	movs	r0, #49	; 0x31
 8007344:	f7fa f886 	bl	8001454 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8007348:	b00b      	add	sp, #44	; 0x2c
 800734a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800734e:	bf00      	nop
 8007350:	40012c00 	.word	0x40012c00
 8007354:	40020400 	.word	0x40020400
 8007358:	40020800 	.word	0x40020800
 800735c:	40020c00 	.word	0x40020c00
 8007360:	200045e8 	.word	0x200045e8
 8007364:	400264a0 	.word	0x400264a0
 8007368:	40026458 	.word	0x40026458
 800736c:	20004648 	.word	0x20004648

08007370 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8007370:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 8007372:	480e      	ldr	r0, [pc, #56]	; (80073ac <MX_SPI2_Init+0x3c>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007374:	4b0e      	ldr	r3, [pc, #56]	; (80073b0 <MX_SPI2_Init+0x40>)
 8007376:	f44f 7e82 	mov.w	lr, #260	; 0x104
 800737a:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800737e:	2300      	movs	r3, #0
 8007380:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007382:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007384:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007386:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007388:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800738c:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800738e:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007390:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007392:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8007394:	230a      	movs	r3, #10
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007396:	6182      	str	r2, [r0, #24]
  hspi2.Init.CRCPolynomial = 10;
 8007398:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800739a:	f7fb fded 	bl	8002f78 <HAL_SPI_Init>
 800739e:	b118      	cbz	r0, 80073a8 <MX_SPI2_Init+0x38>
  {
    Error_Handler();
  }

}
 80073a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80073a4:	f7ff bdd3 	b.w	8006f4e <Error_Handler>
 80073a8:	bd08      	pop	{r3, pc}
 80073aa:	bf00      	nop
 80073ac:	2000472c 	.word	0x2000472c
 80073b0:	40003800 	.word	0x40003800

080073b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80073b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073b6:	4604      	mov	r4, r0
 80073b8:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073ba:	2214      	movs	r2, #20
 80073bc:	2100      	movs	r1, #0
 80073be:	a803      	add	r0, sp, #12
 80073c0:	f001 f98b 	bl	80086da <memset>
  if(spiHandle->Instance==SPI2)
 80073c4:	6822      	ldr	r2, [r4, #0]
 80073c6:	4b1f      	ldr	r3, [pc, #124]	; (8007444 <HAL_SPI_MspInit+0x90>)
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d138      	bne.n	800743e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80073cc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80073d0:	2400      	movs	r4, #0
 80073d2:	9400      	str	r4, [sp, #0]
 80073d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80073d6:	481c      	ldr	r0, [pc, #112]	; (8007448 <HAL_SPI_MspInit+0x94>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80073d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80073dc:	641a      	str	r2, [r3, #64]	; 0x40
 80073de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073e0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80073e4:	9200      	str	r2, [sp, #0]
 80073e6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80073e8:	9401      	str	r4, [sp, #4]
 80073ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073ec:	f042 0204 	orr.w	r2, r2, #4
 80073f0:	631a      	str	r2, [r3, #48]	; 0x30
 80073f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073f4:	f002 0204 	and.w	r2, r2, #4
 80073f8:	9201      	str	r2, [sp, #4]
 80073fa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80073fc:	9402      	str	r4, [sp, #8]
 80073fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007400:	f042 0202 	orr.w	r2, r2, #2
 8007404:	631a      	str	r2, [r3, #48]	; 0x30
 8007406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007408:	f003 0302 	and.w	r3, r3, #2
 800740c:	9302      	str	r3, [sp, #8]
 800740e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007410:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007412:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007416:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007418:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800741a:	2505      	movs	r5, #5
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800741c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800741e:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007420:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007422:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007424:	f7fa f9d6 	bl	80017d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007428:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800742c:	a903      	add	r1, sp, #12
 800742e:	4807      	ldr	r0, [pc, #28]	; (800744c <HAL_SPI_MspInit+0x98>)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007430:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007432:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007434:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007436:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007438:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800743a:	f7fa f9cb 	bl	80017d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800743e:	b009      	add	sp, #36	; 0x24
 8007440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007442:	bf00      	nop
 8007444:	40003800 	.word	0x40003800
 8007448:	40020800 	.word	0x40020800
 800744c:	40020400 	.word	0x40020400

08007450 <zeros>:
}

static void zeros(float * a, int m, int n)
{
    int j;
    for (j=0; j<m*n; ++j)
 8007450:	434a      	muls	r2, r1
 8007452:	2300      	movs	r3, #0
        a[j] = 0;
 8007454:	2100      	movs	r1, #0
    for (j=0; j<m*n; ++j)
 8007456:	4293      	cmp	r3, r2
 8007458:	db00      	blt.n	800745c <zeros+0xc>
}
 800745a:	4770      	bx	lr
        a[j] = 0;
 800745c:	f840 1b04 	str.w	r1, [r0], #4
    for (j=0; j<m*n; ++j)
 8007460:	3301      	adds	r3, #1
 8007462:	e7f8      	b.n	8007456 <zeros+0x6>

08007464 <mulmat>:
}
#endif

/* C <- A * B */
static void mulmat(float * a, float * b, float * c, int arows, int acols, int bcols)
{
 8007464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007468:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800746c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    int i, j,l;

    for(i=0; i<arows; ++i)
        for(j=0; j<bcols; ++j) {
            c[i*bcols+j] = 0;
 8007470:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80074c8 <mulmat+0x64>
 8007474:	ea4f 0c89 	mov.w	ip, r9, lsl #2
 8007478:	ea4f 0a88 	mov.w	sl, r8, lsl #2
    for(i=0; i<arows; ++i)
 800747c:	2600      	movs	r6, #0
 800747e:	429e      	cmp	r6, r3
 8007480:	db1e      	blt.n	80074c0 <mulmat+0x5c>
            for(l=0; l<acols; ++l)
                c[i*bcols+j] += a[i*acols+l] * b[l*bcols+j];
        }
}
 8007482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            c[i*bcols+j] = 0;
 8007486:	ed84 7a00 	vstr	s14, [r4]
 800748a:	eb01 0e85 	add.w	lr, r1, r5, lsl #2
            for(l=0; l<acols; ++l)
 800748e:	4683      	mov	fp, r0
 8007490:	2700      	movs	r7, #0
 8007492:	4547      	cmp	r7, r8
 8007494:	db07      	blt.n	80074a6 <mulmat+0x42>
        for(j=0; j<bcols; ++j) {
 8007496:	3501      	adds	r5, #1
 8007498:	3404      	adds	r4, #4
 800749a:	454d      	cmp	r5, r9
 800749c:	dbf3      	blt.n	8007486 <mulmat+0x22>
    for(i=0; i<arows; ++i)
 800749e:	3601      	adds	r6, #1
 80074a0:	4462      	add	r2, ip
 80074a2:	4450      	add	r0, sl
 80074a4:	e7eb      	b.n	800747e <mulmat+0x1a>
                c[i*bcols+j] += a[i*acols+l] * b[l*bcols+j];
 80074a6:	edde 6a00 	vldr	s13, [lr]
 80074aa:	ecbb 6a01 	vldmia	fp!, {s12}
 80074ae:	edd4 7a00 	vldr	s15, [r4]
 80074b2:	eee6 7a26 	vfma.f32	s15, s12, s13
            for(l=0; l<acols; ++l)
 80074b6:	3701      	adds	r7, #1
 80074b8:	44e6      	add	lr, ip
                c[i*bcols+j] += a[i*acols+l] * b[l*bcols+j];
 80074ba:	edc4 7a00 	vstr	s15, [r4]
 80074be:	e7e8      	b.n	8007492 <mulmat+0x2e>
 80074c0:	4614      	mov	r4, r2
 80074c2:	2500      	movs	r5, #0
 80074c4:	e7e9      	b.n	800749a <mulmat+0x36>
 80074c6:	bf00      	nop
 80074c8:	00000000 	.word	0x00000000

080074cc <transpose>:
            y[i] += x[j] * a[i*n+j];
    }
}

static void transpose(float * a, float * at, int m, int n)
{
 80074cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074d0:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 80074d4:	ea4f 0e82 	mov.w	lr, r2, lsl #2
    int i,j;

    for(i=0; i<m; ++i)
 80074d8:	2400      	movs	r4, #0
 80074da:	4294      	cmp	r4, r2
 80074dc:	da0f      	bge.n	80074fe <transpose+0x32>
 80074de:	eb01 0684 	add.w	r6, r1, r4, lsl #2
 80074e2:	4607      	mov	r7, r0
 80074e4:	2500      	movs	r5, #0
 80074e6:	e005      	b.n	80074f4 <transpose+0x28>
        for(j=0; j<n; ++j) {
            at[j*m+i] = a[i*n+j];
 80074e8:	f857 8b04 	ldr.w	r8, [r7], #4
 80074ec:	f8c6 8000 	str.w	r8, [r6]
        for(j=0; j<n; ++j) {
 80074f0:	3501      	adds	r5, #1
 80074f2:	4476      	add	r6, lr
 80074f4:	429d      	cmp	r5, r3
 80074f6:	dbf7      	blt.n	80074e8 <transpose+0x1c>
    for(i=0; i<m; ++i)
 80074f8:	3401      	adds	r4, #1
 80074fa:	4460      	add	r0, ip
 80074fc:	e7ed      	b.n	80074da <transpose+0xe>
 80074fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007502 <accum>:
        }
}

/* A <- A + B */
static void accum(float * a, float * b, int m, int n)
{        
 8007502:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007504:	009f      	lsls	r7, r3, #2
    int i,j;

    for(i=0; i<m; ++i)
 8007506:	2400      	movs	r4, #0
 8007508:	4294      	cmp	r4, r2
 800750a:	db0f      	blt.n	800752c <accum+0x2a>
        for(j=0; j<n; ++j)
            a[i*n+j] += b[i*n+j];
}
 800750c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            a[i*n+j] += b[i*n+j];
 800750e:	ecbe 7a01 	vldmia	lr!, {s14}
 8007512:	edd6 7a00 	vldr	s15, [r6]
 8007516:	ee77 7a87 	vadd.f32	s15, s15, s14
        for(j=0; j<n; ++j)
 800751a:	3501      	adds	r5, #1
            a[i*n+j] += b[i*n+j];
 800751c:	ece6 7a01 	vstmia	r6!, {s15}
        for(j=0; j<n; ++j)
 8007520:	429d      	cmp	r5, r3
 8007522:	dbf4      	blt.n	800750e <accum+0xc>
    for(i=0; i<m; ++i)
 8007524:	3401      	adds	r4, #1
 8007526:	4438      	add	r0, r7
 8007528:	4439      	add	r1, r7
 800752a:	e7ed      	b.n	8007508 <accum+0x6>
 800752c:	468e      	mov	lr, r1
 800752e:	4606      	mov	r6, r0
 8007530:	2500      	movs	r5, #0
 8007532:	e7f5      	b.n	8007520 <accum+0x1e>

08007534 <unpack>:
    float * tmp5; 

} ekf_t;

static void unpack(void * v, ekf_t * ekf, int n, int m)
{
 8007534:	b570      	push	{r4, r5, r6, lr}
    /* skip over n, m in data structure */
    char * cptr = (char *)v;
    cptr += 2*sizeof(int);
 8007536:	3008      	adds	r0, #8

    float * dptr = (float *)cptr;
    ekf->x = dptr;
    dptr += n;
 8007538:	0096      	lsls	r6, r2, #2
    ekf->P = dptr;
    dptr += n*n;
 800753a:	fb02 f502 	mul.w	r5, r2, r2
 800753e:	00ad      	lsls	r5, r5, #2
    ekf->x = dptr;
 8007540:	6008      	str	r0, [r1, #0]
    dptr += n;
 8007542:	4430      	add	r0, r6
    ekf->Q = dptr;
    dptr += n*n;
    ekf->R = dptr;
    dptr += m*m;
 8007544:	fb03 f403 	mul.w	r4, r3, r3
    ekf->P = dptr;
 8007548:	6048      	str	r0, [r1, #4]
    dptr += n*n;
 800754a:	4428      	add	r0, r5
    dptr += m*m;
 800754c:	00a4      	lsls	r4, r4, #2
    ekf->G = dptr;
    dptr += n*m;
 800754e:	435a      	muls	r2, r3
    ekf->Q = dptr;
 8007550:	6088      	str	r0, [r1, #8]
    dptr += n*n;
 8007552:	4428      	add	r0, r5
    dptr += n*m;
 8007554:	0092      	lsls	r2, r2, #2
    ekf->R = dptr;
 8007556:	60c8      	str	r0, [r1, #12]
    dptr += m*m;
 8007558:	4420      	add	r0, r4
    ekf->G = dptr;
 800755a:	6108      	str	r0, [r1, #16]
    dptr += n*m;
 800755c:	4410      	add	r0, r2
    ekf->F = dptr;
 800755e:	6148      	str	r0, [r1, #20]
    dptr += n*n;
 8007560:	4428      	add	r0, r5
    ekf->H = dptr;
 8007562:	6188      	str	r0, [r1, #24]
    dptr += m*n;
 8007564:	4410      	add	r0, r2
    ekf->Ht = dptr;
 8007566:	61c8      	str	r0, [r1, #28]
    dptr += n*m;
 8007568:	4410      	add	r0, r2
    ekf->Ft = dptr;
 800756a:	6208      	str	r0, [r1, #32]
    dptr += n*n;
 800756c:	4428      	add	r0, r5
    ekf->Pp = dptr;
 800756e:	6248      	str	r0, [r1, #36]	; 0x24
    dptr += n*n;
 8007570:	4428      	add	r0, r5
    ekf->fx = dptr;
 8007572:	6288      	str	r0, [r1, #40]	; 0x28
    dptr += n;
 8007574:	4430      	add	r0, r6
    ekf->hx = dptr;
    dptr += m;
 8007576:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ekf->tmp0 = dptr;
 800757a:	630b      	str	r3, [r1, #48]	; 0x30
    dptr += n*n;
 800757c:	442b      	add	r3, r5
    ekf->tmp1 = dptr;
 800757e:	634b      	str	r3, [r1, #52]	; 0x34
    dptr += n*m;
 8007580:	4413      	add	r3, r2
    ekf->tmp2 = dptr;
 8007582:	638b      	str	r3, [r1, #56]	; 0x38
    dptr += m*n;
 8007584:	4413      	add	r3, r2
    ekf->tmp3 = dptr;
 8007586:	63cb      	str	r3, [r1, #60]	; 0x3c
    dptr += m*m;
 8007588:	4423      	add	r3, r4
    ekf->tmp4 = dptr;
 800758a:	640b      	str	r3, [r1, #64]	; 0x40
    dptr += m*m;
 800758c:	4423      	add	r3, r4
    ekf->hx = dptr;
 800758e:	62c8      	str	r0, [r1, #44]	; 0x2c
    ekf->tmp5 = dptr;
 8007590:	644b      	str	r3, [r1, #68]	; 0x44
 8007592:	bd70      	pop	{r4, r5, r6, pc}

08007594 <mat_exp>:
{
 8007594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007598:	ed2d 8b02 	vpush	{d8}
 800759c:	b087      	sub	sp, #28
 800759e:	0093      	lsls	r3, r2, #2
            PHI[i][j] = 0;
 80075a0:	ed9f 8a38 	vldr	s16, [pc, #224]	; 8007684 <mat_exp+0xf0>
 80075a4:	9302      	str	r3, [sp, #8]
{
 80075a6:	4682      	mov	sl, r0
 80075a8:	460c      	mov	r4, r1
 80075aa:	4615      	mov	r5, r2
 80075ac:	4680      	mov	r8, r0
    for(i=0; i<n; ++i)
 80075ae:	f04f 0900 	mov.w	r9, #0
 80075b2:	45a9      	cmp	r9, r5
 80075b4:	db43      	blt.n	800763e <mat_exp+0xaa>
 80075b6:	2200      	movs	r2, #0
 80075b8:	2624      	movs	r6, #36	; 0x24
    for(i=0; i<n; i++)
 80075ba:	42aa      	cmp	r2, r5
 80075bc:	db47      	blt.n	800764e <mat_exp+0xba>
 80075be:	2300      	movs	r3, #0
        PHI[i][i]+=1;
 80075c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    for(i=0; i<n; i++)
 80075c4:	42ab      	cmp	r3, r5
 80075c6:	f104 0428 	add.w	r4, r4, #40	; 0x28
 80075ca:	db52      	blt.n	8007672 <mat_exp+0xde>
}
 80075cc:	b007      	add	sp, #28
 80075ce:	ecbd 8b02 	vpop	{d8}
 80075d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            PHI[i][j] = 0;
 80075d6:	ed86 8a00 	vstr	s16, [r6]
 80075da:	eb0a 0b87 	add.w	fp, sl, r7, lsl #2
            for(l=0; l<n; ++l)
 80075de:	f8cd 8004 	str.w	r8, [sp, #4]
 80075e2:	9b01      	ldr	r3, [sp, #4]
 80075e4:	9a03      	ldr	r2, [sp, #12]
 80075e6:	4293      	cmp	r3, r2
 80075e8:	f10b 0b24 	add.w	fp, fp, #36	; 0x24
 80075ec:	d108      	bne.n	8007600 <mat_exp+0x6c>
        for(j=0; j<n; ++j) {
 80075ee:	3701      	adds	r7, #1
 80075f0:	3604      	adds	r6, #4
 80075f2:	42af      	cmp	r7, r5
 80075f4:	d1ef      	bne.n	80075d6 <mat_exp+0x42>
    for(i=0; i<n; ++i)
 80075f6:	f109 0901 	add.w	r9, r9, #1
 80075fa:	f108 0824 	add.w	r8, r8, #36	; 0x24
 80075fe:	e7d8      	b.n	80075b2 <mat_exp+0x1e>
                PHI[i][j] += F[i][l] * F[l][j] * 0.5;
 8007600:	9b01      	ldr	r3, [sp, #4]
 8007602:	ed5b 7a09 	vldr	s15, [fp, #-36]	; 0xffffffdc
 8007606:	ecb3 7a01 	vldmia	r3!, {s14}
 800760a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800760e:	9301      	str	r3, [sp, #4]
 8007610:	ee17 0a90 	vmov	r0, s15
 8007614:	f7f8 ff60 	bl	80004d8 <__aeabi_f2d>
 8007618:	2200      	movs	r2, #0
 800761a:	4b1b      	ldr	r3, [pc, #108]	; (8007688 <mat_exp+0xf4>)
 800761c:	f7f8 ffb0 	bl	8000580 <__aeabi_dmul>
 8007620:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007624:	6830      	ldr	r0, [r6, #0]
 8007626:	f7f8 ff57 	bl	80004d8 <__aeabi_f2d>
 800762a:	4602      	mov	r2, r0
 800762c:	460b      	mov	r3, r1
 800762e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007632:	f7f8 fdf3 	bl	800021c <__adddf3>
 8007636:	f7f9 fa7b 	bl	8000b30 <__aeabi_d2f>
 800763a:	6030      	str	r0, [r6, #0]
 800763c:	e7d1      	b.n	80075e2 <mat_exp+0x4e>
 800763e:	2324      	movs	r3, #36	; 0x24
 8007640:	fb03 4609 	mla	r6, r3, r9, r4
 8007644:	9b02      	ldr	r3, [sp, #8]
 8007646:	4443      	add	r3, r8
 8007648:	9303      	str	r3, [sp, #12]
    for(i=0; i<n; ++i)
 800764a:	2700      	movs	r7, #0
 800764c:	e7d1      	b.n	80075f2 <mat_exp+0x5e>
 800764e:	fb06 f302 	mul.w	r3, r6, r2
 8007652:	18e0      	adds	r0, r4, r3
    for(i=0; i<n; i++)
 8007654:	2100      	movs	r1, #0
 8007656:	4453      	add	r3, sl
            PHI[i][j]+=F[i][j];
 8007658:	ecb3 7a01 	vldmia	r3!, {s14}
 800765c:	edd0 7a00 	vldr	s15, [r0]
        for(j=0; j<n; j++)
 8007660:	3101      	adds	r1, #1
            PHI[i][j]+=F[i][j];
 8007662:	ee77 7a87 	vadd.f32	s15, s15, s14
        for(j=0; j<n; j++)
 8007666:	428d      	cmp	r5, r1
            PHI[i][j]+=F[i][j];
 8007668:	ece0 7a01 	vstmia	r0!, {s15}
        for(j=0; j<n; j++)
 800766c:	d1f4      	bne.n	8007658 <mat_exp+0xc4>
    for(i=0; i<n; i++)
 800766e:	3201      	adds	r2, #1
 8007670:	e7a3      	b.n	80075ba <mat_exp+0x26>
        PHI[i][i]+=1;
 8007672:	ed54 7a0a 	vldr	s15, [r4, #-40]	; 0xffffffd8
 8007676:	ee77 7a87 	vadd.f32	s15, s15, s14
    for(i=0; i<n; i++)
 800767a:	3301      	adds	r3, #1
        PHI[i][i]+=1;
 800767c:	ed44 7a0a 	vstr	s15, [r4, #-40]	; 0xffffffd8
 8007680:	e7a0      	b.n	80075c4 <mat_exp+0x30>
 8007682:	bf00      	nop
 8007684:	00000000 	.word	0x00000000
 8007688:	3fe00000 	.word	0x3fe00000

0800768c <updateP>:
{
 800768c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007690:	2300      	movs	r3, #0
 8007692:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8007696:	f103 0624 	add.w	r6, r3, #36	; 0x24
 800769a:	eb0d 0703 	add.w	r7, sp, r3
 800769e:	2400      	movs	r4, #0
 80076a0:	eb01 0c06 	add.w	ip, r1, r6
 80076a4:	eddf 7a30 	vldr	s15, [pc, #192]	; 8007768 <updateP+0xdc>
 80076a8:	18cd      	adds	r5, r1, r3
 80076aa:	eb00 0e04 	add.w	lr, r0, r4
                tmp[i][j] += F[i][l]*Pmatrix[l][j];
 80076ae:	ecf5 6a01 	vldmia	r5!, {s13}
 80076b2:	46f0      	mov	r8, lr
 80076b4:	ed98 7a00 	vldr	s14, [r8]
            for(l=0; l<n; ++l)
 80076b8:	4565      	cmp	r5, ip
                tmp[i][j] += F[i][l]*Pmatrix[l][j];
 80076ba:	f10e 0e24 	add.w	lr, lr, #36	; 0x24
 80076be:	eee6 7a87 	vfma.f32	s15, s13, s14
            for(l=0; l<n; ++l)
 80076c2:	d1f4      	bne.n	80076ae <updateP+0x22>
 80076c4:	3404      	adds	r4, #4
        for(j=0; j<n; ++j) {
 80076c6:	2c24      	cmp	r4, #36	; 0x24
 80076c8:	ece7 7a01 	vstmia	r7!, {s15}
 80076cc:	d1ea      	bne.n	80076a4 <updateP+0x18>
    for(i=0; i<n; ++i)
 80076ce:	f5b6 7fa2 	cmp.w	r6, #324	; 0x144
 80076d2:	4633      	mov	r3, r6
 80076d4:	d1df      	bne.n	8007696 <updateP+0xa>
 80076d6:	2300      	movs	r3, #0
 80076d8:	eb03 06c3 	add.w	r6, r3, r3, lsl #3
 80076dc:	440e      	add	r6, r1
{
 80076de:	2500      	movs	r5, #0
            Ft[j][i] = F[i][j];
 80076e0:	fb04 3705 	mla	r7, r4, r5, r3
 80076e4:	f50d 7ca2 	add.w	ip, sp, #324	; 0x144
 80076e8:	4467      	add	r7, ip
        for(j=0; j<n; ++j) {
 80076ea:	3501      	adds	r5, #1
            Ft[j][i] = F[i][j];
 80076ec:	f856 eb04 	ldr.w	lr, [r6], #4
 80076f0:	f8c7 e000 	str.w	lr, [r7]
        for(j=0; j<n; ++j) {
 80076f4:	2d09      	cmp	r5, #9
 80076f6:	d1f3      	bne.n	80076e0 <updateP+0x54>
 80076f8:	3304      	adds	r3, #4
    for(i=0; i<n; ++i)
 80076fa:	2b24      	cmp	r3, #36	; 0x24
 80076fc:	d1ec      	bne.n	80076d8 <updateP+0x4c>
 80076fe:	2100      	movs	r1, #0
 8007700:	1847      	adds	r7, r0, r1
 8007702:	2400      	movs	r4, #0
 8007704:	eddf 7a18 	vldr	s15, [pc, #96]	; 8007768 <updateP+0xdc>
 8007708:	eb0d 0e01 	add.w	lr, sp, r1
            for(l=0; l<n; ++l)
 800770c:	2500      	movs	r5, #0
                Pmatrix[i][j] += tmp[i][l] * Ft[l][j];
 800770e:	fb03 4605 	mla	r6, r3, r5, r4
 8007712:	f50d 7ca2 	add.w	ip, sp, #324	; 0x144
 8007716:	4466      	add	r6, ip
 8007718:	ecfe 6a01 	vldmia	lr!, {s13}
 800771c:	ed96 7a00 	vldr	s14, [r6]
            for(l=0; l<n; ++l)
 8007720:	3501      	adds	r5, #1
 8007722:	2d09      	cmp	r5, #9
                Pmatrix[i][j] += tmp[i][l] * Ft[l][j];
 8007724:	eee6 7a87 	vfma.f32	s15, s13, s14
            for(l=0; l<n; ++l)
 8007728:	d1f1      	bne.n	800770e <updateP+0x82>
 800772a:	3404      	adds	r4, #4
        for(j=0; j<n; ++j) {
 800772c:	2c24      	cmp	r4, #36	; 0x24
 800772e:	ece7 7a01 	vstmia	r7!, {s15}
 8007732:	d1e7      	bne.n	8007704 <updateP+0x78>
 8007734:	3124      	adds	r1, #36	; 0x24
    for(i=0; i<n; ++i)
 8007736:	f5b1 7fa2 	cmp.w	r1, #324	; 0x144
 800773a:	d1e1      	bne.n	8007700 <updateP+0x74>
 800773c:	2300      	movs	r3, #0
 800773e:	18c1      	adds	r1, r0, r3
 8007740:	18d4      	adds	r4, r2, r3
 8007742:	3324      	adds	r3, #36	; 0x24
 8007744:	18c5      	adds	r5, r0, r3
            Pmatrix[i][j]+=Q[i][j];    
 8007746:	ecb4 7a01 	vldmia	r4!, {s14}
 800774a:	edd1 7a00 	vldr	s15, [r1]
 800774e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007752:	ece1 7a01 	vstmia	r1!, {s15}
        for(j=0; j<n; j++)
 8007756:	428d      	cmp	r5, r1
 8007758:	d1f5      	bne.n	8007746 <updateP+0xba>
    for(i=0; i<n; i++)
 800775a:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 800775e:	d1ee      	bne.n	800773e <updateP+0xb2>
}
 8007760:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8007764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007768:	00000000 	.word	0x00000000

0800776c <ekf_init>:
  }

void ekf_init(void * v, int n, int m)
{
 800776c:	b530      	push	{r4, r5, lr}
 800776e:	460c      	mov	r4, r1
 8007770:	b093      	sub	sp, #76	; 0x4c
 8007772:	4615      	mov	r5, r2
    ptr++;
    *ptr = m;

    /* unpack rest of incoming structure for initlization */
    ekf_t ekf;
    unpack(v, &ekf, n, m);
 8007774:	4613      	mov	r3, r2
    *ptr = m;
 8007776:	e880 0030 	stmia.w	r0, {r4, r5}
    unpack(v, &ekf, n, m);
 800777a:	460a      	mov	r2, r1
 800777c:	4669      	mov	r1, sp
 800777e:	f7ff fed9 	bl	8007534 <unpack>

    /* zero-out matrices */
    zeros(ekf.P, n, n);
 8007782:	4622      	mov	r2, r4
 8007784:	4621      	mov	r1, r4
 8007786:	9801      	ldr	r0, [sp, #4]
 8007788:	f7ff fe62 	bl	8007450 <zeros>
    zeros(ekf.Q, n, n);
 800778c:	4622      	mov	r2, r4
 800778e:	4621      	mov	r1, r4
 8007790:	9802      	ldr	r0, [sp, #8]
 8007792:	f7ff fe5d 	bl	8007450 <zeros>
    zeros(ekf.R, m, m);
 8007796:	462a      	mov	r2, r5
 8007798:	4629      	mov	r1, r5
 800779a:	9803      	ldr	r0, [sp, #12]
 800779c:	f7ff fe58 	bl	8007450 <zeros>
    zeros(ekf.G, n, m);
 80077a0:	462a      	mov	r2, r5
 80077a2:	4621      	mov	r1, r4
 80077a4:	9804      	ldr	r0, [sp, #16]
 80077a6:	f7ff fe53 	bl	8007450 <zeros>
    zeros(ekf.F, n, n);
 80077aa:	4622      	mov	r2, r4
 80077ac:	4621      	mov	r1, r4
 80077ae:	9805      	ldr	r0, [sp, #20]
 80077b0:	f7ff fe4e 	bl	8007450 <zeros>
    zeros(ekf.H, m, n);
 80077b4:	4622      	mov	r2, r4
 80077b6:	4629      	mov	r1, r5
 80077b8:	9806      	ldr	r0, [sp, #24]
 80077ba:	f7ff fe49 	bl	8007450 <zeros>
}
 80077be:	b013      	add	sp, #76	; 0x4c
 80077c0:	bd30      	pop	{r4, r5, pc}
	...

080077c4 <ekf_step>:

int ekf_step(void * v, float * z)
{        
 80077c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /* unpack incoming structure */

    int * ptr = (int *)v;
    int n = *ptr;
    ptr++;
    int m = *ptr;
 80077c8:	e890 0810 	ldmia.w	r0, {r4, fp}
{        
 80077cc:	b09f      	sub	sp, #124	; 0x7c

    ekf_t ekf;
    unpack(v, &ekf, n, m); 
 80077ce:	465b      	mov	r3, fp
{        
 80077d0:	910a      	str	r1, [sp, #40]	; 0x28
    unpack(v, &ekf, n, m); 
 80077d2:	4622      	mov	r2, r4
 80077d4:	a90c      	add	r1, sp, #48	; 0x30
 80077d6:	f7ff fead 	bl	8007534 <unpack>
 
    /* P_k = F_{k-1} P_{k-1} F^T_{k-1} + Q_{k-1} */
    mulmat(ekf.F, ekf.P, ekf.tmp0, n, n, n);
 80077da:	4623      	mov	r3, r4
 80077dc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80077de:	990d      	ldr	r1, [sp, #52]	; 0x34
 80077e0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80077e2:	9401      	str	r4, [sp, #4]
 80077e4:	9400      	str	r4, [sp, #0]
 80077e6:	f7ff fe3d 	bl	8007464 <mulmat>
    transpose(ekf.F, ekf.Ft, n, n);
 80077ea:	4623      	mov	r3, r4
 80077ec:	4622      	mov	r2, r4
 80077ee:	9914      	ldr	r1, [sp, #80]	; 0x50
 80077f0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80077f2:	f7ff fe6b 	bl	80074cc <transpose>
    mulmat(ekf.tmp0, ekf.Ft, ekf.Pp, n, n, n);
 80077f6:	4623      	mov	r3, r4
 80077f8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80077fa:	9914      	ldr	r1, [sp, #80]	; 0x50
 80077fc:	9818      	ldr	r0, [sp, #96]	; 0x60
 80077fe:	9401      	str	r4, [sp, #4]
 8007800:	9400      	str	r4, [sp, #0]
 8007802:	f7ff fe2f 	bl	8007464 <mulmat>
    accum(ekf.Pp, ekf.Q, n, n);
 8007806:	4623      	mov	r3, r4
 8007808:	4622      	mov	r2, r4
 800780a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800780c:	9815      	ldr	r0, [sp, #84]	; 0x54
 800780e:	f7ff fe78 	bl	8007502 <accum>

    /* G_k = P_k H^T_k (H_k P_k H^T_k + R)^{-1} */
    transpose(ekf.H, ekf.Ht, m, n);
 8007812:	4623      	mov	r3, r4
 8007814:	465a      	mov	r2, fp
 8007816:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007818:	9812      	ldr	r0, [sp, #72]	; 0x48
 800781a:	f7ff fe57 	bl	80074cc <transpose>
    mulmat(ekf.Pp, ekf.Ht, ekf.tmp1, n, n, m);
 800781e:	4623      	mov	r3, r4
 8007820:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007822:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007824:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007826:	e88d 0810 	stmia.w	sp, {r4, fp}
 800782a:	f7ff fe1b 	bl	8007464 <mulmat>
    mulmat(ekf.H, ekf.Pp, ekf.tmp2, m, n, n);
 800782e:	465b      	mov	r3, fp
 8007830:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007832:	9915      	ldr	r1, [sp, #84]	; 0x54
 8007834:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007836:	9401      	str	r4, [sp, #4]
 8007838:	9400      	str	r4, [sp, #0]
 800783a:	f7ff fe13 	bl	8007464 <mulmat>
    mulmat(ekf.tmp2, ekf.Ht, ekf.tmp3, m, n, m);
 800783e:	465b      	mov	r3, fp
 8007840:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007842:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007844:	981a      	ldr	r0, [sp, #104]	; 0x68
 8007846:	e88d 0810 	stmia.w	sp, {r4, fp}
 800784a:	f7ff fe0b 	bl	8007464 <mulmat>
    accum(ekf.tmp3, ekf.R, m, m);
 800784e:	465b      	mov	r3, fp
 8007850:	465a      	mov	r2, fp
 8007852:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007854:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007856:	f7ff fe54 	bl	8007502 <accum>
    if (cholsl(ekf.tmp3, ekf.tmp4, ekf.tmp5, m)) return 1;
 800785a:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800785e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007860:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007862:	f8cd 800c 	str.w	r8, [sp, #12]
 8007866:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800786a:	4642      	mov	r2, r8
    for (i = 0; i < n; i++) 
 800786c:	2100      	movs	r1, #0
 800786e:	458b      	cmp	fp, r1
 8007870:	dc4a      	bgt.n	8007908 <ekf_step+0x144>
 8007872:	f10a 0304 	add.w	r3, sl, #4
 8007876:	9307      	str	r3, [sp, #28]
 8007878:	f10b 0301 	add.w	r3, fp, #1
 800787c:	9602      	str	r6, [sp, #8]
 800787e:	9305      	str	r3, [sp, #20]
 8007880:	4642      	mov	r2, r8
 8007882:	f8cd 8010 	str.w	r8, [sp, #16]
 8007886:	4647      	mov	r7, r8
 8007888:	2500      	movs	r5, #0
    for (i = 0; i < n; i++) {
 800788a:	45ab      	cmp	fp, r5
 800788c:	dc48      	bgt.n	8007920 <ekf_step+0x15c>
 800788e:	f10a 0304 	add.w	r3, sl, #4
 8007892:	9306      	str	r3, [sp, #24]
 8007894:	9b05      	ldr	r3, [sp, #20]
 8007896:	eba3 030b 	sub.w	r3, r3, fp
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	2100      	movs	r1, #0
 800789e:	9307      	str	r3, [sp, #28]
 80078a0:	4642      	mov	r2, r8
 80078a2:	465f      	mov	r7, fp
 80078a4:	460b      	mov	r3, r1
        a[i*n+i] = 1 / p[i];
 80078a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    for (i = 0; i < n; i++) {
 80078aa:	459b      	cmp	fp, r3
 80078ac:	dc79      	bgt.n	80079a2 <ekf_step+0x1de>
 80078ae:	f10a 0304 	add.w	r3, sl, #4
 80078b2:	9306      	str	r3, [sp, #24]
 80078b4:	eb08 000a 	add.w	r0, r8, sl
 80078b8:	4641      	mov	r1, r8
 80078ba:	2200      	movs	r2, #0
            a[i*n+j] = 0.0;
 80078bc:	2500      	movs	r5, #0
    for (i = 0; i < n; i++) {
 80078be:	4593      	cmp	fp, r2
 80078c0:	f300 80a5 	bgt.w	8007a0e <ekf_step+0x24a>
 80078c4:	9a05      	ldr	r2, [sp, #20]
 80078c6:	f8cd 8010 	str.w	r8, [sp, #16]
 80078ca:	f06f 0303 	mvn.w	r3, #3
 80078ce:	4353      	muls	r3, r2
 80078d0:	9307      	str	r3, [sp, #28]
 80078d2:	3304      	adds	r3, #4
 80078d4:	9308      	str	r3, [sp, #32]
 80078d6:	0093      	lsls	r3, r2, #2
 80078d8:	ebaa 0208 	sub.w	r2, sl, r8
 80078dc:	9908      	ldr	r1, [sp, #32]
 80078de:	9309      	str	r3, [sp, #36]	; 0x24
 80078e0:	3204      	adds	r2, #4
 80078e2:	4643      	mov	r3, r8
 80078e4:	9105      	str	r1, [sp, #20]
 80078e6:	f04f 0900 	mov.w	r9, #0
 80078ea:	920b      	str	r2, [sp, #44]	; 0x2c
    for (i = 0; i < n; i++) {
 80078ec:	45cb      	cmp	fp, r9
 80078ee:	f300 8099 	bgt.w	8007a24 <ekf_step+0x260>
 80078f2:	f10a 0504 	add.w	r5, sl, #4
 80078f6:	4640      	mov	r0, r8
 80078f8:	2300      	movs	r3, #0
    for (i = 0; i < n; i++) {
 80078fa:	459b      	cmp	fp, r3
 80078fc:	f340 815a 	ble.w	8007bb4 <ekf_step+0x3f0>
 8007900:	eb08 0183 	add.w	r1, r8, r3, lsl #2
 8007904:	9a03      	ldr	r2, [sp, #12]
 8007906:	e0dd      	b.n	8007ac4 <ekf_step+0x300>
 8007908:	eb03 050a 	add.w	r5, r3, sl
    for (i = 0; i < n; i++) 
 800790c:	4610      	mov	r0, r2
            a[i*n+j] = A[i*n+j];
 800790e:	f853 7b04 	ldr.w	r7, [r3], #4
 8007912:	f840 7b04 	str.w	r7, [r0], #4
        for (j = 0; j < n; j++) 
 8007916:	42ab      	cmp	r3, r5
 8007918:	d1f9      	bne.n	800790e <ekf_step+0x14a>
    for (i = 0; i < n; i++) 
 800791a:	3101      	adds	r1, #1
 800791c:	4452      	add	r2, sl
 800791e:	e7a6      	b.n	800786e <ekf_step+0xaa>
    for (i = 0; i < n; i++) {
 8007920:	4691      	mov	r9, r2
 8007922:	9706      	str	r7, [sp, #24]
 8007924:	462b      	mov	r3, r5
            sum = a[i*n+j];
 8007926:	9906      	ldr	r1, [sp, #24]
 8007928:	ecf1 7a01 	vldmia	r1!, {s15}
 800792c:	46ce      	mov	lr, r9
 800792e:	9106      	str	r1, [sp, #24]
 8007930:	4639      	mov	r1, r7
            for (k = i - 1; k >= 0; k--) {
 8007932:	9804      	ldr	r0, [sp, #16]
 8007934:	4281      	cmp	r1, r0
 8007936:	d126      	bne.n	8007986 <ekf_step+0x1c2>
            if (i == j) {
 8007938:	429d      	cmp	r5, r3
 800793a:	d12b      	bne.n	8007994 <ekf_step+0x1d0>
                if (sum <= 0) {
 800793c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007944:	9209      	str	r2, [sp, #36]	; 0x24
 8007946:	9308      	str	r3, [sp, #32]
 8007948:	f240 8132 	bls.w	8007bb0 <ekf_step+0x3ec>
                p[i] = sqrt(sum);
 800794c:	ee17 0a90 	vmov	r0, s15
 8007950:	f7f8 fdc2 	bl	80004d8 <__aeabi_f2d>
 8007954:	ec41 0b10 	vmov	d0, r0, r1
 8007958:	f000 ff56 	bl	8008808 <sqrt>
 800795c:	ec51 0b10 	vmov	r0, r1, d0
 8007960:	f7f9 f8e6 	bl	8000b30 <__aeabi_d2f>
 8007964:	9b08      	ldr	r3, [sp, #32]
 8007966:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007968:	6030      	str	r0, [r6, #0]
        for (j = i; j < n; j++) {
 800796a:	3301      	adds	r3, #1
 800796c:	459b      	cmp	fp, r3
 800796e:	44d1      	add	r9, sl
 8007970:	d1d9      	bne.n	8007926 <ekf_step+0x162>
 8007972:	9b07      	ldr	r3, [sp, #28]
 8007974:	441f      	add	r7, r3
 8007976:	9b04      	ldr	r3, [sp, #16]
 8007978:	4453      	add	r3, sl
 800797a:	9304      	str	r3, [sp, #16]
 800797c:	9b07      	ldr	r3, [sp, #28]
    for (i = 0; i < n; i++) {
 800797e:	3501      	adds	r5, #1
 8007980:	3604      	adds	r6, #4
 8007982:	441a      	add	r2, r3
 8007984:	e781      	b.n	800788a <ekf_step+0xc6>
                sum -= a[i*n+k] * a[j*n+k];
 8007986:	ed71 6a01 	vldmdb	r1!, {s13}
 800798a:	ed3e 7a01 	vldmdb	lr!, {s14}
 800798e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8007992:	e7ce      	b.n	8007932 <ekf_step+0x16e>
                a[j*n+i] = sum / p[i];
 8007994:	edd6 6a00 	vldr	s13, [r6]
 8007998:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800799c:	ed89 7a00 	vstr	s14, [r9]
 80079a0:	e7e3      	b.n	800796a <ekf_step+0x1a6>
        a[i*n+i] = 1 / p[i];
 80079a2:	9802      	ldr	r0, [sp, #8]
 80079a4:	ecf0 6a01 	vldmia	r0!, {s13}
 80079a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80079ac:	9002      	str	r0, [sp, #8]
        for (j = i + 1; j < n; j++) {
 80079ae:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80079b2:	1c58      	adds	r0, r3, #1
 80079b4:	9004      	str	r0, [sp, #16]
 80079b6:	463d      	mov	r5, r7
 80079b8:	4606      	mov	r6, r0
        a[i*n+i] = 1 / p[i];
 80079ba:	edc2 7a00 	vstr	s15, [r2]
        for (j = i + 1; j < n; j++) {
 80079be:	45b3      	cmp	fp, r6
 80079c0:	d01e      	beq.n	8007a00 <ekf_step+0x23c>
 80079c2:	18e8      	adds	r0, r5, r3
 80079c4:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80079c8:	4694      	mov	ip, r2
 80079ca:	469e      	mov	lr, r3
 80079cc:	eddf 7a81 	vldr	s15, [pc, #516]	; 8007bd4 <ekf_step+0x410>
 80079d0:	e008      	b.n	80079e4 <ekf_step+0x220>
                sum -= a[j*n+k] * a[k*n+i];
 80079d2:	eddc 6a00 	vldr	s13, [ip]
 80079d6:	ecb0 6a01 	vldmia	r0!, {s12}
 80079da:	eee6 7a66 	vfms.f32	s15, s12, s13
            for (k = i; k < j; k++) {
 80079de:	f10e 0e01 	add.w	lr, lr, #1
 80079e2:	44d4      	add	ip, sl
 80079e4:	4576      	cmp	r6, lr
 80079e6:	dcf4      	bgt.n	80079d2 <ekf_step+0x20e>
            a[j*n+i] = sum / p[j];
 80079e8:	ecb9 6a01 	vldmia	r9!, {s12}
 80079ec:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80079f0:	eb01 0085 	add.w	r0, r1, r5, lsl #2
 80079f4:	4440      	add	r0, r8
        for (j = i + 1; j < n; j++) {
 80079f6:	3601      	adds	r6, #1
 80079f8:	445d      	add	r5, fp
            a[j*n+i] = sum / p[j];
 80079fa:	edc0 6a00 	vstr	s13, [r0]
 80079fe:	e7de      	b.n	80079be <ekf_step+0x1fa>
 8007a00:	9b06      	ldr	r3, [sp, #24]
 8007a02:	441a      	add	r2, r3
 8007a04:	9b07      	ldr	r3, [sp, #28]
 8007a06:	445f      	add	r7, fp
 8007a08:	4419      	add	r1, r3
    for (i = 0; i < n; i++) {
 8007a0a:	9b04      	ldr	r3, [sp, #16]
 8007a0c:	e74d      	b.n	80078aa <ekf_step+0xe6>
        for (j = i + 1; j < n; j++) {
 8007a0e:	3201      	adds	r2, #1
 8007a10:	460b      	mov	r3, r1
 8007a12:	3304      	adds	r3, #4
 8007a14:	4283      	cmp	r3, r0
 8007a16:	d103      	bne.n	8007a20 <ekf_step+0x25c>
 8007a18:	9b06      	ldr	r3, [sp, #24]
 8007a1a:	4450      	add	r0, sl
 8007a1c:	4419      	add	r1, r3
 8007a1e:	e74e      	b.n	80078be <ekf_step+0xfa>
            a[i*n+j] = 0.0;
 8007a20:	601d      	str	r5, [r3, #0]
 8007a22:	e7f6      	b.n	8007a12 <ekf_step+0x24e>
        a[i*n+i] *= a[i*n+i];
 8007a24:	edd3 7a00 	vldr	s15, [r3]
 8007a28:	ee67 7aa7 	vmul.f32	s15, s15, s15
        for (k = i + 1; k < n; k++) {
 8007a2c:	f109 0901 	add.w	r9, r9, #1
 8007a30:	eb03 000a 	add.w	r0, r3, sl
        a[i*n+i] *= a[i*n+i];
 8007a34:	edc3 7a00 	vstr	s15, [r3]
        for (k = i + 1; k < n; k++) {
 8007a38:	4601      	mov	r1, r0
 8007a3a:	464a      	mov	r2, r9
 8007a3c:	4593      	cmp	fp, r2
 8007a3e:	d114      	bne.n	8007a6a <ekf_step+0x2a6>
 8007a40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a42:	9f05      	ldr	r7, [sp, #20]
 8007a44:	9d04      	ldr	r5, [sp, #16]
 8007a46:	f8cd 9008 	str.w	r9, [sp, #8]
 8007a4a:	eb01 0e03 	add.w	lr, r1, r3
        for (j = i + 1; j < n; j++) {
 8007a4e:	9902      	ldr	r1, [sp, #8]
 8007a50:	428a      	cmp	r2, r1
 8007a52:	d115      	bne.n	8007a80 <ekf_step+0x2bc>
 8007a54:	9a04      	ldr	r2, [sp, #16]
 8007a56:	9906      	ldr	r1, [sp, #24]
 8007a58:	440a      	add	r2, r1
 8007a5a:	9204      	str	r2, [sp, #16]
 8007a5c:	9907      	ldr	r1, [sp, #28]
 8007a5e:	9a05      	ldr	r2, [sp, #20]
 8007a60:	440a      	add	r2, r1
 8007a62:	9205      	str	r2, [sp, #20]
 8007a64:	9a06      	ldr	r2, [sp, #24]
 8007a66:	4413      	add	r3, r2
 8007a68:	e740      	b.n	80078ec <ekf_step+0x128>
            a[i*n+i] += a[k*n+i] * a[k*n+i];
 8007a6a:	ed91 7a00 	vldr	s14, [r1]
 8007a6e:	edd3 7a00 	vldr	s15, [r3]
 8007a72:	eee7 7a07 	vfma.f32	s15, s14, s14
        for (k = i + 1; k < n; k++) {
 8007a76:	3201      	adds	r2, #1
 8007a78:	4451      	add	r1, sl
            a[i*n+i] += a[k*n+i] * a[k*n+i];
 8007a7a:	edc3 7a00 	vstr	s15, [r3]
 8007a7e:	e7dd      	b.n	8007a3c <ekf_step+0x278>
        for (j = i + 1; j < n; j++) {
 8007a80:	f8dd c008 	ldr.w	ip, [sp, #8]
 8007a84:	4606      	mov	r6, r0
                a[i*n+j] += a[k*n+i] * a[k*n+j];
 8007a86:	19f1      	adds	r1, r6, r7
 8007a88:	4471      	add	r1, lr
 8007a8a:	edd6 6a00 	vldr	s13, [r6]
 8007a8e:	ed91 7a00 	vldr	s14, [r1]
 8007a92:	edd5 7a01 	vldr	s15, [r5, #4]
 8007a96:	eee6 7a87 	vfma.f32	s15, s13, s14
            for (k = j; k < n; k++) {
 8007a9a:	f10c 0c01 	add.w	ip, ip, #1
 8007a9e:	4562      	cmp	r2, ip
 8007aa0:	4456      	add	r6, sl
                a[i*n+j] += a[k*n+i] * a[k*n+j];
 8007aa2:	edc5 7a01 	vstr	s15, [r5, #4]
            for (k = j; k < n; k++) {
 8007aa6:	d1ee      	bne.n	8007a86 <ekf_step+0x2c2>
        for (j = i + 1; j < n; j++) {
 8007aa8:	9902      	ldr	r1, [sp, #8]
 8007aaa:	3101      	adds	r1, #1
 8007aac:	9102      	str	r1, [sp, #8]
 8007aae:	9908      	ldr	r1, [sp, #32]
 8007ab0:	440f      	add	r7, r1
 8007ab2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ab4:	4450      	add	r0, sl
 8007ab6:	3504      	adds	r5, #4
 8007ab8:	448e      	add	lr, r1
 8007aba:	e7c8      	b.n	8007a4e <ekf_step+0x28a>
            a[i*n+j] = a[j*n+i];
 8007abc:	680e      	ldr	r6, [r1, #0]
 8007abe:	f842 6b04 	str.w	r6, [r2], #4
 8007ac2:	4451      	add	r1, sl
        for (j = 0; j < i; j++) {
 8007ac4:	4282      	cmp	r2, r0
 8007ac6:	d1f9      	bne.n	8007abc <ekf_step+0x2f8>
 8007ac8:	9a03      	ldr	r2, [sp, #12]
 8007aca:	4452      	add	r2, sl
    for (i = 0; i < n; i++) {
 8007acc:	3301      	adds	r3, #1
 8007ace:	9203      	str	r2, [sp, #12]
 8007ad0:	4428      	add	r0, r5
 8007ad2:	e712      	b.n	80078fa <ekf_step+0x136>
        c[j] = a[j] - b[j];
 8007ad4:	ecf3 7a01 	vldmia	r3!, {s15}
 8007ad8:	ecb0 7a01 	vldmia	r0!, {s14}
 8007adc:	ee77 7ac7 	vsub.f32	s15, s15, s14
    for(j=0; j<n; ++j)
 8007ae0:	3201      	adds	r2, #1
        c[j] = a[j] - b[j];
 8007ae2:	ece1 7a01 	vstmia	r1!, {s15}
    for(j=0; j<n; ++j)
 8007ae6:	4593      	cmp	fp, r2
 8007ae8:	dcf4      	bgt.n	8007ad4 <ekf_step+0x310>
    mulmat(ekf.tmp1, ekf.tmp4, ekf.G, n, m, m);

    /* \hat{x}_k = \hat{x_k} + G_k(z_k - h(\hat{x}_k)) */
    sub(z, ekf.hx, ekf.tmp5, m);
    mulvec(ekf.G, ekf.tmp5, ekf.tmp2, n, m);
 8007aea:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007aec:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007aee:	4605      	mov	r5, r0
 8007af0:	4613      	mov	r3, r2
    for(i=0; i<m; ++i) {
 8007af2:	2100      	movs	r1, #0
        y[i] = 0;
 8007af4:	f04f 0800 	mov.w	r8, #0
    for(i=0; i<m; ++i) {
 8007af8:	428c      	cmp	r4, r1
 8007afa:	dc24      	bgt.n	8007b46 <ekf_step+0x382>
 8007afc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007afe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    for(j=0; j<n; ++j)
 8007b00:	2300      	movs	r3, #0
 8007b02:	429c      	cmp	r4, r3
 8007b04:	dc36      	bgt.n	8007b74 <ekf_step+0x3b0>
    add(ekf.fx, ekf.tmp2, ekf.x, n);

    /* P_k = (I - G_k H_k) P_k */
    mulmat(ekf.G, ekf.H, ekf.tmp0, n, m, n);
 8007b06:	4623      	mov	r3, r4
 8007b08:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007b0a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007b0c:	9401      	str	r4, [sp, #4]
 8007b0e:	f8cd b000 	str.w	fp, [sp]
 8007b12:	f7ff fca7 	bl	8007464 <mulmat>
    negate(ekf.tmp0, n, n);
 8007b16:	9818      	ldr	r0, [sp, #96]	; 0x60
 8007b18:	00a1      	lsls	r1, r4, #2
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	4603      	mov	r3, r0
    for(i=0; i<m; ++i)
 8007b1e:	2500      	movs	r5, #0
 8007b20:	42ac      	cmp	r4, r5
 8007b22:	dc31      	bgt.n	8007b88 <ekf_step+0x3c4>
 8007b24:	3104      	adds	r1, #4
 8007b26:	2300      	movs	r3, #0
        a[i*n+i] += 1;
 8007b28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    for (i=0; i<n; ++i)
 8007b2c:	429c      	cmp	r4, r3
 8007b2e:	dc36      	bgt.n	8007b9e <ekf_step+0x3da>
    mat_addeye(ekf.tmp0, n);
    mulmat(ekf.tmp0, ekf.Pp, ekf.P, n, n, n);
 8007b30:	9401      	str	r4, [sp, #4]
 8007b32:	9400      	str	r4, [sp, #0]
 8007b34:	4623      	mov	r3, r4
 8007b36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b38:	9915      	ldr	r1, [sp, #84]	; 0x54
 8007b3a:	f7ff fc93 	bl	8007464 <mulmat>

    /* success */
    return 0;
 8007b3e:	2000      	movs	r0, #0
}
 8007b40:	b01f      	add	sp, #124	; 0x7c
 8007b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        y[i] = 0;
 8007b46:	f8c3 8000 	str.w	r8, [r3]
 8007b4a:	46ac      	mov	ip, r5
 8007b4c:	46be      	mov	lr, r7
        for(j=0; j<n; ++j)
 8007b4e:	2600      	movs	r6, #0
 8007b50:	45b3      	cmp	fp, r6
 8007b52:	dc03      	bgt.n	8007b5c <ekf_step+0x398>
    for(i=0; i<m; ++i) {
 8007b54:	3101      	adds	r1, #1
 8007b56:	4455      	add	r5, sl
 8007b58:	3304      	adds	r3, #4
 8007b5a:	e7cd      	b.n	8007af8 <ekf_step+0x334>
            y[i] += x[j] * a[i*n+j];
 8007b5c:	ecfe 6a01 	vldmia	lr!, {s13}
 8007b60:	ecbc 7a01 	vldmia	ip!, {s14}
 8007b64:	edd3 7a00 	vldr	s15, [r3]
 8007b68:	eee6 7a87 	vfma.f32	s15, s13, s14
        for(j=0; j<n; ++j)
 8007b6c:	3601      	adds	r6, #1
            y[i] += x[j] * a[i*n+j];
 8007b6e:	edc3 7a00 	vstr	s15, [r3]
 8007b72:	e7ed      	b.n	8007b50 <ekf_step+0x38c>
        c[j] = a[j] + b[j];
 8007b74:	ecf1 7a01 	vldmia	r1!, {s15}
 8007b78:	ecb2 7a01 	vldmia	r2!, {s14}
 8007b7c:	ee77 7a87 	vadd.f32	s15, s15, s14
    for(j=0; j<n; ++j)
 8007b80:	3301      	adds	r3, #1
        c[j] = a[j] + b[j];
 8007b82:	ece5 7a01 	vstmia	r5!, {s15}
 8007b86:	e7bc      	b.n	8007b02 <ekf_step+0x33e>
 8007b88:	18ce      	adds	r6, r1, r3
            a[i*n+j] = -a[i*n+j];
 8007b8a:	edd3 7a00 	vldr	s15, [r3]
 8007b8e:	eef1 7a67 	vneg.f32	s15, s15
 8007b92:	ece3 7a01 	vstmia	r3!, {s15}
        for(j=0; j<n; ++j)
 8007b96:	429e      	cmp	r6, r3
 8007b98:	d1f7      	bne.n	8007b8a <ekf_step+0x3c6>
    for(i=0; i<m; ++i)
 8007b9a:	3501      	adds	r5, #1
 8007b9c:	e7c0      	b.n	8007b20 <ekf_step+0x35c>
        a[i*n+i] += 1;
 8007b9e:	edd2 7a00 	vldr	s15, [r2]
 8007ba2:	ee77 7a87 	vadd.f32	s15, s15, s14
    for (i=0; i<n; ++i)
 8007ba6:	3301      	adds	r3, #1
        a[i*n+i] += 1;
 8007ba8:	edc2 7a00 	vstr	s15, [r2]
 8007bac:	440a      	add	r2, r1
 8007bae:	e7bd      	b.n	8007b2c <ekf_step+0x368>
    if (cholsl(ekf.tmp3, ekf.tmp4, ekf.tmp5, m)) return 1;
 8007bb0:	2001      	movs	r0, #1
 8007bb2:	e7c5      	b.n	8007b40 <ekf_step+0x37c>
    mulmat(ekf.tmp1, ekf.tmp4, ekf.G, n, m, m);
 8007bb4:	4623      	mov	r3, r4
 8007bb6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007bb8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007bba:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007bbc:	f8cd b004 	str.w	fp, [sp, #4]
 8007bc0:	f8cd b000 	str.w	fp, [sp]
 8007bc4:	f7ff fc4e 	bl	8007464 <mulmat>
 8007bc8:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8007bca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bcc:	9817      	ldr	r0, [sp, #92]	; 0x5c
    sub(z, ekf.hx, ekf.tmp5, m);
 8007bce:	4639      	mov	r1, r7
    for(j=0; j<n; ++j)
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	e788      	b.n	8007ae6 <ekf_step+0x322>
 8007bd4:	00000000 	.word	0x00000000

08007bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007bd8:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007bda:	4b0f      	ldr	r3, [pc, #60]	; (8007c18 <HAL_MspInit+0x40>)
 8007bdc:	2200      	movs	r2, #0
 8007bde:	9200      	str	r2, [sp, #0]
 8007be0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007be2:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8007be6:	6459      	str	r1, [r3, #68]	; 0x44
 8007be8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007bea:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8007bee:	9100      	str	r1, [sp, #0]
 8007bf0:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007bf2:	9201      	str	r2, [sp, #4]
 8007bf4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007bf6:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8007bfa:	6419      	str	r1, [r3, #64]	; 0x40
 8007bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c02:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007c04:	210f      	movs	r1, #15
 8007c06:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8007c0a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007c0c:	f7f9 fbee 	bl	80013ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007c10:	b003      	add	sp, #12
 8007c12:	f85d fb04 	ldr.w	pc, [sp], #4
 8007c16:	bf00      	nop
 8007c18:	40023800 	.word	0x40023800

08007c1c <NMI_Handler>:
 8007c1c:	4770      	bx	lr

08007c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007c1e:	e7fe      	b.n	8007c1e <HardFault_Handler>

08007c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007c20:	e7fe      	b.n	8007c20 <MemManage_Handler>

08007c22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007c22:	e7fe      	b.n	8007c22 <BusFault_Handler>

08007c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007c24:	e7fe      	b.n	8007c24 <UsageFault_Handler>

08007c26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007c26:	4770      	bx	lr

08007c28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007c28:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007c2a:	f7f9 f997 	bl	8000f5c <HAL_IncTick>
  osSystickHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007c2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  osSystickHandler();
 8007c32:	f7fc bd45 	b.w	80046c0 <osSystickHandler>
	...

08007c38 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8007c38:	4801      	ldr	r0, [pc, #4]	; (8007c40 <DMA1_Stream1_IRQHandler+0x8>)
 8007c3a:	f7f9 bd11 	b.w	8001660 <HAL_DMA_IRQHandler>
 8007c3e:	bf00      	nop
 8007c40:	200048b0 	.word	0x200048b0

08007c44 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8007c44:	4801      	ldr	r0, [pc, #4]	; (8007c4c <DMA1_Stream2_IRQHandler+0x8>)
 8007c46:	f7f9 bd0b 	b.w	8001660 <HAL_DMA_IRQHandler>
 8007c4a:	bf00      	nop
 8007c4c:	2000453c 	.word	0x2000453c

08007c50 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8007c50:	4801      	ldr	r0, [pc, #4]	; (8007c58 <DMA1_Stream4_IRQHandler+0x8>)
 8007c52:	f7f9 bd05 	b.w	8001660 <HAL_DMA_IRQHandler>
 8007c56:	bf00      	nop
 8007c58:	20004950 	.word	0x20004950

08007c5c <SDIO_IRQHandler>:
void SDIO_IRQHandler(void)
{
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8007c5c:	4801      	ldr	r0, [pc, #4]	; (8007c64 <SDIO_IRQHandler+0x8>)
 8007c5e:	f7fb b8b7 	b.w	8002dd0 <HAL_SD_IRQHandler>
 8007c62:	bf00      	nop
 8007c64:	200046a8 	.word	0x200046a8

08007c68 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8007c68:	4801      	ldr	r0, [pc, #4]	; (8007c70 <DMA2_Stream3_IRQHandler+0x8>)
 8007c6a:	f7f9 bcf9 	b.w	8001660 <HAL_DMA_IRQHandler>
 8007c6e:	bf00      	nop
 8007c70:	20004648 	.word	0x20004648

08007c74 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8007c74:	4801      	ldr	r0, [pc, #4]	; (8007c7c <DMA2_Stream6_IRQHandler+0x8>)
 8007c76:	f7f9 bcf3 	b.w	8001660 <HAL_DMA_IRQHandler>
 8007c7a:	bf00      	nop
 8007c7c:	200045e8 	.word	0x200045e8

08007c80 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007c80:	490f      	ldr	r1, [pc, #60]	; (8007cc0 <SystemInit+0x40>)
 8007c82:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8007c86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007c8e:	4b0d      	ldr	r3, [pc, #52]	; (8007cc4 <SystemInit+0x44>)
 8007c90:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007c92:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8007c94:	f042 0201 	orr.w	r2, r2, #1
 8007c98:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8007c9a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8007ca2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007ca6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007ca8:	4a07      	ldr	r2, [pc, #28]	; (8007cc8 <SystemInit+0x48>)
 8007caa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007cb2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007cb4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007cb6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007cba:	608b      	str	r3, [r1, #8]
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	e000ed00 	.word	0xe000ed00
 8007cc4:	40023800 	.word	0x40023800
 8007cc8:	24003010 	.word	0x24003010

08007ccc <MX_TIM3_Init>:
  HAL_TIM_MspPostInit(&htim2);

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007ccc:	b510      	push	{r4, lr}
 8007cce:	b08c      	sub	sp, #48	; 0x30
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007cd0:	2400      	movs	r4, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8007cd2:	2214      	movs	r2, #20
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	a807      	add	r0, sp, #28
 8007cd8:	f000 fcff 	bl	80086da <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8007cdc:	2210      	movs	r2, #16
 8007cde:	4621      	mov	r1, r4
 8007ce0:	a803      	add	r0, sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007ce2:	9401      	str	r4, [sp, #4]
 8007ce4:	9402      	str	r4, [sp, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8007ce6:	f000 fcf8 	bl	80086da <memset>

  htim3.Instance = TIM3;
 8007cea:	481c      	ldr	r0, [pc, #112]	; (8007d5c <MX_TIM3_Init+0x90>)
 8007cec:	4b1c      	ldr	r3, [pc, #112]	; (8007d60 <MX_TIM3_Init+0x94>)
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007cee:	6084      	str	r4, [r0, #8]
  htim3.Init.Prescaler = 0;
 8007cf0:	e880 0018 	stmia.w	r0, {r3, r4}
  htim3.Init.Period = 0;
 8007cf4:	60c4      	str	r4, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007cf6:	6104      	str	r4, [r0, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007cf8:	f7fb fb94 	bl	8003424 <HAL_TIM_Base_Init>
 8007cfc:	b108      	cbz	r0, 8007d02 <MX_TIM3_Init+0x36>
  {
    Error_Handler();
 8007cfe:	f7ff f926 	bl	8006f4e <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8007d02:	4816      	ldr	r0, [pc, #88]	; (8007d5c <MX_TIM3_Init+0x90>)
 8007d04:	f7fb fbc2 	bl	800348c <HAL_TIM_IC_Init>
 8007d08:	b108      	cbz	r0, 8007d0e <MX_TIM3_Init+0x42>
  {
    Error_Handler();
 8007d0a:	f7ff f920 	bl	8006f4e <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8007d0e:	2307      	movs	r3, #7
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8007d10:	2400      	movs	r4, #0
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8007d12:	9307      	str	r3, [sp, #28]
  sSlaveConfig.TriggerFilter = 0;
  if (HAL_TIM_SlaveConfigSynchronization(&htim3, &sSlaveConfig) != HAL_OK)
 8007d14:	a907      	add	r1, sp, #28
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8007d16:	2350      	movs	r3, #80	; 0x50
  if (HAL_TIM_SlaveConfigSynchronization(&htim3, &sSlaveConfig) != HAL_OK)
 8007d18:	4810      	ldr	r0, [pc, #64]	; (8007d5c <MX_TIM3_Init+0x90>)
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8007d1a:	9308      	str	r3, [sp, #32]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8007d1c:	9409      	str	r4, [sp, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8007d1e:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchronization(&htim3, &sSlaveConfig) != HAL_OK)
 8007d20:	f7fb fafc 	bl	800331c <HAL_TIM_SlaveConfigSynchronization>
 8007d24:	b108      	cbz	r0, 8007d2a <MX_TIM3_Init+0x5e>
  {
    Error_Handler();
 8007d26:	f7ff f912 	bl	8006f4e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007d2a:	a901      	add	r1, sp, #4
 8007d2c:	480b      	ldr	r0, [pc, #44]	; (8007d5c <MX_TIM3_Init+0x90>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007d2e:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007d30:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007d32:	f7fb fce5 	bl	8003700 <HAL_TIMEx_MasterConfigSynchronization>
 8007d36:	b108      	cbz	r0, 8007d3c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8007d38:	f7ff f909 	bl	8006f4e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8007d3c:	2201      	movs	r2, #1
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8007d3e:	2300      	movs	r3, #0
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8007d40:	9204      	str	r2, [sp, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8007d42:	a903      	add	r1, sp, #12
 8007d44:	2204      	movs	r2, #4
 8007d46:	4805      	ldr	r0, [pc, #20]	; (8007d5c <MX_TIM3_Init+0x90>)
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8007d48:	9303      	str	r3, [sp, #12]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8007d4a:	9305      	str	r3, [sp, #20]
  sConfigIC.ICFilter = 0;
 8007d4c:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8007d4e:	f7fb fbf1 	bl	8003534 <HAL_TIM_IC_ConfigChannel>
 8007d52:	b108      	cbz	r0, 8007d58 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8007d54:	f7ff f8fb 	bl	8006f4e <Error_Handler>
  }

}
 8007d58:	b00c      	add	sp, #48	; 0x30
 8007d5a:	bd10      	pop	{r4, pc}
 8007d5c:	200047fc 	.word	0x200047fc
 8007d60:	40000400 	.word	0x40000400

08007d64 <MX_TIM8_Init>:
  HAL_TIM_MspPostInit(&htim5);

}
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8007d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d68:	b09c      	sub	sp, #112	; 0x70
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8007d6a:	2214      	movs	r2, #20
 8007d6c:	2100      	movs	r1, #0
 8007d6e:	a803      	add	r0, sp, #12
 8007d70:	f000 fcb3 	bl	80086da <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8007d74:	2418      	movs	r4, #24
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8007d76:	2220      	movs	r2, #32
 8007d78:	2100      	movs	r1, #0
 8007d7a:	a814      	add	r0, sp, #80	; 0x50
  SET_BIT(RCC->APB2ENR, Periphs);
 8007d7c:	4e50      	ldr	r6, [pc, #320]	; (8007ec0 <MX_TIM8_Init+0x15c>)
  TIM_InitStruct.Prescaler = 1;
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
  TIM_InitStruct.Autoreload = LED_TIM_ARR;
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
  TIM_InitStruct.RepetitionCounter = 0;
  LL_TIM_Init(TIM8, &TIM_InitStruct);
 8007d7e:	4d51      	ldr	r5, [pc, #324]	; (8007ec4 <MX_TIM8_Init+0x160>)
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8007d80:	4f51      	ldr	r7, [pc, #324]	; (8007ec8 <MX_TIM8_Init+0x164>)
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8007d82:	f000 fcaa 	bl	80086da <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8007d86:	4622      	mov	r2, r4
 8007d88:	2100      	movs	r1, #0
 8007d8a:	a808      	add	r0, sp, #32
 8007d8c:	f000 fca5 	bl	80086da <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d90:	4622      	mov	r2, r4
 8007d92:	2100      	movs	r1, #0
 8007d94:	a80e      	add	r0, sp, #56	; 0x38
 8007d96:	f000 fca0 	bl	80086da <memset>
 8007d9a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8007d9c:	f043 0302 	orr.w	r3, r3, #2
 8007da0:	6473      	str	r3, [r6, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8007da2:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8007da4:	f003 0302 	and.w	r3, r3, #2
 8007da8:	9302      	str	r3, [sp, #8]
  TIM_InitStruct.Prescaler = 1;
 8007daa:	f04f 0801 	mov.w	r8, #1
  (void)tmpreg;
 8007dae:	9b02      	ldr	r3, [sp, #8]
 8007db0:	f8ad 800c 	strh.w	r8, [sp, #12]
  TIM_InitStruct.Autoreload = LED_TIM_ARR;
 8007db4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  LL_TIM_Init(TIM8, &TIM_InitStruct);
 8007db8:	a903      	add	r1, sp, #12
 8007dba:	4628      	mov	r0, r5
  TIM_InitStruct.Autoreload = LED_TIM_ARR;
 8007dbc:	9305      	str	r3, [sp, #20]
  LL_TIM_Init(TIM8, &TIM_InitStruct);
 8007dbe:	f7fc fa69 	bl	8004294 <LL_TIM_Init>
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8007dc2:	68ab      	ldr	r3, [r5, #8]
 8007dc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dc8:	f023 0307 	bic.w	r3, r3, #7
 8007dcc:	60ab      	str	r3, [r5, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007dce:	69ab      	ldr	r3, [r5, #24]
 8007dd0:	f043 0308 	orr.w	r3, r3, #8
  LL_TIM_SetClockSource(TIM8, LL_TIM_CLOCKSOURCE_INTERNAL);
  LL_TIM_OC_EnablePreload(TIM8, LL_TIM_CHANNEL_CH1);
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8007dd4:	2400      	movs	r4, #0
 8007dd6:	61ab      	str	r3, [r5, #24]
  TIM_OC_InitStruct.CompareValue = 0;
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
  LL_TIM_OC_Init(TIM8, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8007dd8:	aa14      	add	r2, sp, #80	; 0x50
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
 8007dda:	2370      	movs	r3, #112	; 0x70
  LL_TIM_OC_Init(TIM8, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8007ddc:	4641      	mov	r1, r8
 8007dde:	4628      	mov	r0, r5
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
 8007de0:	9314      	str	r3, [sp, #80]	; 0x50
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8007de2:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8007de4:	9416      	str	r4, [sp, #88]	; 0x58
  TIM_OC_InitStruct.CompareValue = 0;
 8007de6:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8007de8:	9418      	str	r4, [sp, #96]	; 0x60
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8007dea:	9419      	str	r4, [sp, #100]	; 0x64
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8007dec:	941a      	str	r4, [sp, #104]	; 0x68
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8007dee:	941b      	str	r4, [sp, #108]	; 0x6c
  LL_TIM_OC_Init(TIM8, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8007df0:	f7fc fab4 	bl	800435c <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8007df4:	69ab      	ldr	r3, [r5, #24]
 8007df6:	f023 0304 	bic.w	r3, r3, #4
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007dfa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007dfe:	61ab      	str	r3, [r5, #24]
  LL_TIM_OC_DisableFast(TIM8, LL_TIM_CHANNEL_CH1);
  LL_TIM_OC_EnablePreload(TIM8, LL_TIM_CHANNEL_CH2);
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
  LL_TIM_OC_Init(TIM8, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8007e00:	aa14      	add	r2, sp, #80	; 0x50
 8007e02:	2110      	movs	r1, #16
 8007e04:	4628      	mov	r0, r5
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8007e06:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8007e08:	9416      	str	r4, [sp, #88]	; 0x58
  LL_TIM_OC_Init(TIM8, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8007e0a:	f7fc faa7 	bl	800435c <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8007e0e:	69ab      	ldr	r3, [r5, #24]
 8007e10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e14:	61ab      	str	r3, [r5, #24]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007e16:	687b      	ldr	r3, [r7, #4]
  LL_TIM_OC_DisableFast(TIM8, LL_TIM_CHANNEL_CH2);
  LL_TIM_OC_EnablePreload(TIM8, LL_TIM_CHANNEL_CH3);
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8007e18:	9415      	str	r4, [sp, #84]	; 0x54
 8007e1a:	f043 0308 	orr.w	r3, r3, #8
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
  LL_TIM_OC_Init(TIM8, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8007e1e:	aa14      	add	r2, sp, #80	; 0x50
 8007e20:	607b      	str	r3, [r7, #4]
 8007e22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007e26:	4628      	mov	r0, r5
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8007e28:	9416      	str	r4, [sp, #88]	; 0x58
  LL_TIM_OC_Init(TIM8, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8007e2a:	f7fc fa97 	bl	800435c <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f023 0304 	bic.w	r3, r3, #4
 8007e34:	607b      	str	r3, [r7, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007e36:	686b      	ldr	r3, [r5, #4]
 8007e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e3c:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8007e3e:	68ab      	ldr	r3, [r5, #8]
 8007e40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e44:	60ab      	str	r3, [r5, #8]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
  TIM_BDTRInitStruct.DeadTime = 0;
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
  LL_TIM_BDTR_Init(TIM8, &TIM_BDTRInitStruct);
 8007e46:	a908      	add	r1, sp, #32
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8007e48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  LL_TIM_BDTR_Init(TIM8, &TIM_BDTRInitStruct);
 8007e4c:	4628      	mov	r0, r5
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8007e4e:	930c      	str	r3, [sp, #48]	; 0x30
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8007e50:	9408      	str	r4, [sp, #32]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8007e52:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8007e54:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_BDTRInitStruct.DeadTime = 0;
 8007e56:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8007e5a:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8007e5e:	940d      	str	r4, [sp, #52]	; 0x34
  LL_TIM_BDTR_Init(TIM8, &TIM_BDTRInitStruct);
 8007e60:	f7fc fb54 	bl	800450c <LL_TIM_BDTR_Init>
  SET_BIT(RCC->AHB1ENR, Periphs);
 8007e64:	6b33      	ldr	r3, [r6, #48]	; 0x30
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e66:	4819      	ldr	r0, [pc, #100]	; (8007ecc <MX_TIM8_Init+0x168>)
 8007e68:	ea43 0308 	orr.w	r3, r3, r8
 8007e6c:	6333      	str	r3, [r6, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8007e6e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8007e70:	ea03 0308 	and.w	r3, r3, r8
 8007e74:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8007e76:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8007e78:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8007e7a:	f043 0302 	orr.w	r3, r3, #2
 8007e7e:	6333      	str	r3, [r6, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8007e80:	6b33      	ldr	r3, [r6, #48]	; 0x30
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007e82:	9410      	str	r4, [sp, #64]	; 0x40
 8007e84:	f003 0302 	and.w	r3, r3, #2
 8007e88:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8007e8a:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007e8c:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8007e8e:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007e90:	2602      	movs	r6, #2
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 8007e92:	2503      	movs	r5, #3
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e94:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8007e96:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007e98:	960f      	str	r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007e9a:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 8007e9c:	9513      	str	r5, [sp, #76]	; 0x4c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e9e:	f7fb fe1f 	bl	8003ae0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8007ea2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ea6:	a90e      	add	r1, sp, #56	; 0x38
 8007ea8:	4809      	ldr	r0, [pc, #36]	; (8007ed0 <MX_TIM8_Init+0x16c>)
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8007eaa:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007eac:	960f      	str	r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007eae:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007eb0:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007eb2:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 8007eb4:	9513      	str	r5, [sp, #76]	; 0x4c
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007eb6:	f7fb fe13 	bl	8003ae0 <LL_GPIO_Init>

}
 8007eba:	b01c      	add	sp, #112	; 0x70
 8007ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ec0:	40023800 	.word	0x40023800
 8007ec4:	40010400 	.word	0x40010400
 8007ec8:	40010418 	.word	0x40010418
 8007ecc:	40020000 	.word	0x40020000
 8007ed0:	40020400 	.word	0x40020400

08007ed4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007ed4:	b530      	push	{r4, r5, lr}
 8007ed6:	4604      	mov	r4, r0
 8007ed8:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007eda:	2214      	movs	r2, #20
 8007edc:	2100      	movs	r1, #0
 8007ede:	a807      	add	r0, sp, #28
 8007ee0:	f000 fbfb 	bl	80086da <memset>
  if(tim_baseHandle->Instance==TIM1)
 8007ee4:	6823      	ldr	r3, [r4, #0]
 8007ee6:	4a3c      	ldr	r2, [pc, #240]	; (8007fd8 <HAL_TIM_Base_MspInit+0x104>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d10d      	bne.n	8007f08 <HAL_TIM_Base_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007eec:	2300      	movs	r3, #0
 8007eee:	9300      	str	r3, [sp, #0]
 8007ef0:	4b3a      	ldr	r3, [pc, #232]	; (8007fdc <HAL_TIM_Base_MspInit+0x108>)
 8007ef2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ef4:	f042 0201 	orr.w	r2, r2, #1
 8007ef8:	645a      	str	r2, [r3, #68]	; 0x44
 8007efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007efc:	f003 0301 	and.w	r3, r3, #1
 8007f00:	9300      	str	r3, [sp, #0]
 8007f02:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8007f04:	b00d      	add	sp, #52	; 0x34
 8007f06:	bd30      	pop	{r4, r5, pc}
  else if(tim_baseHandle->Instance==TIM2)
 8007f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f0c:	d10c      	bne.n	8007f28 <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007f0e:	2300      	movs	r3, #0
 8007f10:	9301      	str	r3, [sp, #4]
 8007f12:	4b32      	ldr	r3, [pc, #200]	; (8007fdc <HAL_TIM_Base_MspInit+0x108>)
 8007f14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f16:	f042 0201 	orr.w	r2, r2, #1
 8007f1a:	641a      	str	r2, [r3, #64]	; 0x40
 8007f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1e:	f003 0301 	and.w	r3, r3, #1
 8007f22:	9301      	str	r3, [sp, #4]
 8007f24:	9b01      	ldr	r3, [sp, #4]
 8007f26:	e7ed      	b.n	8007f04 <HAL_TIM_Base_MspInit+0x30>
  else if(tim_baseHandle->Instance==TIM3)
 8007f28:	4a2d      	ldr	r2, [pc, #180]	; (8007fe0 <HAL_TIM_Base_MspInit+0x10c>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d133      	bne.n	8007f96 <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007f2e:	4b2b      	ldr	r3, [pc, #172]	; (8007fdc <HAL_TIM_Base_MspInit+0x108>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f30:	482c      	ldr	r0, [pc, #176]	; (8007fe4 <HAL_TIM_Base_MspInit+0x110>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007f32:	2400      	movs	r4, #0
 8007f34:	9402      	str	r4, [sp, #8]
 8007f36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f38:	f042 0202 	orr.w	r2, r2, #2
 8007f3c:	641a      	str	r2, [r3, #64]	; 0x40
 8007f3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f40:	f002 0202 	and.w	r2, r2, #2
 8007f44:	9202      	str	r2, [sp, #8]
 8007f46:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f48:	9403      	str	r4, [sp, #12]
 8007f4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f4c:	f042 0201 	orr.w	r2, r2, #1
 8007f50:	631a      	str	r2, [r3, #48]	; 0x30
 8007f52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f54:	f002 0201 	and.w	r2, r2, #1
 8007f58:	9203      	str	r2, [sp, #12]
 8007f5a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f5c:	9404      	str	r4, [sp, #16]
 8007f5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f60:	f042 0202 	orr.w	r2, r2, #2
 8007f64:	631a      	str	r2, [r3, #48]	; 0x30
 8007f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f68:	f003 0302 	and.w	r3, r3, #2
 8007f6c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f6e:	2502      	movs	r5, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f70:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f72:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007f74:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f76:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007f78:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007f7a:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f7c:	f7f9 fc2a 	bl	80017d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007f80:	2320      	movs	r3, #32
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f82:	a907      	add	r1, sp, #28
 8007f84:	4818      	ldr	r0, [pc, #96]	; (8007fe8 <HAL_TIM_Base_MspInit+0x114>)
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007f86:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f88:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f8a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f8c:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007f8e:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f90:	f7f9 fc20 	bl	80017d4 <HAL_GPIO_Init>
 8007f94:	e7b6      	b.n	8007f04 <HAL_TIM_Base_MspInit+0x30>
  else if(tim_baseHandle->Instance==TIM4)
 8007f96:	4a15      	ldr	r2, [pc, #84]	; (8007fec <HAL_TIM_Base_MspInit+0x118>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d10c      	bne.n	8007fb6 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	9305      	str	r3, [sp, #20]
 8007fa0:	4b0e      	ldr	r3, [pc, #56]	; (8007fdc <HAL_TIM_Base_MspInit+0x108>)
 8007fa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fa4:	f042 0204 	orr.w	r2, r2, #4
 8007fa8:	641a      	str	r2, [r3, #64]	; 0x40
 8007faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fac:	f003 0304 	and.w	r3, r3, #4
 8007fb0:	9305      	str	r3, [sp, #20]
 8007fb2:	9b05      	ldr	r3, [sp, #20]
 8007fb4:	e7a6      	b.n	8007f04 <HAL_TIM_Base_MspInit+0x30>
  else if(tim_baseHandle->Instance==TIM5)
 8007fb6:	4a0e      	ldr	r2, [pc, #56]	; (8007ff0 <HAL_TIM_Base_MspInit+0x11c>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d1a3      	bne.n	8007f04 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	9306      	str	r3, [sp, #24]
 8007fc0:	4b06      	ldr	r3, [pc, #24]	; (8007fdc <HAL_TIM_Base_MspInit+0x108>)
 8007fc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fc4:	f042 0208 	orr.w	r2, r2, #8
 8007fc8:	641a      	str	r2, [r3, #64]	; 0x40
 8007fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fcc:	f003 0308 	and.w	r3, r3, #8
 8007fd0:	9306      	str	r3, [sp, #24]
 8007fd2:	9b06      	ldr	r3, [sp, #24]
}
 8007fd4:	e796      	b.n	8007f04 <HAL_TIM_Base_MspInit+0x30>
 8007fd6:	bf00      	nop
 8007fd8:	40010000 	.word	0x40010000
 8007fdc:	40023800 	.word	0x40023800
 8007fe0:	40000400 	.word	0x40000400
 8007fe4:	40020000 	.word	0x40020000
 8007fe8:	40020400 	.word	0x40020400
 8007fec:	40000800 	.word	0x40000800
 8007ff0:	40000c00 	.word	0x40000c00

08007ff4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007ff4:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ff6:	2214      	movs	r2, #20
{
 8007ff8:	b08a      	sub	sp, #40	; 0x28
 8007ffa:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	eb0d 0002 	add.w	r0, sp, r2
 8008002:	f000 fb6a 	bl	80086da <memset>
  if(timHandle->Instance==TIM1)
 8008006:	6823      	ldr	r3, [r4, #0]
 8008008:	4a39      	ldr	r2, [pc, #228]	; (80080f0 <HAL_TIM_MspPostInit+0xfc>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d115      	bne.n	800803a <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800800e:	2300      	movs	r3, #0
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	4b38      	ldr	r3, [pc, #224]	; (80080f4 <HAL_TIM_MspPostInit+0x100>)
 8008014:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008016:	f042 0201 	orr.w	r2, r2, #1
 800801a:	631a      	str	r2, [r3, #48]	; 0x30
 800801c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800801e:	f003 0301 	and.w	r3, r3, #1
 8008022:	9300      	str	r3, [sp, #0]
 8008024:	9b00      	ldr	r3, [sp, #0]
    /**TIM1 GPIO Configuration    
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008026:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800802a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800802c:	2302      	movs	r3, #2
 800802e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008030:	2301      	movs	r3, #1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8008032:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008034:	a905      	add	r1, sp, #20
 8008036:	4830      	ldr	r0, [pc, #192]	; (80080f8 <HAL_TIM_MspPostInit+0x104>)
 8008038:	e02d      	b.n	8008096 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM2)
 800803a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800803e:	d12e      	bne.n	800809e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008040:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8008044:	2400      	movs	r4, #0
 8008046:	9401      	str	r4, [sp, #4]
 8008048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800804a:	482b      	ldr	r0, [pc, #172]	; (80080f8 <HAL_TIM_MspPostInit+0x104>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800804c:	f042 0201 	orr.w	r2, r2, #1
 8008050:	631a      	str	r2, [r3, #48]	; 0x30
 8008052:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008054:	f002 0201 	and.w	r2, r2, #1
 8008058:	9201      	str	r2, [sp, #4]
 800805a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800805c:	9402      	str	r4, [sp, #8]
 800805e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008060:	f042 0202 	orr.w	r2, r2, #2
 8008064:	631a      	str	r2, [r3, #48]	; 0x30
 8008066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008068:	f003 0302 	and.w	r3, r3, #2
 800806c:	9302      	str	r3, [sp, #8]
 800806e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008070:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8008072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008076:	2501      	movs	r5, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008078:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800807a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800807c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800807e:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008080:	f7f9 fba8 	bl	80017d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008084:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008088:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800808a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800808c:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800808e:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008090:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008092:	481a      	ldr	r0, [pc, #104]	; (80080fc <HAL_TIM_MspPostInit+0x108>)
 8008094:	a905      	add	r1, sp, #20
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008096:	f7f9 fb9d 	bl	80017d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800809a:	b00a      	add	sp, #40	; 0x28
 800809c:	bd70      	pop	{r4, r5, r6, pc}
  else if(timHandle->Instance==TIM4)
 800809e:	4a18      	ldr	r2, [pc, #96]	; (8008100 <HAL_TIM_MspPostInit+0x10c>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d111      	bne.n	80080c8 <HAL_TIM_MspPostInit+0xd4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80080a4:	2300      	movs	r3, #0
 80080a6:	9303      	str	r3, [sp, #12]
 80080a8:	4b12      	ldr	r3, [pc, #72]	; (80080f4 <HAL_TIM_MspPostInit+0x100>)
 80080aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080ac:	f042 0202 	orr.w	r2, r2, #2
 80080b0:	631a      	str	r2, [r3, #48]	; 0x30
 80080b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080b4:	f003 0302 	and.w	r3, r3, #2
 80080b8:	9303      	str	r3, [sp, #12]
 80080ba:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80080bc:	2380      	movs	r3, #128	; 0x80
 80080be:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080c0:	2302      	movs	r3, #2
 80080c2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80080c4:	9309      	str	r3, [sp, #36]	; 0x24
 80080c6:	e7e4      	b.n	8008092 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM5)
 80080c8:	4a0e      	ldr	r2, [pc, #56]	; (8008104 <HAL_TIM_MspPostInit+0x110>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d1e5      	bne.n	800809a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080ce:	2300      	movs	r3, #0
 80080d0:	9304      	str	r3, [sp, #16]
 80080d2:	4b08      	ldr	r3, [pc, #32]	; (80080f4 <HAL_TIM_MspPostInit+0x100>)
 80080d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080d6:	f042 0201 	orr.w	r2, r2, #1
 80080da:	631a      	str	r2, [r3, #48]	; 0x30
 80080dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080de:	f003 0301 	and.w	r3, r3, #1
 80080e2:	9304      	str	r3, [sp, #16]
 80080e4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80080e6:	2303      	movs	r3, #3
 80080e8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080ea:	2302      	movs	r3, #2
 80080ec:	9306      	str	r3, [sp, #24]
 80080ee:	e7a0      	b.n	8008032 <HAL_TIM_MspPostInit+0x3e>
 80080f0:	40010000 	.word	0x40010000
 80080f4:	40023800 	.word	0x40023800
 80080f8:	40020000 	.word	0x40020000
 80080fc:	40020400 	.word	0x40020400
 8008100:	40000800 	.word	0x40000800
 8008104:	40000c00 	.word	0x40000c00

08008108 <MX_TIM1_Init>:
{
 8008108:	b510      	push	{r4, lr}
 800810a:	b094      	sub	sp, #80	; 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800810c:	2400      	movs	r4, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800810e:	2210      	movs	r2, #16
 8008110:	2100      	movs	r1, #0
 8008112:	a802      	add	r0, sp, #8
 8008114:	f000 fae1 	bl	80086da <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008118:	221c      	movs	r2, #28
 800811a:	4621      	mov	r1, r4
 800811c:	a806      	add	r0, sp, #24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800811e:	9400      	str	r4, [sp, #0]
 8008120:	9401      	str	r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008122:	f000 fada 	bl	80086da <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008126:	221c      	movs	r2, #28
 8008128:	4621      	mov	r1, r4
 800812a:	a80d      	add	r0, sp, #52	; 0x34
 800812c:	f000 fad5 	bl	80086da <memset>
  htim1.Instance = TIM1;
 8008130:	4825      	ldr	r0, [pc, #148]	; (80081c8 <MX_TIM1_Init+0xc0>)
 8008132:	4b26      	ldr	r3, [pc, #152]	; (80081cc <MX_TIM1_Init+0xc4>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008134:	6084      	str	r4, [r0, #8]
  htim1.Init.Prescaler = 0;
 8008136:	e880 0018 	stmia.w	r0, {r3, r4}
  htim1.Init.Period = 0;
 800813a:	60c4      	str	r4, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800813c:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800813e:	6144      	str	r4, [r0, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008140:	f7fb f970 	bl	8003424 <HAL_TIM_Base_Init>
 8008144:	b108      	cbz	r0, 800814a <MX_TIM1_Init+0x42>
    Error_Handler();
 8008146:	f7fe ff02 	bl	8006f4e <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800814a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800814e:	a902      	add	r1, sp, #8
 8008150:	481d      	ldr	r0, [pc, #116]	; (80081c8 <MX_TIM1_Init+0xc0>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008152:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008154:	f7fb f829 	bl	80031aa <HAL_TIM_ConfigClockSource>
 8008158:	b108      	cbz	r0, 800815e <MX_TIM1_Init+0x56>
    Error_Handler();
 800815a:	f7fe fef8 	bl	8006f4e <Error_Handler>
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800815e:	481a      	ldr	r0, [pc, #104]	; (80081c8 <MX_TIM1_Init+0xc0>)
 8008160:	f7fb f97a 	bl	8003458 <HAL_TIM_OC_Init>
 8008164:	b108      	cbz	r0, 800816a <MX_TIM1_Init+0x62>
    Error_Handler();
 8008166:	f7fe fef2 	bl	8006f4e <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800816a:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800816c:	4669      	mov	r1, sp
 800816e:	4816      	ldr	r0, [pc, #88]	; (80081c8 <MX_TIM1_Init+0xc0>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008170:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008172:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008174:	f7fb fac4 	bl	8003700 <HAL_TIMEx_MasterConfigSynchronization>
 8008178:	b108      	cbz	r0, 800817e <MX_TIM1_Init+0x76>
    Error_Handler();
 800817a:	f7fe fee8 	bl	8006f4e <Error_Handler>
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800817e:	220c      	movs	r2, #12
 8008180:	a906      	add	r1, sp, #24
 8008182:	4811      	ldr	r0, [pc, #68]	; (80081c8 <MX_TIM1_Init+0xc0>)
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8008184:	9406      	str	r4, [sp, #24]
  sConfigOC.Pulse = 0;
 8008186:	9407      	str	r4, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008188:	9408      	str	r4, [sp, #32]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800818a:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800818c:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800818e:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008190:	f7fb fa88 	bl	80036a4 <HAL_TIM_OC_ConfigChannel>
 8008194:	b108      	cbz	r0, 800819a <MX_TIM1_Init+0x92>
    Error_Handler();
 8008196:	f7fe feda 	bl	8006f4e <Error_Handler>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800819a:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800819c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80081a0:	a90d      	add	r1, sp, #52	; 0x34
 80081a2:	4809      	ldr	r0, [pc, #36]	; (80081c8 <MX_TIM1_Init+0xc0>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80081a4:	930d      	str	r3, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80081a6:	930e      	str	r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80081a8:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 80081aa:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80081ac:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80081ae:	9212      	str	r2, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80081b0:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80081b2:	f7fb fac7 	bl	8003744 <HAL_TIMEx_ConfigBreakDeadTime>
 80081b6:	b108      	cbz	r0, 80081bc <MX_TIM1_Init+0xb4>
    Error_Handler();
 80081b8:	f7fe fec9 	bl	8006f4e <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 80081bc:	4802      	ldr	r0, [pc, #8]	; (80081c8 <MX_TIM1_Init+0xc0>)
 80081be:	f7ff ff19 	bl	8007ff4 <HAL_TIM_MspPostInit>
}
 80081c2:	b014      	add	sp, #80	; 0x50
 80081c4:	bd10      	pop	{r4, pc}
 80081c6:	bf00      	nop
 80081c8:	20004838 	.word	0x20004838
 80081cc:	40010000 	.word	0x40010000

080081d0 <MX_TIM2_Init>:
{
 80081d0:	b510      	push	{r4, lr}
 80081d2:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80081d4:	2210      	movs	r2, #16
 80081d6:	2100      	movs	r1, #0
 80081d8:	a803      	add	r0, sp, #12
 80081da:	f000 fa7e 	bl	80086da <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80081de:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80081e0:	221c      	movs	r2, #28
 80081e2:	4621      	mov	r1, r4
 80081e4:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80081e8:	9401      	str	r4, [sp, #4]
 80081ea:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80081ec:	f000 fa75 	bl	80086da <memset>
  htim2.Instance = TIM2;
 80081f0:	481f      	ldr	r0, [pc, #124]	; (8008270 <MX_TIM2_Init+0xa0>)
 80081f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 0;
 80081f6:	e880 0018 	stmia.w	r0, {r3, r4}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80081fa:	6084      	str	r4, [r0, #8]
  htim2.Init.Period = 0;
 80081fc:	60c4      	str	r4, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80081fe:	6104      	str	r4, [r0, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008200:	f7fb f910 	bl	8003424 <HAL_TIM_Base_Init>
 8008204:	b108      	cbz	r0, 800820a <MX_TIM2_Init+0x3a>
    Error_Handler();
 8008206:	f7fe fea2 	bl	8006f4e <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800820a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800820e:	a903      	add	r1, sp, #12
 8008210:	4817      	ldr	r0, [pc, #92]	; (8008270 <MX_TIM2_Init+0xa0>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008212:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008214:	f7fa ffc9 	bl	80031aa <HAL_TIM_ConfigClockSource>
 8008218:	b108      	cbz	r0, 800821e <MX_TIM2_Init+0x4e>
    Error_Handler();
 800821a:	f7fe fe98 	bl	8006f4e <Error_Handler>
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800821e:	4814      	ldr	r0, [pc, #80]	; (8008270 <MX_TIM2_Init+0xa0>)
 8008220:	f7fb f91a 	bl	8003458 <HAL_TIM_OC_Init>
 8008224:	b108      	cbz	r0, 800822a <MX_TIM2_Init+0x5a>
    Error_Handler();
 8008226:	f7fe fe92 	bl	8006f4e <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800822a:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800822c:	a901      	add	r1, sp, #4
 800822e:	4810      	ldr	r0, [pc, #64]	; (8008270 <MX_TIM2_Init+0xa0>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008230:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008232:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008234:	f7fb fa64 	bl	8003700 <HAL_TIMEx_MasterConfigSynchronization>
 8008238:	b108      	cbz	r0, 800823e <MX_TIM2_Init+0x6e>
    Error_Handler();
 800823a:	f7fe fe88 	bl	8006f4e <Error_Handler>
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800823e:	2200      	movs	r2, #0
 8008240:	a907      	add	r1, sp, #28
 8008242:	480b      	ldr	r0, [pc, #44]	; (8008270 <MX_TIM2_Init+0xa0>)
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8008244:	9407      	str	r4, [sp, #28]
  sConfigOC.Pulse = 0;
 8008246:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008248:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800824a:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800824c:	f7fb fa2a 	bl	80036a4 <HAL_TIM_OC_ConfigChannel>
 8008250:	b108      	cbz	r0, 8008256 <MX_TIM2_Init+0x86>
    Error_Handler();
 8008252:	f7fe fe7c 	bl	8006f4e <Error_Handler>
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008256:	2204      	movs	r2, #4
 8008258:	a907      	add	r1, sp, #28
 800825a:	4805      	ldr	r0, [pc, #20]	; (8008270 <MX_TIM2_Init+0xa0>)
 800825c:	f7fb fa22 	bl	80036a4 <HAL_TIM_OC_ConfigChannel>
 8008260:	b108      	cbz	r0, 8008266 <MX_TIM2_Init+0x96>
    Error_Handler();
 8008262:	f7fe fe74 	bl	8006f4e <Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 8008266:	4802      	ldr	r0, [pc, #8]	; (8008270 <MX_TIM2_Init+0xa0>)
 8008268:	f7ff fec4 	bl	8007ff4 <HAL_TIM_MspPostInit>
}
 800826c:	b00e      	add	sp, #56	; 0x38
 800826e:	bd10      	pop	{r4, pc}
 8008270:	20004874 	.word	0x20004874

08008274 <MX_TIM4_Init>:
{
 8008274:	b510      	push	{r4, lr}
 8008276:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008278:	2210      	movs	r2, #16
 800827a:	2100      	movs	r1, #0
 800827c:	a803      	add	r0, sp, #12
 800827e:	f000 fa2c 	bl	80086da <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008282:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008284:	221c      	movs	r2, #28
 8008286:	4621      	mov	r1, r4
 8008288:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800828c:	9401      	str	r4, [sp, #4]
 800828e:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008290:	f000 fa23 	bl	80086da <memset>
  htim4.Instance = TIM4;
 8008294:	481b      	ldr	r0, [pc, #108]	; (8008304 <MX_TIM4_Init+0x90>)
 8008296:	4b1c      	ldr	r3, [pc, #112]	; (8008308 <MX_TIM4_Init+0x94>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008298:	6084      	str	r4, [r0, #8]
  htim4.Init.Prescaler = 0;
 800829a:	e880 0018 	stmia.w	r0, {r3, r4}
  htim4.Init.Period = 0;
 800829e:	60c4      	str	r4, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80082a0:	6104      	str	r4, [r0, #16]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80082a2:	f7fb f8bf 	bl	8003424 <HAL_TIM_Base_Init>
 80082a6:	b108      	cbz	r0, 80082ac <MX_TIM4_Init+0x38>
    Error_Handler();
 80082a8:	f7fe fe51 	bl	8006f4e <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80082ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80082b0:	a903      	add	r1, sp, #12
 80082b2:	4814      	ldr	r0, [pc, #80]	; (8008304 <MX_TIM4_Init+0x90>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80082b4:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80082b6:	f7fa ff78 	bl	80031aa <HAL_TIM_ConfigClockSource>
 80082ba:	b108      	cbz	r0, 80082c0 <MX_TIM4_Init+0x4c>
    Error_Handler();
 80082bc:	f7fe fe47 	bl	8006f4e <Error_Handler>
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80082c0:	4810      	ldr	r0, [pc, #64]	; (8008304 <MX_TIM4_Init+0x90>)
 80082c2:	f7fb f8c9 	bl	8003458 <HAL_TIM_OC_Init>
 80082c6:	b108      	cbz	r0, 80082cc <MX_TIM4_Init+0x58>
    Error_Handler();
 80082c8:	f7fe fe41 	bl	8006f4e <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80082cc:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80082ce:	a901      	add	r1, sp, #4
 80082d0:	480c      	ldr	r0, [pc, #48]	; (8008304 <MX_TIM4_Init+0x90>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80082d2:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80082d4:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80082d6:	f7fb fa13 	bl	8003700 <HAL_TIMEx_MasterConfigSynchronization>
 80082da:	b108      	cbz	r0, 80082e0 <MX_TIM4_Init+0x6c>
    Error_Handler();
 80082dc:	f7fe fe37 	bl	8006f4e <Error_Handler>
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80082e0:	2204      	movs	r2, #4
 80082e2:	a907      	add	r1, sp, #28
 80082e4:	4807      	ldr	r0, [pc, #28]	; (8008304 <MX_TIM4_Init+0x90>)
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80082e6:	9407      	str	r4, [sp, #28]
  sConfigOC.Pulse = 0;
 80082e8:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80082ea:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80082ec:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80082ee:	f7fb f9d9 	bl	80036a4 <HAL_TIM_OC_ConfigChannel>
 80082f2:	b108      	cbz	r0, 80082f8 <MX_TIM4_Init+0x84>
    Error_Handler();
 80082f4:	f7fe fe2b 	bl	8006f4e <Error_Handler>
  HAL_TIM_MspPostInit(&htim4);
 80082f8:	4802      	ldr	r0, [pc, #8]	; (8008304 <MX_TIM4_Init+0x90>)
 80082fa:	f7ff fe7b 	bl	8007ff4 <HAL_TIM_MspPostInit>
}
 80082fe:	b00e      	add	sp, #56	; 0x38
 8008300:	bd10      	pop	{r4, pc}
 8008302:	bf00      	nop
 8008304:	20004784 	.word	0x20004784
 8008308:	40000800 	.word	0x40000800

0800830c <MX_TIM5_Init>:
{
 800830c:	b510      	push	{r4, lr}
 800830e:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008310:	2210      	movs	r2, #16
 8008312:	2100      	movs	r1, #0
 8008314:	a803      	add	r0, sp, #12
 8008316:	f000 f9e0 	bl	80086da <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800831a:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800831c:	221c      	movs	r2, #28
 800831e:	4621      	mov	r1, r4
 8008320:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008324:	9401      	str	r4, [sp, #4]
 8008326:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008328:	f000 f9d7 	bl	80086da <memset>
  htim5.Instance = TIM5;
 800832c:	481f      	ldr	r0, [pc, #124]	; (80083ac <MX_TIM5_Init+0xa0>)
 800832e:	4b20      	ldr	r3, [pc, #128]	; (80083b0 <MX_TIM5_Init+0xa4>)
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008330:	6084      	str	r4, [r0, #8]
  htim5.Init.Prescaler = 0;
 8008332:	e880 0018 	stmia.w	r0, {r3, r4}
  htim5.Init.Period = 0;
 8008336:	60c4      	str	r4, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008338:	6104      	str	r4, [r0, #16]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800833a:	f7fb f873 	bl	8003424 <HAL_TIM_Base_Init>
 800833e:	b108      	cbz	r0, 8008344 <MX_TIM5_Init+0x38>
    Error_Handler();
 8008340:	f7fe fe05 	bl	8006f4e <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8008348:	a903      	add	r1, sp, #12
 800834a:	4818      	ldr	r0, [pc, #96]	; (80083ac <MX_TIM5_Init+0xa0>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800834c:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800834e:	f7fa ff2c 	bl	80031aa <HAL_TIM_ConfigClockSource>
 8008352:	b108      	cbz	r0, 8008358 <MX_TIM5_Init+0x4c>
    Error_Handler();
 8008354:	f7fe fdfb 	bl	8006f4e <Error_Handler>
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8008358:	4814      	ldr	r0, [pc, #80]	; (80083ac <MX_TIM5_Init+0xa0>)
 800835a:	f7fb f87d 	bl	8003458 <HAL_TIM_OC_Init>
 800835e:	b108      	cbz	r0, 8008364 <MX_TIM5_Init+0x58>
    Error_Handler();
 8008360:	f7fe fdf5 	bl	8006f4e <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008364:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8008366:	a901      	add	r1, sp, #4
 8008368:	4810      	ldr	r0, [pc, #64]	; (80083ac <MX_TIM5_Init+0xa0>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800836a:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800836c:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800836e:	f7fb f9c7 	bl	8003700 <HAL_TIMEx_MasterConfigSynchronization>
 8008372:	b108      	cbz	r0, 8008378 <MX_TIM5_Init+0x6c>
    Error_Handler();
 8008374:	f7fe fdeb 	bl	8006f4e <Error_Handler>
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008378:	2200      	movs	r2, #0
 800837a:	a907      	add	r1, sp, #28
 800837c:	480b      	ldr	r0, [pc, #44]	; (80083ac <MX_TIM5_Init+0xa0>)
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800837e:	9407      	str	r4, [sp, #28]
  sConfigOC.Pulse = 0;
 8008380:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008382:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008384:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008386:	f7fb f98d 	bl	80036a4 <HAL_TIM_OC_ConfigChannel>
 800838a:	b108      	cbz	r0, 8008390 <MX_TIM5_Init+0x84>
    Error_Handler();
 800838c:	f7fe fddf 	bl	8006f4e <Error_Handler>
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008390:	2204      	movs	r2, #4
 8008392:	a907      	add	r1, sp, #28
 8008394:	4805      	ldr	r0, [pc, #20]	; (80083ac <MX_TIM5_Init+0xa0>)
 8008396:	f7fb f985 	bl	80036a4 <HAL_TIM_OC_ConfigChannel>
 800839a:	b108      	cbz	r0, 80083a0 <MX_TIM5_Init+0x94>
    Error_Handler();
 800839c:	f7fe fdd7 	bl	8006f4e <Error_Handler>
  HAL_TIM_MspPostInit(&htim5);
 80083a0:	4802      	ldr	r0, [pc, #8]	; (80083ac <MX_TIM5_Init+0xa0>)
 80083a2:	f7ff fe27 	bl	8007ff4 <HAL_TIM_MspPostInit>
}
 80083a6:	b00e      	add	sp, #56	; 0x38
 80083a8:	bd10      	pop	{r4, pc}
 80083aa:	bf00      	nop
 80083ac:	200047c0 	.word	0x200047c0
 80083b0:	40000c00 	.word	0x40000c00

080083b4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80083b4:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 80083b6:	480b      	ldr	r0, [pc, #44]	; (80083e4 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 9600;
 80083b8:	4b0b      	ldr	r3, [pc, #44]	; (80083e8 <MX_USART1_UART_Init+0x34>)
 80083ba:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
 80083be:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80083c2:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80083c4:	2300      	movs	r3, #0
 80083c6:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80083c8:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80083ca:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80083cc:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80083ce:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80083d0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80083d2:	f7fb faf7 	bl	80039c4 <HAL_UART_Init>
 80083d6:	b118      	cbz	r0, 80083e0 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 80083d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80083dc:	f7fe bdb7 	b.w	8006f4e <Error_Handler>
 80083e0:	bd08      	pop	{r3, pc}
 80083e2:	bf00      	nop
 80083e4:	200049b0 	.word	0x200049b0
 80083e8:	40011000 	.word	0x40011000

080083ec <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80083ec:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 80083ee:	480b      	ldr	r0, [pc, #44]	; (800841c <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 115200;
 80083f0:	4b0b      	ldr	r3, [pc, #44]	; (8008420 <MX_USART3_UART_Init+0x34>)
 80083f2:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80083f6:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 80083fa:	220c      	movs	r2, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80083fc:	2300      	movs	r3, #0
 80083fe:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008400:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8008402:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008404:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008406:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008408:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800840a:	f7fb fadb 	bl	80039c4 <HAL_UART_Init>
 800840e:	b118      	cbz	r0, 8008418 <MX_USART3_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8008410:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8008414:	f7fe bd9b 	b.w	8006f4e <Error_Handler>
 8008418:	bd08      	pop	{r3, pc}
 800841a:	bf00      	nop
 800841c:	20004910 	.word	0x20004910
 8008420:	40004800 	.word	0x40004800

08008424 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8008424:	b508      	push	{r3, lr}

  huart6.Instance = USART6;
 8008426:	480b      	ldr	r0, [pc, #44]	; (8008454 <MX_USART6_UART_Init+0x30>)
  huart6.Init.BaudRate = 9600;
 8008428:	4b0b      	ldr	r3, [pc, #44]	; (8008458 <MX_USART6_UART_Init+0x34>)
 800842a:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
 800842e:	e880 4008 	stmia.w	r0, {r3, lr}
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
 8008432:	220c      	movs	r2, #12
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8008434:	2300      	movs	r3, #0
 8008436:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8008438:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800843a:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800843c:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800843e:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8008440:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8008442:	f7fb fabf 	bl	80039c4 <HAL_UART_Init>
 8008446:	b118      	cbz	r0, 8008450 <MX_USART6_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8008448:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800844c:	f7fe bd7f 	b.w	8006f4e <Error_Handler>
 8008450:	bd08      	pop	{r3, pc}
 8008452:	bf00      	nop
 8008454:	200049f0 	.word	0x200049f0
 8008458:	40011400 	.word	0x40011400

0800845c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800845c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008460:	4606      	mov	r6, r0
 8008462:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008464:	2214      	movs	r2, #20
 8008466:	2100      	movs	r1, #0
 8008468:	a807      	add	r0, sp, #28
 800846a:	f000 f936 	bl	80086da <memset>
  if(uartHandle->Instance==USART1)
 800846e:	6833      	ldr	r3, [r6, #0]
 8008470:	4a62      	ldr	r2, [pc, #392]	; (80085fc <HAL_UART_MspInit+0x1a0>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d125      	bne.n	80084c2 <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008476:	4b62      	ldr	r3, [pc, #392]	; (8008600 <HAL_UART_MspInit+0x1a4>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008478:	4862      	ldr	r0, [pc, #392]	; (8008604 <HAL_UART_MspInit+0x1a8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800847a:	2100      	movs	r1, #0
 800847c:	9100      	str	r1, [sp, #0]
 800847e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008480:	f042 0210 	orr.w	r2, r2, #16
 8008484:	645a      	str	r2, [r3, #68]	; 0x44
 8008486:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008488:	f002 0210 	and.w	r2, r2, #16
 800848c:	9200      	str	r2, [sp, #0]
 800848e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008490:	9101      	str	r1, [sp, #4]
 8008492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008494:	f042 0201 	orr.w	r2, r2, #1
 8008498:	631a      	str	r2, [r3, #48]	; 0x30
 800849a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800849c:	f003 0301 	and.w	r3, r3, #1
 80084a0:	9301      	str	r3, [sp, #4]
 80084a2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80084a4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80084a8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084aa:	2302      	movs	r3, #2
 80084ac:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80084ae:	2301      	movs	r3, #1
 80084b0:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084b2:	2303      	movs	r3, #3
 80084b4:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80084b6:	2307      	movs	r3, #7
 80084b8:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084ba:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80084bc:	f7f9 f98a 	bl	80017d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80084c0:	e073      	b.n	80085aa <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART3)
 80084c2:	4a51      	ldr	r2, [pc, #324]	; (8008608 <HAL_UART_MspInit+0x1ac>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d173      	bne.n	80085b0 <HAL_UART_MspInit+0x154>
    __HAL_RCC_USART3_CLK_ENABLE();
 80084c8:	2500      	movs	r5, #0
 80084ca:	4b4d      	ldr	r3, [pc, #308]	; (8008600 <HAL_UART_MspInit+0x1a4>)
 80084cc:	9502      	str	r5, [sp, #8]
 80084ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80084d0:	484e      	ldr	r0, [pc, #312]	; (800860c <HAL_UART_MspInit+0x1b0>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80084d2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80084d6:	641a      	str	r2, [r3, #64]	; 0x40
 80084d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084da:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80084de:	9202      	str	r2, [sp, #8]
 80084e0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80084e2:	9503      	str	r5, [sp, #12]
 80084e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084e6:	f042 0204 	orr.w	r2, r2, #4
 80084ea:	631a      	str	r2, [r3, #48]	; 0x30
 80084ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084ee:	f002 0204 	and.w	r2, r2, #4
 80084f2:	9203      	str	r2, [sp, #12]
 80084f4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80084f6:	9504      	str	r5, [sp, #16]
 80084f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084fa:	f042 0202 	orr.w	r2, r2, #2
 80084fe:	631a      	str	r2, [r3, #48]	; 0x30
 8008500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008502:	f003 0302 	and.w	r3, r3, #2
 8008506:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008508:	2407      	movs	r4, #7
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800850a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800850c:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800850e:	2320      	movs	r3, #32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008510:	f04f 0a02 	mov.w	sl, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008514:	f04f 0901 	mov.w	r9, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008518:	f04f 0803 	mov.w	r8, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800851c:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800851e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008520:	f44f 6780 	mov.w	r7, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008524:	f8cd a020 	str.w	sl, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008528:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800852c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008530:	f7f9 f950 	bl	80017d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008534:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008536:	4836      	ldr	r0, [pc, #216]	; (8008610 <HAL_UART_MspInit+0x1b4>)
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8008538:	4c36      	ldr	r4, [pc, #216]	; (8008614 <HAL_UART_MspInit+0x1b8>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800853a:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800853c:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800853e:	f8cd a020 	str.w	sl, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008542:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008546:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800854a:	f7f9 f943 	bl	80017d4 <HAL_GPIO_Init>
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800854e:	4b32      	ldr	r3, [pc, #200]	; (8008618 <HAL_UART_MspInit+0x1bc>)
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008550:	60a5      	str	r5, [r4, #8]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8008552:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8008556:	4620      	mov	r0, r4
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8008558:	e884 4008 	stmia.w	r4, {r3, lr}
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800855c:	60e5      	str	r5, [r4, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800855e:	6127      	str	r7, [r4, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008560:	6165      	str	r5, [r4, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008562:	61a5      	str	r5, [r4, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8008564:	61e5      	str	r5, [r4, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008566:	6225      	str	r5, [r4, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008568:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800856a:	f7f8 ffab 	bl	80014c4 <HAL_DMA_Init>
 800856e:	b108      	cbz	r0, 8008574 <HAL_UART_MspInit+0x118>
      Error_Handler();
 8008570:	f7fe fced 	bl	8006f4e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8008574:	6374      	str	r4, [r6, #52]	; 0x34
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008576:	4b29      	ldr	r3, [pc, #164]	; (800861c <HAL_UART_MspInit+0x1c0>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8008578:	63a6      	str	r6, [r4, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream4;
 800857a:	4c29      	ldr	r4, [pc, #164]	; (8008620 <HAL_UART_MspInit+0x1c4>)
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800857c:	f04f 6560 	mov.w	r5, #234881024	; 0xe000000
 8008580:	2740      	movs	r7, #64	; 0x40
 8008582:	e884 00a8 	stmia.w	r4, {r3, r5, r7}
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008586:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800858a:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800858c:	4620      	mov	r0, r4
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800858e:	60e3      	str	r3, [r4, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008590:	6122      	str	r2, [r4, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008592:	6163      	str	r3, [r4, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008594:	61a3      	str	r3, [r4, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8008596:	61e3      	str	r3, [r4, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008598:	6223      	str	r3, [r4, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800859a:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800859c:	f7f8 ff92 	bl	80014c4 <HAL_DMA_Init>
 80085a0:	b108      	cbz	r0, 80085a6 <HAL_UART_MspInit+0x14a>
      Error_Handler();
 80085a2:	f7fe fcd4 	bl	8006f4e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80085a6:	6334      	str	r4, [r6, #48]	; 0x30
 80085a8:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80085aa:	b00c      	add	sp, #48	; 0x30
 80085ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if(uartHandle->Instance==USART6)
 80085b0:	4a1c      	ldr	r2, [pc, #112]	; (8008624 <HAL_UART_MspInit+0x1c8>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d1f9      	bne.n	80085aa <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART6_CLK_ENABLE();
 80085b6:	4b12      	ldr	r3, [pc, #72]	; (8008600 <HAL_UART_MspInit+0x1a4>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80085b8:	4814      	ldr	r0, [pc, #80]	; (800860c <HAL_UART_MspInit+0x1b0>)
    __HAL_RCC_USART6_CLK_ENABLE();
 80085ba:	2100      	movs	r1, #0
 80085bc:	9105      	str	r1, [sp, #20]
 80085be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085c0:	f042 0220 	orr.w	r2, r2, #32
 80085c4:	645a      	str	r2, [r3, #68]	; 0x44
 80085c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085c8:	f002 0220 	and.w	r2, r2, #32
 80085cc:	9205      	str	r2, [sp, #20]
 80085ce:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80085d0:	9106      	str	r1, [sp, #24]
 80085d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085d4:	f042 0204 	orr.w	r2, r2, #4
 80085d8:	631a      	str	r2, [r3, #48]	; 0x30
 80085da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085dc:	f003 0304 	and.w	r3, r3, #4
 80085e0:	9306      	str	r3, [sp, #24]
 80085e2:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80085e4:	23c0      	movs	r3, #192	; 0xc0
 80085e6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085e8:	2302      	movs	r3, #2
 80085ea:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80085ec:	2301      	movs	r3, #1
 80085ee:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085f0:	2303      	movs	r3, #3
 80085f2:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80085f4:	2308      	movs	r3, #8
 80085f6:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80085f8:	a907      	add	r1, sp, #28
 80085fa:	e75f      	b.n	80084bc <HAL_UART_MspInit+0x60>
 80085fc:	40011000 	.word	0x40011000
 8008600:	40023800 	.word	0x40023800
 8008604:	40020000 	.word	0x40020000
 8008608:	40004800 	.word	0x40004800
 800860c:	40020800 	.word	0x40020800
 8008610:	40020400 	.word	0x40020400
 8008614:	200048b0 	.word	0x200048b0
 8008618:	40026028 	.word	0x40026028
 800861c:	40026070 	.word	0x40026070
 8008620:	20004950 	.word	0x20004950
 8008624:	40011400 	.word	0x40011400

08008628 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008628:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008660 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800862c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800862e:	e003      	b.n	8008638 <LoopCopyDataInit>

08008630 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008630:	4b0c      	ldr	r3, [pc, #48]	; (8008664 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008632:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008634:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008636:	3104      	adds	r1, #4

08008638 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008638:	480b      	ldr	r0, [pc, #44]	; (8008668 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800863a:	4b0c      	ldr	r3, [pc, #48]	; (800866c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800863c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800863e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008640:	d3f6      	bcc.n	8008630 <CopyDataInit>
  ldr  r2, =_sbss
 8008642:	4a0b      	ldr	r2, [pc, #44]	; (8008670 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008644:	e002      	b.n	800864c <LoopFillZerobss>

08008646 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008646:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008648:	f842 3b04 	str.w	r3, [r2], #4

0800864c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800864c:	4b09      	ldr	r3, [pc, #36]	; (8008674 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800864e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008650:	d3f9      	bcc.n	8008646 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008652:	f7ff fb15 	bl	8007c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008656:	f000 f811 	bl	800867c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800865a:	f7fe fc47 	bl	8006eec <main>
  bx  lr    
 800865e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008660:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008664:	08009e70 	.word	0x08009e70
  ldr  r0, =_sdata
 8008668:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800866c:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8008670:	2000021c 	.word	0x2000021c
  ldr  r3, = _ebss
 8008674:	20004a30 	.word	0x20004a30

08008678 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008678:	e7fe      	b.n	8008678 <ADC_IRQHandler>
	...

0800867c <__libc_init_array>:
 800867c:	b570      	push	{r4, r5, r6, lr}
 800867e:	4e0d      	ldr	r6, [pc, #52]	; (80086b4 <__libc_init_array+0x38>)
 8008680:	4c0d      	ldr	r4, [pc, #52]	; (80086b8 <__libc_init_array+0x3c>)
 8008682:	1ba4      	subs	r4, r4, r6
 8008684:	10a4      	asrs	r4, r4, #2
 8008686:	2500      	movs	r5, #0
 8008688:	42a5      	cmp	r5, r4
 800868a:	d109      	bne.n	80086a0 <__libc_init_array+0x24>
 800868c:	4e0b      	ldr	r6, [pc, #44]	; (80086bc <__libc_init_array+0x40>)
 800868e:	4c0c      	ldr	r4, [pc, #48]	; (80086c0 <__libc_init_array+0x44>)
 8008690:	f001 f9cc 	bl	8009a2c <_init>
 8008694:	1ba4      	subs	r4, r4, r6
 8008696:	10a4      	asrs	r4, r4, #2
 8008698:	2500      	movs	r5, #0
 800869a:	42a5      	cmp	r5, r4
 800869c:	d105      	bne.n	80086aa <__libc_init_array+0x2e>
 800869e:	bd70      	pop	{r4, r5, r6, pc}
 80086a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086a4:	4798      	blx	r3
 80086a6:	3501      	adds	r5, #1
 80086a8:	e7ee      	b.n	8008688 <__libc_init_array+0xc>
 80086aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086ae:	4798      	blx	r3
 80086b0:	3501      	adds	r5, #1
 80086b2:	e7f2      	b.n	800869a <__libc_init_array+0x1e>
 80086b4:	08009e68 	.word	0x08009e68
 80086b8:	08009e68 	.word	0x08009e68
 80086bc:	08009e68 	.word	0x08009e68
 80086c0:	08009e6c 	.word	0x08009e6c

080086c4 <memcpy>:
 80086c4:	b510      	push	{r4, lr}
 80086c6:	1e43      	subs	r3, r0, #1
 80086c8:	440a      	add	r2, r1
 80086ca:	4291      	cmp	r1, r2
 80086cc:	d100      	bne.n	80086d0 <memcpy+0xc>
 80086ce:	bd10      	pop	{r4, pc}
 80086d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086d8:	e7f7      	b.n	80086ca <memcpy+0x6>

080086da <memset>:
 80086da:	4402      	add	r2, r0
 80086dc:	4603      	mov	r3, r0
 80086de:	4293      	cmp	r3, r2
 80086e0:	d100      	bne.n	80086e4 <memset+0xa>
 80086e2:	4770      	bx	lr
 80086e4:	f803 1b01 	strb.w	r1, [r3], #1
 80086e8:	e7f9      	b.n	80086de <memset+0x4>
 80086ea:	0000      	movs	r0, r0
 80086ec:	0000      	movs	r0, r0
	...

080086f0 <cos>:
 80086f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086f2:	ec51 0b10 	vmov	r0, r1, d0
 80086f6:	4a1e      	ldr	r2, [pc, #120]	; (8008770 <cos+0x80>)
 80086f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80086fc:	4293      	cmp	r3, r2
 80086fe:	dc06      	bgt.n	800870e <cos+0x1e>
 8008700:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8008768 <cos+0x78>
 8008704:	f000 fb80 	bl	8008e08 <__kernel_cos>
 8008708:	ec51 0b10 	vmov	r0, r1, d0
 800870c:	e007      	b.n	800871e <cos+0x2e>
 800870e:	4a19      	ldr	r2, [pc, #100]	; (8008774 <cos+0x84>)
 8008710:	4293      	cmp	r3, r2
 8008712:	dd09      	ble.n	8008728 <cos+0x38>
 8008714:	ee10 2a10 	vmov	r2, s0
 8008718:	460b      	mov	r3, r1
 800871a:	f7f7 fd7d 	bl	8000218 <__aeabi_dsub>
 800871e:	ec41 0b10 	vmov	d0, r0, r1
 8008722:	b005      	add	sp, #20
 8008724:	f85d fb04 	ldr.w	pc, [sp], #4
 8008728:	4668      	mov	r0, sp
 800872a:	f000 f8c9 	bl	80088c0 <__ieee754_rem_pio2>
 800872e:	f000 0003 	and.w	r0, r0, #3
 8008732:	2801      	cmp	r0, #1
 8008734:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008738:	ed9d 0b00 	vldr	d0, [sp]
 800873c:	d007      	beq.n	800874e <cos+0x5e>
 800873e:	2802      	cmp	r0, #2
 8008740:	d00e      	beq.n	8008760 <cos+0x70>
 8008742:	2800      	cmp	r0, #0
 8008744:	d0de      	beq.n	8008704 <cos+0x14>
 8008746:	2001      	movs	r0, #1
 8008748:	f000 ff96 	bl	8009678 <__kernel_sin>
 800874c:	e7dc      	b.n	8008708 <cos+0x18>
 800874e:	f000 ff93 	bl	8009678 <__kernel_sin>
 8008752:	ec53 2b10 	vmov	r2, r3, d0
 8008756:	ee10 0a10 	vmov	r0, s0
 800875a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800875e:	e7de      	b.n	800871e <cos+0x2e>
 8008760:	f000 fb52 	bl	8008e08 <__kernel_cos>
 8008764:	e7f5      	b.n	8008752 <cos+0x62>
 8008766:	bf00      	nop
	...
 8008770:	3fe921fb 	.word	0x3fe921fb
 8008774:	7fefffff 	.word	0x7fefffff

08008778 <sin>:
 8008778:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800877a:	ec51 0b10 	vmov	r0, r1, d0
 800877e:	4a20      	ldr	r2, [pc, #128]	; (8008800 <sin+0x88>)
 8008780:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008784:	4293      	cmp	r3, r2
 8008786:	dc07      	bgt.n	8008798 <sin+0x20>
 8008788:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80087f8 <sin+0x80>
 800878c:	2000      	movs	r0, #0
 800878e:	f000 ff73 	bl	8009678 <__kernel_sin>
 8008792:	ec51 0b10 	vmov	r0, r1, d0
 8008796:	e007      	b.n	80087a8 <sin+0x30>
 8008798:	4a1a      	ldr	r2, [pc, #104]	; (8008804 <sin+0x8c>)
 800879a:	4293      	cmp	r3, r2
 800879c:	dd09      	ble.n	80087b2 <sin+0x3a>
 800879e:	ee10 2a10 	vmov	r2, s0
 80087a2:	460b      	mov	r3, r1
 80087a4:	f7f7 fd38 	bl	8000218 <__aeabi_dsub>
 80087a8:	ec41 0b10 	vmov	d0, r0, r1
 80087ac:	b005      	add	sp, #20
 80087ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80087b2:	4668      	mov	r0, sp
 80087b4:	f000 f884 	bl	80088c0 <__ieee754_rem_pio2>
 80087b8:	f000 0003 	and.w	r0, r0, #3
 80087bc:	2801      	cmp	r0, #1
 80087be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80087c2:	ed9d 0b00 	vldr	d0, [sp]
 80087c6:	d004      	beq.n	80087d2 <sin+0x5a>
 80087c8:	2802      	cmp	r0, #2
 80087ca:	d005      	beq.n	80087d8 <sin+0x60>
 80087cc:	b970      	cbnz	r0, 80087ec <sin+0x74>
 80087ce:	2001      	movs	r0, #1
 80087d0:	e7dd      	b.n	800878e <sin+0x16>
 80087d2:	f000 fb19 	bl	8008e08 <__kernel_cos>
 80087d6:	e7dc      	b.n	8008792 <sin+0x1a>
 80087d8:	2001      	movs	r0, #1
 80087da:	f000 ff4d 	bl	8009678 <__kernel_sin>
 80087de:	ec53 2b10 	vmov	r2, r3, d0
 80087e2:	ee10 0a10 	vmov	r0, s0
 80087e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80087ea:	e7dd      	b.n	80087a8 <sin+0x30>
 80087ec:	f000 fb0c 	bl	8008e08 <__kernel_cos>
 80087f0:	e7f5      	b.n	80087de <sin+0x66>
 80087f2:	bf00      	nop
 80087f4:	f3af 8000 	nop.w
	...
 8008800:	3fe921fb 	.word	0x3fe921fb
 8008804:	7fefffff 	.word	0x7fefffff

08008808 <sqrt>:
 8008808:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800880c:	ed2d 8b02 	vpush	{d8}
 8008810:	b08b      	sub	sp, #44	; 0x2c
 8008812:	ec55 4b10 	vmov	r4, r5, d0
 8008816:	f000 fa45 	bl	8008ca4 <__ieee754_sqrt>
 800881a:	4b26      	ldr	r3, [pc, #152]	; (80088b4 <sqrt+0xac>)
 800881c:	eeb0 8a40 	vmov.f32	s16, s0
 8008820:	eef0 8a60 	vmov.f32	s17, s1
 8008824:	f993 6000 	ldrsb.w	r6, [r3]
 8008828:	1c73      	adds	r3, r6, #1
 800882a:	d02a      	beq.n	8008882 <sqrt+0x7a>
 800882c:	4622      	mov	r2, r4
 800882e:	462b      	mov	r3, r5
 8008830:	4620      	mov	r0, r4
 8008832:	4629      	mov	r1, r5
 8008834:	f7f8 f93e 	bl	8000ab4 <__aeabi_dcmpun>
 8008838:	4607      	mov	r7, r0
 800883a:	bb10      	cbnz	r0, 8008882 <sqrt+0x7a>
 800883c:	f04f 0800 	mov.w	r8, #0
 8008840:	f04f 0900 	mov.w	r9, #0
 8008844:	4642      	mov	r2, r8
 8008846:	464b      	mov	r3, r9
 8008848:	4620      	mov	r0, r4
 800884a:	4629      	mov	r1, r5
 800884c:	f7f8 f90a 	bl	8000a64 <__aeabi_dcmplt>
 8008850:	b1b8      	cbz	r0, 8008882 <sqrt+0x7a>
 8008852:	2301      	movs	r3, #1
 8008854:	9300      	str	r3, [sp, #0]
 8008856:	4b18      	ldr	r3, [pc, #96]	; (80088b8 <sqrt+0xb0>)
 8008858:	9301      	str	r3, [sp, #4]
 800885a:	9708      	str	r7, [sp, #32]
 800885c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008860:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008864:	b9b6      	cbnz	r6, 8008894 <sqrt+0x8c>
 8008866:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800886a:	4668      	mov	r0, sp
 800886c:	f001 f84c 	bl	8009908 <matherr>
 8008870:	b1d0      	cbz	r0, 80088a8 <sqrt+0xa0>
 8008872:	9b08      	ldr	r3, [sp, #32]
 8008874:	b11b      	cbz	r3, 800887e <sqrt+0x76>
 8008876:	f001 f8d3 	bl	8009a20 <__errno>
 800887a:	9b08      	ldr	r3, [sp, #32]
 800887c:	6003      	str	r3, [r0, #0]
 800887e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8008882:	eeb0 0a48 	vmov.f32	s0, s16
 8008886:	eef0 0a68 	vmov.f32	s1, s17
 800888a:	b00b      	add	sp, #44	; 0x2c
 800888c:	ecbd 8b02 	vpop	{d8}
 8008890:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008894:	4642      	mov	r2, r8
 8008896:	464b      	mov	r3, r9
 8008898:	4640      	mov	r0, r8
 800889a:	4649      	mov	r1, r9
 800889c:	f7f7 ff9a 	bl	80007d4 <__aeabi_ddiv>
 80088a0:	2e02      	cmp	r6, #2
 80088a2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80088a6:	d1e0      	bne.n	800886a <sqrt+0x62>
 80088a8:	f001 f8ba 	bl	8009a20 <__errno>
 80088ac:	2321      	movs	r3, #33	; 0x21
 80088ae:	6003      	str	r3, [r0, #0]
 80088b0:	e7df      	b.n	8008872 <sqrt+0x6a>
 80088b2:	bf00      	nop
 80088b4:	20000014 	.word	0x20000014
 80088b8:	08009c7c 	.word	0x08009c7c
 80088bc:	00000000 	.word	0x00000000

080088c0 <__ieee754_rem_pio2>:
 80088c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c4:	ec57 6b10 	vmov	r6, r7, d0
 80088c8:	4bc3      	ldr	r3, [pc, #780]	; (8008bd8 <__ieee754_rem_pio2+0x318>)
 80088ca:	b08d      	sub	sp, #52	; 0x34
 80088cc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80088d0:	4598      	cmp	r8, r3
 80088d2:	4604      	mov	r4, r0
 80088d4:	9704      	str	r7, [sp, #16]
 80088d6:	dc07      	bgt.n	80088e8 <__ieee754_rem_pio2+0x28>
 80088d8:	2200      	movs	r2, #0
 80088da:	2300      	movs	r3, #0
 80088dc:	ed84 0b00 	vstr	d0, [r4]
 80088e0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80088e4:	2500      	movs	r5, #0
 80088e6:	e027      	b.n	8008938 <__ieee754_rem_pio2+0x78>
 80088e8:	4bbc      	ldr	r3, [pc, #752]	; (8008bdc <__ieee754_rem_pio2+0x31c>)
 80088ea:	4598      	cmp	r8, r3
 80088ec:	dc75      	bgt.n	80089da <__ieee754_rem_pio2+0x11a>
 80088ee:	9b04      	ldr	r3, [sp, #16]
 80088f0:	4dbb      	ldr	r5, [pc, #748]	; (8008be0 <__ieee754_rem_pio2+0x320>)
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	ee10 0a10 	vmov	r0, s0
 80088f8:	a3a9      	add	r3, pc, #676	; (adr r3, 8008ba0 <__ieee754_rem_pio2+0x2e0>)
 80088fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fe:	4639      	mov	r1, r7
 8008900:	dd36      	ble.n	8008970 <__ieee754_rem_pio2+0xb0>
 8008902:	f7f7 fc89 	bl	8000218 <__aeabi_dsub>
 8008906:	45a8      	cmp	r8, r5
 8008908:	4606      	mov	r6, r0
 800890a:	460f      	mov	r7, r1
 800890c:	d018      	beq.n	8008940 <__ieee754_rem_pio2+0x80>
 800890e:	a3a6      	add	r3, pc, #664	; (adr r3, 8008ba8 <__ieee754_rem_pio2+0x2e8>)
 8008910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008914:	f7f7 fc80 	bl	8000218 <__aeabi_dsub>
 8008918:	4602      	mov	r2, r0
 800891a:	460b      	mov	r3, r1
 800891c:	e9c4 2300 	strd	r2, r3, [r4]
 8008920:	4630      	mov	r0, r6
 8008922:	4639      	mov	r1, r7
 8008924:	f7f7 fc78 	bl	8000218 <__aeabi_dsub>
 8008928:	a39f      	add	r3, pc, #636	; (adr r3, 8008ba8 <__ieee754_rem_pio2+0x2e8>)
 800892a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892e:	f7f7 fc73 	bl	8000218 <__aeabi_dsub>
 8008932:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008936:	2501      	movs	r5, #1
 8008938:	4628      	mov	r0, r5
 800893a:	b00d      	add	sp, #52	; 0x34
 800893c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008940:	a39b      	add	r3, pc, #620	; (adr r3, 8008bb0 <__ieee754_rem_pio2+0x2f0>)
 8008942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008946:	f7f7 fc67 	bl	8000218 <__aeabi_dsub>
 800894a:	a39b      	add	r3, pc, #620	; (adr r3, 8008bb8 <__ieee754_rem_pio2+0x2f8>)
 800894c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008950:	4606      	mov	r6, r0
 8008952:	460f      	mov	r7, r1
 8008954:	f7f7 fc60 	bl	8000218 <__aeabi_dsub>
 8008958:	4602      	mov	r2, r0
 800895a:	460b      	mov	r3, r1
 800895c:	e9c4 2300 	strd	r2, r3, [r4]
 8008960:	4630      	mov	r0, r6
 8008962:	4639      	mov	r1, r7
 8008964:	f7f7 fc58 	bl	8000218 <__aeabi_dsub>
 8008968:	a393      	add	r3, pc, #588	; (adr r3, 8008bb8 <__ieee754_rem_pio2+0x2f8>)
 800896a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896e:	e7de      	b.n	800892e <__ieee754_rem_pio2+0x6e>
 8008970:	f7f7 fc54 	bl	800021c <__adddf3>
 8008974:	45a8      	cmp	r8, r5
 8008976:	4606      	mov	r6, r0
 8008978:	460f      	mov	r7, r1
 800897a:	d016      	beq.n	80089aa <__ieee754_rem_pio2+0xea>
 800897c:	a38a      	add	r3, pc, #552	; (adr r3, 8008ba8 <__ieee754_rem_pio2+0x2e8>)
 800897e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008982:	f7f7 fc4b 	bl	800021c <__adddf3>
 8008986:	4602      	mov	r2, r0
 8008988:	460b      	mov	r3, r1
 800898a:	e9c4 2300 	strd	r2, r3, [r4]
 800898e:	4630      	mov	r0, r6
 8008990:	4639      	mov	r1, r7
 8008992:	f7f7 fc41 	bl	8000218 <__aeabi_dsub>
 8008996:	a384      	add	r3, pc, #528	; (adr r3, 8008ba8 <__ieee754_rem_pio2+0x2e8>)
 8008998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899c:	f7f7 fc3e 	bl	800021c <__adddf3>
 80089a0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80089a4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80089a8:	e7c6      	b.n	8008938 <__ieee754_rem_pio2+0x78>
 80089aa:	a381      	add	r3, pc, #516	; (adr r3, 8008bb0 <__ieee754_rem_pio2+0x2f0>)
 80089ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b0:	f7f7 fc34 	bl	800021c <__adddf3>
 80089b4:	a380      	add	r3, pc, #512	; (adr r3, 8008bb8 <__ieee754_rem_pio2+0x2f8>)
 80089b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ba:	4606      	mov	r6, r0
 80089bc:	460f      	mov	r7, r1
 80089be:	f7f7 fc2d 	bl	800021c <__adddf3>
 80089c2:	4602      	mov	r2, r0
 80089c4:	460b      	mov	r3, r1
 80089c6:	e9c4 2300 	strd	r2, r3, [r4]
 80089ca:	4630      	mov	r0, r6
 80089cc:	4639      	mov	r1, r7
 80089ce:	f7f7 fc23 	bl	8000218 <__aeabi_dsub>
 80089d2:	a379      	add	r3, pc, #484	; (adr r3, 8008bb8 <__ieee754_rem_pio2+0x2f8>)
 80089d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d8:	e7e0      	b.n	800899c <__ieee754_rem_pio2+0xdc>
 80089da:	4b82      	ldr	r3, [pc, #520]	; (8008be4 <__ieee754_rem_pio2+0x324>)
 80089dc:	4598      	cmp	r8, r3
 80089de:	f300 80d0 	bgt.w	8008b82 <__ieee754_rem_pio2+0x2c2>
 80089e2:	f000 ff03 	bl	80097ec <fabs>
 80089e6:	ec57 6b10 	vmov	r6, r7, d0
 80089ea:	ee10 0a10 	vmov	r0, s0
 80089ee:	a374      	add	r3, pc, #464	; (adr r3, 8008bc0 <__ieee754_rem_pio2+0x300>)
 80089f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f4:	4639      	mov	r1, r7
 80089f6:	f7f7 fdc3 	bl	8000580 <__aeabi_dmul>
 80089fa:	2200      	movs	r2, #0
 80089fc:	4b7a      	ldr	r3, [pc, #488]	; (8008be8 <__ieee754_rem_pio2+0x328>)
 80089fe:	f7f7 fc0d 	bl	800021c <__adddf3>
 8008a02:	f7f8 f86d 	bl	8000ae0 <__aeabi_d2iz>
 8008a06:	4605      	mov	r5, r0
 8008a08:	f7f7 fd54 	bl	80004b4 <__aeabi_i2d>
 8008a0c:	a364      	add	r3, pc, #400	; (adr r3, 8008ba0 <__ieee754_rem_pio2+0x2e0>)
 8008a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a16:	f7f7 fdb3 	bl	8000580 <__aeabi_dmul>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	4630      	mov	r0, r6
 8008a20:	4639      	mov	r1, r7
 8008a22:	f7f7 fbf9 	bl	8000218 <__aeabi_dsub>
 8008a26:	a360      	add	r3, pc, #384	; (adr r3, 8008ba8 <__ieee754_rem_pio2+0x2e8>)
 8008a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2c:	4682      	mov	sl, r0
 8008a2e:	468b      	mov	fp, r1
 8008a30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a34:	f7f7 fda4 	bl	8000580 <__aeabi_dmul>
 8008a38:	2d1f      	cmp	r5, #31
 8008a3a:	4606      	mov	r6, r0
 8008a3c:	460f      	mov	r7, r1
 8008a3e:	dc2a      	bgt.n	8008a96 <__ieee754_rem_pio2+0x1d6>
 8008a40:	1e6a      	subs	r2, r5, #1
 8008a42:	4b6a      	ldr	r3, [pc, #424]	; (8008bec <__ieee754_rem_pio2+0x32c>)
 8008a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a48:	4598      	cmp	r8, r3
 8008a4a:	d024      	beq.n	8008a96 <__ieee754_rem_pio2+0x1d6>
 8008a4c:	4632      	mov	r2, r6
 8008a4e:	463b      	mov	r3, r7
 8008a50:	4650      	mov	r0, sl
 8008a52:	4659      	mov	r1, fp
 8008a54:	f7f7 fbe0 	bl	8000218 <__aeabi_dsub>
 8008a58:	e9c4 0100 	strd	r0, r1, [r4]
 8008a5c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008a60:	4650      	mov	r0, sl
 8008a62:	4642      	mov	r2, r8
 8008a64:	464b      	mov	r3, r9
 8008a66:	4659      	mov	r1, fp
 8008a68:	f7f7 fbd6 	bl	8000218 <__aeabi_dsub>
 8008a6c:	463b      	mov	r3, r7
 8008a6e:	4632      	mov	r2, r6
 8008a70:	f7f7 fbd2 	bl	8000218 <__aeabi_dsub>
 8008a74:	9b04      	ldr	r3, [sp, #16]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008a7c:	f6bf af5c 	bge.w	8008938 <__ieee754_rem_pio2+0x78>
 8008a80:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008a84:	6063      	str	r3, [r4, #4]
 8008a86:	f8c4 8000 	str.w	r8, [r4]
 8008a8a:	60a0      	str	r0, [r4, #8]
 8008a8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a90:	60e3      	str	r3, [r4, #12]
 8008a92:	426d      	negs	r5, r5
 8008a94:	e750      	b.n	8008938 <__ieee754_rem_pio2+0x78>
 8008a96:	4632      	mov	r2, r6
 8008a98:	463b      	mov	r3, r7
 8008a9a:	4650      	mov	r0, sl
 8008a9c:	4659      	mov	r1, fp
 8008a9e:	f7f7 fbbb 	bl	8000218 <__aeabi_dsub>
 8008aa2:	ea4f 5228 	mov.w	r2, r8, asr #20
 8008aa6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008aaa:	1ad3      	subs	r3, r2, r3
 8008aac:	2b10      	cmp	r3, #16
 8008aae:	e9c4 0100 	strd	r0, r1, [r4]
 8008ab2:	9205      	str	r2, [sp, #20]
 8008ab4:	ddd2      	ble.n	8008a5c <__ieee754_rem_pio2+0x19c>
 8008ab6:	a33e      	add	r3, pc, #248	; (adr r3, 8008bb0 <__ieee754_rem_pio2+0x2f0>)
 8008ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008abc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ac0:	f7f7 fd5e 	bl	8000580 <__aeabi_dmul>
 8008ac4:	4606      	mov	r6, r0
 8008ac6:	460f      	mov	r7, r1
 8008ac8:	4602      	mov	r2, r0
 8008aca:	460b      	mov	r3, r1
 8008acc:	4650      	mov	r0, sl
 8008ace:	4659      	mov	r1, fp
 8008ad0:	f7f7 fba2 	bl	8000218 <__aeabi_dsub>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	4680      	mov	r8, r0
 8008ada:	4689      	mov	r9, r1
 8008adc:	4650      	mov	r0, sl
 8008ade:	4659      	mov	r1, fp
 8008ae0:	f7f7 fb9a 	bl	8000218 <__aeabi_dsub>
 8008ae4:	4632      	mov	r2, r6
 8008ae6:	463b      	mov	r3, r7
 8008ae8:	f7f7 fb96 	bl	8000218 <__aeabi_dsub>
 8008aec:	a332      	add	r3, pc, #200	; (adr r3, 8008bb8 <__ieee754_rem_pio2+0x2f8>)
 8008aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af2:	4606      	mov	r6, r0
 8008af4:	460f      	mov	r7, r1
 8008af6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008afa:	f7f7 fd41 	bl	8000580 <__aeabi_dmul>
 8008afe:	4632      	mov	r2, r6
 8008b00:	463b      	mov	r3, r7
 8008b02:	f7f7 fb89 	bl	8000218 <__aeabi_dsub>
 8008b06:	4602      	mov	r2, r0
 8008b08:	460b      	mov	r3, r1
 8008b0a:	4606      	mov	r6, r0
 8008b0c:	460f      	mov	r7, r1
 8008b0e:	4640      	mov	r0, r8
 8008b10:	4649      	mov	r1, r9
 8008b12:	f7f7 fb81 	bl	8000218 <__aeabi_dsub>
 8008b16:	9a05      	ldr	r2, [sp, #20]
 8008b18:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008b1c:	1ad3      	subs	r3, r2, r3
 8008b1e:	2b31      	cmp	r3, #49	; 0x31
 8008b20:	e9c4 0100 	strd	r0, r1, [r4]
 8008b24:	dd2a      	ble.n	8008b7c <__ieee754_rem_pio2+0x2bc>
 8008b26:	a328      	add	r3, pc, #160	; (adr r3, 8008bc8 <__ieee754_rem_pio2+0x308>)
 8008b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b30:	f7f7 fd26 	bl	8000580 <__aeabi_dmul>
 8008b34:	4606      	mov	r6, r0
 8008b36:	460f      	mov	r7, r1
 8008b38:	4602      	mov	r2, r0
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	4640      	mov	r0, r8
 8008b3e:	4649      	mov	r1, r9
 8008b40:	f7f7 fb6a 	bl	8000218 <__aeabi_dsub>
 8008b44:	4602      	mov	r2, r0
 8008b46:	460b      	mov	r3, r1
 8008b48:	4682      	mov	sl, r0
 8008b4a:	468b      	mov	fp, r1
 8008b4c:	4640      	mov	r0, r8
 8008b4e:	4649      	mov	r1, r9
 8008b50:	f7f7 fb62 	bl	8000218 <__aeabi_dsub>
 8008b54:	4632      	mov	r2, r6
 8008b56:	463b      	mov	r3, r7
 8008b58:	f7f7 fb5e 	bl	8000218 <__aeabi_dsub>
 8008b5c:	a31c      	add	r3, pc, #112	; (adr r3, 8008bd0 <__ieee754_rem_pio2+0x310>)
 8008b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b62:	4606      	mov	r6, r0
 8008b64:	460f      	mov	r7, r1
 8008b66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b6a:	f7f7 fd09 	bl	8000580 <__aeabi_dmul>
 8008b6e:	4632      	mov	r2, r6
 8008b70:	463b      	mov	r3, r7
 8008b72:	f7f7 fb51 	bl	8000218 <__aeabi_dsub>
 8008b76:	4606      	mov	r6, r0
 8008b78:	460f      	mov	r7, r1
 8008b7a:	e767      	b.n	8008a4c <__ieee754_rem_pio2+0x18c>
 8008b7c:	46c2      	mov	sl, r8
 8008b7e:	46cb      	mov	fp, r9
 8008b80:	e76c      	b.n	8008a5c <__ieee754_rem_pio2+0x19c>
 8008b82:	4b1b      	ldr	r3, [pc, #108]	; (8008bf0 <__ieee754_rem_pio2+0x330>)
 8008b84:	4598      	cmp	r8, r3
 8008b86:	dd35      	ble.n	8008bf4 <__ieee754_rem_pio2+0x334>
 8008b88:	ee10 2a10 	vmov	r2, s0
 8008b8c:	463b      	mov	r3, r7
 8008b8e:	4630      	mov	r0, r6
 8008b90:	4639      	mov	r1, r7
 8008b92:	f7f7 fb41 	bl	8000218 <__aeabi_dsub>
 8008b96:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008b9a:	e9c4 0100 	strd	r0, r1, [r4]
 8008b9e:	e6a1      	b.n	80088e4 <__ieee754_rem_pio2+0x24>
 8008ba0:	54400000 	.word	0x54400000
 8008ba4:	3ff921fb 	.word	0x3ff921fb
 8008ba8:	1a626331 	.word	0x1a626331
 8008bac:	3dd0b461 	.word	0x3dd0b461
 8008bb0:	1a600000 	.word	0x1a600000
 8008bb4:	3dd0b461 	.word	0x3dd0b461
 8008bb8:	2e037073 	.word	0x2e037073
 8008bbc:	3ba3198a 	.word	0x3ba3198a
 8008bc0:	6dc9c883 	.word	0x6dc9c883
 8008bc4:	3fe45f30 	.word	0x3fe45f30
 8008bc8:	2e000000 	.word	0x2e000000
 8008bcc:	3ba3198a 	.word	0x3ba3198a
 8008bd0:	252049c1 	.word	0x252049c1
 8008bd4:	397b839a 	.word	0x397b839a
 8008bd8:	3fe921fb 	.word	0x3fe921fb
 8008bdc:	4002d97b 	.word	0x4002d97b
 8008be0:	3ff921fb 	.word	0x3ff921fb
 8008be4:	413921fb 	.word	0x413921fb
 8008be8:	3fe00000 	.word	0x3fe00000
 8008bec:	08009c84 	.word	0x08009c84
 8008bf0:	7fefffff 	.word	0x7fefffff
 8008bf4:	ea4f 5528 	mov.w	r5, r8, asr #20
 8008bf8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8008bfc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8008c00:	4630      	mov	r0, r6
 8008c02:	460f      	mov	r7, r1
 8008c04:	f7f7 ff6c 	bl	8000ae0 <__aeabi_d2iz>
 8008c08:	f7f7 fc54 	bl	80004b4 <__aeabi_i2d>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	460b      	mov	r3, r1
 8008c10:	4630      	mov	r0, r6
 8008c12:	4639      	mov	r1, r7
 8008c14:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008c18:	f7f7 fafe 	bl	8000218 <__aeabi_dsub>
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	4b1f      	ldr	r3, [pc, #124]	; (8008c9c <__ieee754_rem_pio2+0x3dc>)
 8008c20:	f7f7 fcae 	bl	8000580 <__aeabi_dmul>
 8008c24:	460f      	mov	r7, r1
 8008c26:	4606      	mov	r6, r0
 8008c28:	f7f7 ff5a 	bl	8000ae0 <__aeabi_d2iz>
 8008c2c:	f7f7 fc42 	bl	80004b4 <__aeabi_i2d>
 8008c30:	4602      	mov	r2, r0
 8008c32:	460b      	mov	r3, r1
 8008c34:	4630      	mov	r0, r6
 8008c36:	4639      	mov	r1, r7
 8008c38:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008c3c:	f7f7 faec 	bl	8000218 <__aeabi_dsub>
 8008c40:	2200      	movs	r2, #0
 8008c42:	4b16      	ldr	r3, [pc, #88]	; (8008c9c <__ieee754_rem_pio2+0x3dc>)
 8008c44:	f7f7 fc9c 	bl	8000580 <__aeabi_dmul>
 8008c48:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008c4c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8008c50:	f04f 0803 	mov.w	r8, #3
 8008c54:	2600      	movs	r6, #0
 8008c56:	2700      	movs	r7, #0
 8008c58:	4632      	mov	r2, r6
 8008c5a:	463b      	mov	r3, r7
 8008c5c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8008c60:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8008c64:	f7f7 fef4 	bl	8000a50 <__aeabi_dcmpeq>
 8008c68:	b9b0      	cbnz	r0, 8008c98 <__ieee754_rem_pio2+0x3d8>
 8008c6a:	4b0d      	ldr	r3, [pc, #52]	; (8008ca0 <__ieee754_rem_pio2+0x3e0>)
 8008c6c:	9301      	str	r3, [sp, #4]
 8008c6e:	2302      	movs	r3, #2
 8008c70:	9300      	str	r3, [sp, #0]
 8008c72:	462a      	mov	r2, r5
 8008c74:	4643      	mov	r3, r8
 8008c76:	4621      	mov	r1, r4
 8008c78:	a806      	add	r0, sp, #24
 8008c7a:	f000 f9ad 	bl	8008fd8 <__kernel_rem_pio2>
 8008c7e:	9b04      	ldr	r3, [sp, #16]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	4605      	mov	r5, r0
 8008c84:	f6bf ae58 	bge.w	8008938 <__ieee754_rem_pio2+0x78>
 8008c88:	6863      	ldr	r3, [r4, #4]
 8008c8a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008c8e:	6063      	str	r3, [r4, #4]
 8008c90:	68e3      	ldr	r3, [r4, #12]
 8008c92:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008c96:	e6fb      	b.n	8008a90 <__ieee754_rem_pio2+0x1d0>
 8008c98:	46d0      	mov	r8, sl
 8008c9a:	e7dd      	b.n	8008c58 <__ieee754_rem_pio2+0x398>
 8008c9c:	41700000 	.word	0x41700000
 8008ca0:	08009d04 	.word	0x08009d04

08008ca4 <__ieee754_sqrt>:
 8008ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ca8:	ec55 4b10 	vmov	r4, r5, d0
 8008cac:	4e54      	ldr	r6, [pc, #336]	; (8008e00 <__ieee754_sqrt+0x15c>)
 8008cae:	43ae      	bics	r6, r5
 8008cb0:	ee10 0a10 	vmov	r0, s0
 8008cb4:	462b      	mov	r3, r5
 8008cb6:	462a      	mov	r2, r5
 8008cb8:	4621      	mov	r1, r4
 8008cba:	d113      	bne.n	8008ce4 <__ieee754_sqrt+0x40>
 8008cbc:	ee10 2a10 	vmov	r2, s0
 8008cc0:	462b      	mov	r3, r5
 8008cc2:	ee10 0a10 	vmov	r0, s0
 8008cc6:	4629      	mov	r1, r5
 8008cc8:	f7f7 fc5a 	bl	8000580 <__aeabi_dmul>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	460b      	mov	r3, r1
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	4629      	mov	r1, r5
 8008cd4:	f7f7 faa2 	bl	800021c <__adddf3>
 8008cd8:	4604      	mov	r4, r0
 8008cda:	460d      	mov	r5, r1
 8008cdc:	ec45 4b10 	vmov	d0, r4, r5
 8008ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ce4:	2d00      	cmp	r5, #0
 8008ce6:	dc10      	bgt.n	8008d0a <__ieee754_sqrt+0x66>
 8008ce8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008cec:	4330      	orrs	r0, r6
 8008cee:	d0f5      	beq.n	8008cdc <__ieee754_sqrt+0x38>
 8008cf0:	b15d      	cbz	r5, 8008d0a <__ieee754_sqrt+0x66>
 8008cf2:	ee10 2a10 	vmov	r2, s0
 8008cf6:	462b      	mov	r3, r5
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	4629      	mov	r1, r5
 8008cfc:	f7f7 fa8c 	bl	8000218 <__aeabi_dsub>
 8008d00:	4602      	mov	r2, r0
 8008d02:	460b      	mov	r3, r1
 8008d04:	f7f7 fd66 	bl	80007d4 <__aeabi_ddiv>
 8008d08:	e7e6      	b.n	8008cd8 <__ieee754_sqrt+0x34>
 8008d0a:	151b      	asrs	r3, r3, #20
 8008d0c:	d10c      	bne.n	8008d28 <__ieee754_sqrt+0x84>
 8008d0e:	2a00      	cmp	r2, #0
 8008d10:	d06d      	beq.n	8008dee <__ieee754_sqrt+0x14a>
 8008d12:	2000      	movs	r0, #0
 8008d14:	02d6      	lsls	r6, r2, #11
 8008d16:	d56e      	bpl.n	8008df6 <__ieee754_sqrt+0x152>
 8008d18:	1e44      	subs	r4, r0, #1
 8008d1a:	1b1b      	subs	r3, r3, r4
 8008d1c:	f1c0 0420 	rsb	r4, r0, #32
 8008d20:	fa21 f404 	lsr.w	r4, r1, r4
 8008d24:	4322      	orrs	r2, r4
 8008d26:	4081      	lsls	r1, r0
 8008d28:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008d2c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008d30:	07dd      	lsls	r5, r3, #31
 8008d32:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008d36:	bf42      	ittt	mi
 8008d38:	0052      	lslmi	r2, r2, #1
 8008d3a:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8008d3e:	0049      	lslmi	r1, r1, #1
 8008d40:	1058      	asrs	r0, r3, #1
 8008d42:	2500      	movs	r5, #0
 8008d44:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8008d48:	441a      	add	r2, r3
 8008d4a:	0049      	lsls	r1, r1, #1
 8008d4c:	2316      	movs	r3, #22
 8008d4e:	462c      	mov	r4, r5
 8008d50:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008d54:	19a7      	adds	r7, r4, r6
 8008d56:	4297      	cmp	r7, r2
 8008d58:	bfde      	ittt	le
 8008d5a:	1bd2      	suble	r2, r2, r7
 8008d5c:	19bc      	addle	r4, r7, r6
 8008d5e:	19ad      	addle	r5, r5, r6
 8008d60:	0052      	lsls	r2, r2, #1
 8008d62:	3b01      	subs	r3, #1
 8008d64:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8008d68:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008d6c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008d70:	d1f0      	bne.n	8008d54 <__ieee754_sqrt+0xb0>
 8008d72:	f04f 0e20 	mov.w	lr, #32
 8008d76:	469c      	mov	ip, r3
 8008d78:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008d7c:	42a2      	cmp	r2, r4
 8008d7e:	eb06 070c 	add.w	r7, r6, ip
 8008d82:	dc02      	bgt.n	8008d8a <__ieee754_sqrt+0xe6>
 8008d84:	d112      	bne.n	8008dac <__ieee754_sqrt+0x108>
 8008d86:	428f      	cmp	r7, r1
 8008d88:	d810      	bhi.n	8008dac <__ieee754_sqrt+0x108>
 8008d8a:	2f00      	cmp	r7, #0
 8008d8c:	eb07 0c06 	add.w	ip, r7, r6
 8008d90:	da34      	bge.n	8008dfc <__ieee754_sqrt+0x158>
 8008d92:	f1bc 0f00 	cmp.w	ip, #0
 8008d96:	db31      	blt.n	8008dfc <__ieee754_sqrt+0x158>
 8008d98:	f104 0801 	add.w	r8, r4, #1
 8008d9c:	1b12      	subs	r2, r2, r4
 8008d9e:	428f      	cmp	r7, r1
 8008da0:	bf88      	it	hi
 8008da2:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8008da6:	1bc9      	subs	r1, r1, r7
 8008da8:	4433      	add	r3, r6
 8008daa:	4644      	mov	r4, r8
 8008dac:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8008db0:	f1be 0e01 	subs.w	lr, lr, #1
 8008db4:	443a      	add	r2, r7
 8008db6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008dba:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008dbe:	d1dd      	bne.n	8008d7c <__ieee754_sqrt+0xd8>
 8008dc0:	430a      	orrs	r2, r1
 8008dc2:	d006      	beq.n	8008dd2 <__ieee754_sqrt+0x12e>
 8008dc4:	1c5c      	adds	r4, r3, #1
 8008dc6:	bf13      	iteet	ne
 8008dc8:	3301      	addne	r3, #1
 8008dca:	3501      	addeq	r5, #1
 8008dcc:	4673      	moveq	r3, lr
 8008dce:	f023 0301 	bicne.w	r3, r3, #1
 8008dd2:	106a      	asrs	r2, r5, #1
 8008dd4:	085b      	lsrs	r3, r3, #1
 8008dd6:	07e9      	lsls	r1, r5, #31
 8008dd8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008ddc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008de0:	bf48      	it	mi
 8008de2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008de6:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8008dea:	461c      	mov	r4, r3
 8008dec:	e776      	b.n	8008cdc <__ieee754_sqrt+0x38>
 8008dee:	0aca      	lsrs	r2, r1, #11
 8008df0:	3b15      	subs	r3, #21
 8008df2:	0549      	lsls	r1, r1, #21
 8008df4:	e78b      	b.n	8008d0e <__ieee754_sqrt+0x6a>
 8008df6:	0052      	lsls	r2, r2, #1
 8008df8:	3001      	adds	r0, #1
 8008dfa:	e78b      	b.n	8008d14 <__ieee754_sqrt+0x70>
 8008dfc:	46a0      	mov	r8, r4
 8008dfe:	e7cd      	b.n	8008d9c <__ieee754_sqrt+0xf8>
 8008e00:	7ff00000 	.word	0x7ff00000
 8008e04:	00000000 	.word	0x00000000

08008e08 <__kernel_cos>:
 8008e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e0c:	ec59 8b10 	vmov	r8, r9, d0
 8008e10:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 8008e14:	b085      	sub	sp, #20
 8008e16:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8008e1a:	ed8d 1b00 	vstr	d1, [sp]
 8008e1e:	da07      	bge.n	8008e30 <__kernel_cos+0x28>
 8008e20:	ee10 0a10 	vmov	r0, s0
 8008e24:	4649      	mov	r1, r9
 8008e26:	f7f7 fe5b 	bl	8000ae0 <__aeabi_d2iz>
 8008e2a:	2800      	cmp	r0, #0
 8008e2c:	f000 80aa 	beq.w	8008f84 <__kernel_cos+0x17c>
 8008e30:	4642      	mov	r2, r8
 8008e32:	464b      	mov	r3, r9
 8008e34:	4640      	mov	r0, r8
 8008e36:	4649      	mov	r1, r9
 8008e38:	f7f7 fba2 	bl	8000580 <__aeabi_dmul>
 8008e3c:	a359      	add	r3, pc, #356	; (adr r3, 8008fa4 <__kernel_cos+0x19c>)
 8008e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e42:	4604      	mov	r4, r0
 8008e44:	460d      	mov	r5, r1
 8008e46:	f7f7 fb9b 	bl	8000580 <__aeabi_dmul>
 8008e4a:	a358      	add	r3, pc, #352	; (adr r3, 8008fac <__kernel_cos+0x1a4>)
 8008e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e50:	f7f7 f9e4 	bl	800021c <__adddf3>
 8008e54:	4622      	mov	r2, r4
 8008e56:	462b      	mov	r3, r5
 8008e58:	f7f7 fb92 	bl	8000580 <__aeabi_dmul>
 8008e5c:	a355      	add	r3, pc, #340	; (adr r3, 8008fb4 <__kernel_cos+0x1ac>)
 8008e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e62:	f7f7 f9d9 	bl	8000218 <__aeabi_dsub>
 8008e66:	4622      	mov	r2, r4
 8008e68:	462b      	mov	r3, r5
 8008e6a:	f7f7 fb89 	bl	8000580 <__aeabi_dmul>
 8008e6e:	a353      	add	r3, pc, #332	; (adr r3, 8008fbc <__kernel_cos+0x1b4>)
 8008e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e74:	f7f7 f9d2 	bl	800021c <__adddf3>
 8008e78:	4622      	mov	r2, r4
 8008e7a:	462b      	mov	r3, r5
 8008e7c:	f7f7 fb80 	bl	8000580 <__aeabi_dmul>
 8008e80:	a350      	add	r3, pc, #320	; (adr r3, 8008fc4 <__kernel_cos+0x1bc>)
 8008e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e86:	f7f7 f9c7 	bl	8000218 <__aeabi_dsub>
 8008e8a:	4622      	mov	r2, r4
 8008e8c:	462b      	mov	r3, r5
 8008e8e:	f7f7 fb77 	bl	8000580 <__aeabi_dmul>
 8008e92:	a34e      	add	r3, pc, #312	; (adr r3, 8008fcc <__kernel_cos+0x1c4>)
 8008e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e98:	f7f7 f9c0 	bl	800021c <__adddf3>
 8008e9c:	462b      	mov	r3, r5
 8008e9e:	4622      	mov	r2, r4
 8008ea0:	f7f7 fb6e 	bl	8000580 <__aeabi_dmul>
 8008ea4:	4b3a      	ldr	r3, [pc, #232]	; (8008f90 <__kernel_cos+0x188>)
 8008ea6:	429f      	cmp	r7, r3
 8008ea8:	4682      	mov	sl, r0
 8008eaa:	468b      	mov	fp, r1
 8008eac:	dc2c      	bgt.n	8008f08 <__kernel_cos+0x100>
 8008eae:	2200      	movs	r2, #0
 8008eb0:	4b38      	ldr	r3, [pc, #224]	; (8008f94 <__kernel_cos+0x18c>)
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	4629      	mov	r1, r5
 8008eb6:	f7f7 fb63 	bl	8000580 <__aeabi_dmul>
 8008eba:	4652      	mov	r2, sl
 8008ebc:	4606      	mov	r6, r0
 8008ebe:	460f      	mov	r7, r1
 8008ec0:	465b      	mov	r3, fp
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	4629      	mov	r1, r5
 8008ec6:	f7f7 fb5b 	bl	8000580 <__aeabi_dmul>
 8008eca:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ece:	4604      	mov	r4, r0
 8008ed0:	460d      	mov	r5, r1
 8008ed2:	4640      	mov	r0, r8
 8008ed4:	4649      	mov	r1, r9
 8008ed6:	f7f7 fb53 	bl	8000580 <__aeabi_dmul>
 8008eda:	4602      	mov	r2, r0
 8008edc:	460b      	mov	r3, r1
 8008ede:	4620      	mov	r0, r4
 8008ee0:	4629      	mov	r1, r5
 8008ee2:	f7f7 f999 	bl	8000218 <__aeabi_dsub>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	460b      	mov	r3, r1
 8008eea:	4630      	mov	r0, r6
 8008eec:	4639      	mov	r1, r7
 8008eee:	f7f7 f993 	bl	8000218 <__aeabi_dsub>
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	4928      	ldr	r1, [pc, #160]	; (8008f98 <__kernel_cos+0x190>)
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	2000      	movs	r0, #0
 8008efa:	f7f7 f98d 	bl	8000218 <__aeabi_dsub>
 8008efe:	ec41 0b10 	vmov	d0, r0, r1
 8008f02:	b005      	add	sp, #20
 8008f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f08:	4b24      	ldr	r3, [pc, #144]	; (8008f9c <__kernel_cos+0x194>)
 8008f0a:	4923      	ldr	r1, [pc, #140]	; (8008f98 <__kernel_cos+0x190>)
 8008f0c:	429f      	cmp	r7, r3
 8008f0e:	bfd7      	itett	le
 8008f10:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 8008f14:	4f22      	ldrgt	r7, [pc, #136]	; (8008fa0 <__kernel_cos+0x198>)
 8008f16:	2200      	movle	r2, #0
 8008f18:	4616      	movle	r6, r2
 8008f1a:	bfd4      	ite	le
 8008f1c:	461f      	movle	r7, r3
 8008f1e:	2600      	movgt	r6, #0
 8008f20:	4632      	mov	r2, r6
 8008f22:	463b      	mov	r3, r7
 8008f24:	2000      	movs	r0, #0
 8008f26:	f7f7 f977 	bl	8000218 <__aeabi_dsub>
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f30:	4b18      	ldr	r3, [pc, #96]	; (8008f94 <__kernel_cos+0x18c>)
 8008f32:	4620      	mov	r0, r4
 8008f34:	4629      	mov	r1, r5
 8008f36:	f7f7 fb23 	bl	8000580 <__aeabi_dmul>
 8008f3a:	4632      	mov	r2, r6
 8008f3c:	463b      	mov	r3, r7
 8008f3e:	f7f7 f96b 	bl	8000218 <__aeabi_dsub>
 8008f42:	4652      	mov	r2, sl
 8008f44:	4606      	mov	r6, r0
 8008f46:	460f      	mov	r7, r1
 8008f48:	465b      	mov	r3, fp
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	4629      	mov	r1, r5
 8008f4e:	f7f7 fb17 	bl	8000580 <__aeabi_dmul>
 8008f52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f56:	4604      	mov	r4, r0
 8008f58:	460d      	mov	r5, r1
 8008f5a:	4640      	mov	r0, r8
 8008f5c:	4649      	mov	r1, r9
 8008f5e:	f7f7 fb0f 	bl	8000580 <__aeabi_dmul>
 8008f62:	4602      	mov	r2, r0
 8008f64:	460b      	mov	r3, r1
 8008f66:	4620      	mov	r0, r4
 8008f68:	4629      	mov	r1, r5
 8008f6a:	f7f7 f955 	bl	8000218 <__aeabi_dsub>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	460b      	mov	r3, r1
 8008f72:	4630      	mov	r0, r6
 8008f74:	4639      	mov	r1, r7
 8008f76:	f7f7 f94f 	bl	8000218 <__aeabi_dsub>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f82:	e7ba      	b.n	8008efa <__kernel_cos+0xf2>
 8008f84:	2000      	movs	r0, #0
 8008f86:	4904      	ldr	r1, [pc, #16]	; (8008f98 <__kernel_cos+0x190>)
 8008f88:	e7b9      	b.n	8008efe <__kernel_cos+0xf6>
 8008f8a:	bf00      	nop
 8008f8c:	f3af 8000 	nop.w
 8008f90:	3fd33332 	.word	0x3fd33332
 8008f94:	3fe00000 	.word	0x3fe00000
 8008f98:	3ff00000 	.word	0x3ff00000
 8008f9c:	3fe90000 	.word	0x3fe90000
 8008fa0:	3fd20000 	.word	0x3fd20000
 8008fa4:	be8838d4 	.word	0xbe8838d4
 8008fa8:	bda8fae9 	.word	0xbda8fae9
 8008fac:	bdb4b1c4 	.word	0xbdb4b1c4
 8008fb0:	3e21ee9e 	.word	0x3e21ee9e
 8008fb4:	809c52ad 	.word	0x809c52ad
 8008fb8:	3e927e4f 	.word	0x3e927e4f
 8008fbc:	19cb1590 	.word	0x19cb1590
 8008fc0:	3efa01a0 	.word	0x3efa01a0
 8008fc4:	16c15177 	.word	0x16c15177
 8008fc8:	3f56c16c 	.word	0x3f56c16c
 8008fcc:	5555554c 	.word	0x5555554c
 8008fd0:	3fa55555 	.word	0x3fa55555
 8008fd4:	00000000 	.word	0x00000000

08008fd8 <__kernel_rem_pio2>:
 8008fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fdc:	ed2d 8b02 	vpush	{d8}
 8008fe0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008fe4:	1ed4      	subs	r4, r2, #3
 8008fe6:	9306      	str	r3, [sp, #24]
 8008fe8:	9102      	str	r1, [sp, #8]
 8008fea:	4bc3      	ldr	r3, [pc, #780]	; (80092f8 <__kernel_rem_pio2+0x320>)
 8008fec:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8008fee:	9009      	str	r0, [sp, #36]	; 0x24
 8008ff0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008ff4:	9300      	str	r3, [sp, #0]
 8008ff6:	9b06      	ldr	r3, [sp, #24]
 8008ff8:	3b01      	subs	r3, #1
 8008ffa:	9304      	str	r3, [sp, #16]
 8008ffc:	2318      	movs	r3, #24
 8008ffe:	fb94 f4f3 	sdiv	r4, r4, r3
 8009002:	f06f 0317 	mvn.w	r3, #23
 8009006:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800900a:	fb04 3303 	mla	r3, r4, r3, r3
 800900e:	eb03 0a02 	add.w	sl, r3, r2
 8009012:	9b00      	ldr	r3, [sp, #0]
 8009014:	9a04      	ldr	r2, [sp, #16]
 8009016:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80092e8 <__kernel_rem_pio2+0x310>
 800901a:	eb03 0802 	add.w	r8, r3, r2
 800901e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8009020:	1aa7      	subs	r7, r4, r2
 8009022:	ae20      	add	r6, sp, #128	; 0x80
 8009024:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009028:	2500      	movs	r5, #0
 800902a:	4545      	cmp	r5, r8
 800902c:	dd13      	ble.n	8009056 <__kernel_rem_pio2+0x7e>
 800902e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80092e8 <__kernel_rem_pio2+0x310>
 8009032:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8009036:	2600      	movs	r6, #0
 8009038:	9b00      	ldr	r3, [sp, #0]
 800903a:	429e      	cmp	r6, r3
 800903c:	dc32      	bgt.n	80090a4 <__kernel_rem_pio2+0xcc>
 800903e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009040:	9303      	str	r3, [sp, #12]
 8009042:	9b06      	ldr	r3, [sp, #24]
 8009044:	199d      	adds	r5, r3, r6
 8009046:	ab20      	add	r3, sp, #128	; 0x80
 8009048:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800904c:	9308      	str	r3, [sp, #32]
 800904e:	ec59 8b18 	vmov	r8, r9, d8
 8009052:	2700      	movs	r7, #0
 8009054:	e01f      	b.n	8009096 <__kernel_rem_pio2+0xbe>
 8009056:	42ef      	cmn	r7, r5
 8009058:	d407      	bmi.n	800906a <__kernel_rem_pio2+0x92>
 800905a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800905e:	f7f7 fa29 	bl	80004b4 <__aeabi_i2d>
 8009062:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009066:	3501      	adds	r5, #1
 8009068:	e7df      	b.n	800902a <__kernel_rem_pio2+0x52>
 800906a:	ec51 0b18 	vmov	r0, r1, d8
 800906e:	e7f8      	b.n	8009062 <__kernel_rem_pio2+0x8a>
 8009070:	9908      	ldr	r1, [sp, #32]
 8009072:	9d03      	ldr	r5, [sp, #12]
 8009074:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8009078:	9108      	str	r1, [sp, #32]
 800907a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800907e:	9503      	str	r5, [sp, #12]
 8009080:	f7f7 fa7e 	bl	8000580 <__aeabi_dmul>
 8009084:	4602      	mov	r2, r0
 8009086:	460b      	mov	r3, r1
 8009088:	4640      	mov	r0, r8
 800908a:	4649      	mov	r1, r9
 800908c:	f7f7 f8c6 	bl	800021c <__adddf3>
 8009090:	3701      	adds	r7, #1
 8009092:	4680      	mov	r8, r0
 8009094:	4689      	mov	r9, r1
 8009096:	9b04      	ldr	r3, [sp, #16]
 8009098:	429f      	cmp	r7, r3
 800909a:	dde9      	ble.n	8009070 <__kernel_rem_pio2+0x98>
 800909c:	e8eb 8902 	strd	r8, r9, [fp], #8
 80090a0:	3601      	adds	r6, #1
 80090a2:	e7c9      	b.n	8009038 <__kernel_rem_pio2+0x60>
 80090a4:	9b00      	ldr	r3, [sp, #0]
 80090a6:	9f00      	ldr	r7, [sp, #0]
 80090a8:	aa0c      	add	r2, sp, #48	; 0x30
 80090aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80090ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80090b0:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80090b2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80090b6:	930a      	str	r3, [sp, #40]	; 0x28
 80090b8:	ab98      	add	r3, sp, #608	; 0x260
 80090ba:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 80090be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80090c2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80090c6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80090ca:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80090ce:	9308      	str	r3, [sp, #32]
 80090d0:	9a08      	ldr	r2, [sp, #32]
 80090d2:	ab98      	add	r3, sp, #608	; 0x260
 80090d4:	4413      	add	r3, r2
 80090d6:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 80090da:	2600      	movs	r6, #0
 80090dc:	1bbb      	subs	r3, r7, r6
 80090de:	2b00      	cmp	r3, #0
 80090e0:	dc77      	bgt.n	80091d2 <__kernel_rem_pio2+0x1fa>
 80090e2:	ec49 8b10 	vmov	d0, r8, r9
 80090e6:	4650      	mov	r0, sl
 80090e8:	f000 fc12 	bl	8009910 <scalbn>
 80090ec:	ec55 4b10 	vmov	r4, r5, d0
 80090f0:	2200      	movs	r2, #0
 80090f2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80090f6:	ee10 0a10 	vmov	r0, s0
 80090fa:	4629      	mov	r1, r5
 80090fc:	f7f7 fa40 	bl	8000580 <__aeabi_dmul>
 8009100:	ec41 0b10 	vmov	d0, r0, r1
 8009104:	f000 fb7c 	bl	8009800 <floor>
 8009108:	2200      	movs	r2, #0
 800910a:	ec51 0b10 	vmov	r0, r1, d0
 800910e:	4b7b      	ldr	r3, [pc, #492]	; (80092fc <__kernel_rem_pio2+0x324>)
 8009110:	f7f7 fa36 	bl	8000580 <__aeabi_dmul>
 8009114:	4602      	mov	r2, r0
 8009116:	460b      	mov	r3, r1
 8009118:	4620      	mov	r0, r4
 800911a:	4629      	mov	r1, r5
 800911c:	f7f7 f87c 	bl	8000218 <__aeabi_dsub>
 8009120:	460d      	mov	r5, r1
 8009122:	4604      	mov	r4, r0
 8009124:	f7f7 fcdc 	bl	8000ae0 <__aeabi_d2iz>
 8009128:	9003      	str	r0, [sp, #12]
 800912a:	f7f7 f9c3 	bl	80004b4 <__aeabi_i2d>
 800912e:	4602      	mov	r2, r0
 8009130:	460b      	mov	r3, r1
 8009132:	4620      	mov	r0, r4
 8009134:	4629      	mov	r1, r5
 8009136:	f7f7 f86f 	bl	8000218 <__aeabi_dsub>
 800913a:	f1ba 0f00 	cmp.w	sl, #0
 800913e:	4680      	mov	r8, r0
 8009140:	4689      	mov	r9, r1
 8009142:	dd6b      	ble.n	800921c <__kernel_rem_pio2+0x244>
 8009144:	1e7a      	subs	r2, r7, #1
 8009146:	ab0c      	add	r3, sp, #48	; 0x30
 8009148:	f1ca 0118 	rsb	r1, sl, #24
 800914c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009150:	9c03      	ldr	r4, [sp, #12]
 8009152:	fa40 f301 	asr.w	r3, r0, r1
 8009156:	441c      	add	r4, r3
 8009158:	408b      	lsls	r3, r1
 800915a:	1ac0      	subs	r0, r0, r3
 800915c:	ab0c      	add	r3, sp, #48	; 0x30
 800915e:	9403      	str	r4, [sp, #12]
 8009160:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009164:	f1ca 0317 	rsb	r3, sl, #23
 8009168:	fa40 fb03 	asr.w	fp, r0, r3
 800916c:	f1bb 0f00 	cmp.w	fp, #0
 8009170:	dd62      	ble.n	8009238 <__kernel_rem_pio2+0x260>
 8009172:	9b03      	ldr	r3, [sp, #12]
 8009174:	2200      	movs	r2, #0
 8009176:	3301      	adds	r3, #1
 8009178:	9303      	str	r3, [sp, #12]
 800917a:	4614      	mov	r4, r2
 800917c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009180:	4297      	cmp	r7, r2
 8009182:	f300 8089 	bgt.w	8009298 <__kernel_rem_pio2+0x2c0>
 8009186:	f1ba 0f00 	cmp.w	sl, #0
 800918a:	dd07      	ble.n	800919c <__kernel_rem_pio2+0x1c4>
 800918c:	f1ba 0f01 	cmp.w	sl, #1
 8009190:	f000 8096 	beq.w	80092c0 <__kernel_rem_pio2+0x2e8>
 8009194:	f1ba 0f02 	cmp.w	sl, #2
 8009198:	f000 809c 	beq.w	80092d4 <__kernel_rem_pio2+0x2fc>
 800919c:	f1bb 0f02 	cmp.w	fp, #2
 80091a0:	d14a      	bne.n	8009238 <__kernel_rem_pio2+0x260>
 80091a2:	4642      	mov	r2, r8
 80091a4:	464b      	mov	r3, r9
 80091a6:	2000      	movs	r0, #0
 80091a8:	4955      	ldr	r1, [pc, #340]	; (8009300 <__kernel_rem_pio2+0x328>)
 80091aa:	f7f7 f835 	bl	8000218 <__aeabi_dsub>
 80091ae:	4680      	mov	r8, r0
 80091b0:	4689      	mov	r9, r1
 80091b2:	2c00      	cmp	r4, #0
 80091b4:	d040      	beq.n	8009238 <__kernel_rem_pio2+0x260>
 80091b6:	4650      	mov	r0, sl
 80091b8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80092f0 <__kernel_rem_pio2+0x318>
 80091bc:	f000 fba8 	bl	8009910 <scalbn>
 80091c0:	4640      	mov	r0, r8
 80091c2:	4649      	mov	r1, r9
 80091c4:	ec53 2b10 	vmov	r2, r3, d0
 80091c8:	f7f7 f826 	bl	8000218 <__aeabi_dsub>
 80091cc:	4680      	mov	r8, r0
 80091ce:	4689      	mov	r9, r1
 80091d0:	e032      	b.n	8009238 <__kernel_rem_pio2+0x260>
 80091d2:	2200      	movs	r2, #0
 80091d4:	4b4b      	ldr	r3, [pc, #300]	; (8009304 <__kernel_rem_pio2+0x32c>)
 80091d6:	4640      	mov	r0, r8
 80091d8:	4649      	mov	r1, r9
 80091da:	f7f7 f9d1 	bl	8000580 <__aeabi_dmul>
 80091de:	f7f7 fc7f 	bl	8000ae0 <__aeabi_d2iz>
 80091e2:	f7f7 f967 	bl	80004b4 <__aeabi_i2d>
 80091e6:	2200      	movs	r2, #0
 80091e8:	4b47      	ldr	r3, [pc, #284]	; (8009308 <__kernel_rem_pio2+0x330>)
 80091ea:	4604      	mov	r4, r0
 80091ec:	460d      	mov	r5, r1
 80091ee:	f7f7 f9c7 	bl	8000580 <__aeabi_dmul>
 80091f2:	4602      	mov	r2, r0
 80091f4:	460b      	mov	r3, r1
 80091f6:	4640      	mov	r0, r8
 80091f8:	4649      	mov	r1, r9
 80091fa:	f7f7 f80d 	bl	8000218 <__aeabi_dsub>
 80091fe:	f7f7 fc6f 	bl	8000ae0 <__aeabi_d2iz>
 8009202:	ab0c      	add	r3, sp, #48	; 0x30
 8009204:	4629      	mov	r1, r5
 8009206:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800920a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800920e:	4620      	mov	r0, r4
 8009210:	f7f7 f804 	bl	800021c <__adddf3>
 8009214:	3601      	adds	r6, #1
 8009216:	4680      	mov	r8, r0
 8009218:	4689      	mov	r9, r1
 800921a:	e75f      	b.n	80090dc <__kernel_rem_pio2+0x104>
 800921c:	d106      	bne.n	800922c <__kernel_rem_pio2+0x254>
 800921e:	1e7b      	subs	r3, r7, #1
 8009220:	aa0c      	add	r2, sp, #48	; 0x30
 8009222:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009226:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800922a:	e79f      	b.n	800916c <__kernel_rem_pio2+0x194>
 800922c:	2200      	movs	r2, #0
 800922e:	4b37      	ldr	r3, [pc, #220]	; (800930c <__kernel_rem_pio2+0x334>)
 8009230:	f7f7 fc2c 	bl	8000a8c <__aeabi_dcmpge>
 8009234:	bb68      	cbnz	r0, 8009292 <__kernel_rem_pio2+0x2ba>
 8009236:	4683      	mov	fp, r0
 8009238:	2200      	movs	r2, #0
 800923a:	2300      	movs	r3, #0
 800923c:	4640      	mov	r0, r8
 800923e:	4649      	mov	r1, r9
 8009240:	f7f7 fc06 	bl	8000a50 <__aeabi_dcmpeq>
 8009244:	2800      	cmp	r0, #0
 8009246:	f000 80c1 	beq.w	80093cc <__kernel_rem_pio2+0x3f4>
 800924a:	1e7c      	subs	r4, r7, #1
 800924c:	4623      	mov	r3, r4
 800924e:	2200      	movs	r2, #0
 8009250:	9900      	ldr	r1, [sp, #0]
 8009252:	428b      	cmp	r3, r1
 8009254:	da5c      	bge.n	8009310 <__kernel_rem_pio2+0x338>
 8009256:	2a00      	cmp	r2, #0
 8009258:	f040 808b 	bne.w	8009372 <__kernel_rem_pio2+0x39a>
 800925c:	2401      	movs	r4, #1
 800925e:	f06f 0203 	mvn.w	r2, #3
 8009262:	fb02 f304 	mul.w	r3, r2, r4
 8009266:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009268:	58cb      	ldr	r3, [r1, r3]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d056      	beq.n	800931c <__kernel_rem_pio2+0x344>
 800926e:	9b08      	ldr	r3, [sp, #32]
 8009270:	aa98      	add	r2, sp, #608	; 0x260
 8009272:	4413      	add	r3, r2
 8009274:	f1a3 0b90 	sub.w	fp, r3, #144	; 0x90
 8009278:	9b06      	ldr	r3, [sp, #24]
 800927a:	19dd      	adds	r5, r3, r7
 800927c:	ab20      	add	r3, sp, #128	; 0x80
 800927e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009282:	19e3      	adds	r3, r4, r7
 8009284:	1c7e      	adds	r6, r7, #1
 8009286:	9303      	str	r3, [sp, #12]
 8009288:	9b03      	ldr	r3, [sp, #12]
 800928a:	429e      	cmp	r6, r3
 800928c:	dd48      	ble.n	8009320 <__kernel_rem_pio2+0x348>
 800928e:	461f      	mov	r7, r3
 8009290:	e712      	b.n	80090b8 <__kernel_rem_pio2+0xe0>
 8009292:	f04f 0b02 	mov.w	fp, #2
 8009296:	e76c      	b.n	8009172 <__kernel_rem_pio2+0x19a>
 8009298:	ab0c      	add	r3, sp, #48	; 0x30
 800929a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800929e:	b94c      	cbnz	r4, 80092b4 <__kernel_rem_pio2+0x2dc>
 80092a0:	b12b      	cbz	r3, 80092ae <__kernel_rem_pio2+0x2d6>
 80092a2:	a80c      	add	r0, sp, #48	; 0x30
 80092a4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80092a8:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80092ac:	2301      	movs	r3, #1
 80092ae:	3201      	adds	r2, #1
 80092b0:	461c      	mov	r4, r3
 80092b2:	e765      	b.n	8009180 <__kernel_rem_pio2+0x1a8>
 80092b4:	a80c      	add	r0, sp, #48	; 0x30
 80092b6:	1acb      	subs	r3, r1, r3
 80092b8:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80092bc:	4623      	mov	r3, r4
 80092be:	e7f6      	b.n	80092ae <__kernel_rem_pio2+0x2d6>
 80092c0:	1e7a      	subs	r2, r7, #1
 80092c2:	ab0c      	add	r3, sp, #48	; 0x30
 80092c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092c8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80092cc:	a90c      	add	r1, sp, #48	; 0x30
 80092ce:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80092d2:	e763      	b.n	800919c <__kernel_rem_pio2+0x1c4>
 80092d4:	1e7a      	subs	r2, r7, #1
 80092d6:	ab0c      	add	r3, sp, #48	; 0x30
 80092d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092dc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80092e0:	e7f4      	b.n	80092cc <__kernel_rem_pio2+0x2f4>
 80092e2:	bf00      	nop
 80092e4:	f3af 8000 	nop.w
	...
 80092f4:	3ff00000 	.word	0x3ff00000
 80092f8:	08009e50 	.word	0x08009e50
 80092fc:	40200000 	.word	0x40200000
 8009300:	3ff00000 	.word	0x3ff00000
 8009304:	3e700000 	.word	0x3e700000
 8009308:	41700000 	.word	0x41700000
 800930c:	3fe00000 	.word	0x3fe00000
 8009310:	a90c      	add	r1, sp, #48	; 0x30
 8009312:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009316:	3b01      	subs	r3, #1
 8009318:	430a      	orrs	r2, r1
 800931a:	e799      	b.n	8009250 <__kernel_rem_pio2+0x278>
 800931c:	3401      	adds	r4, #1
 800931e:	e7a0      	b.n	8009262 <__kernel_rem_pio2+0x28a>
 8009320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009322:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009326:	f7f7 f8c5 	bl	80004b4 <__aeabi_i2d>
 800932a:	e8e5 0102 	strd	r0, r1, [r5], #8
 800932e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009330:	9508      	str	r5, [sp, #32]
 8009332:	461c      	mov	r4, r3
 8009334:	2700      	movs	r7, #0
 8009336:	f04f 0800 	mov.w	r8, #0
 800933a:	f04f 0900 	mov.w	r9, #0
 800933e:	9b04      	ldr	r3, [sp, #16]
 8009340:	429f      	cmp	r7, r3
 8009342:	dd03      	ble.n	800934c <__kernel_rem_pio2+0x374>
 8009344:	e8eb 8902 	strd	r8, r9, [fp], #8
 8009348:	3601      	adds	r6, #1
 800934a:	e79d      	b.n	8009288 <__kernel_rem_pio2+0x2b0>
 800934c:	9908      	ldr	r1, [sp, #32]
 800934e:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8009352:	9108      	str	r1, [sp, #32]
 8009354:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8009358:	f7f7 f912 	bl	8000580 <__aeabi_dmul>
 800935c:	4602      	mov	r2, r0
 800935e:	460b      	mov	r3, r1
 8009360:	4640      	mov	r0, r8
 8009362:	4649      	mov	r1, r9
 8009364:	f7f6 ff5a 	bl	800021c <__adddf3>
 8009368:	3701      	adds	r7, #1
 800936a:	4680      	mov	r8, r0
 800936c:	4689      	mov	r9, r1
 800936e:	e7e6      	b.n	800933e <__kernel_rem_pio2+0x366>
 8009370:	3c01      	subs	r4, #1
 8009372:	ab0c      	add	r3, sp, #48	; 0x30
 8009374:	f1aa 0a18 	sub.w	sl, sl, #24
 8009378:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d0f7      	beq.n	8009370 <__kernel_rem_pio2+0x398>
 8009380:	4650      	mov	r0, sl
 8009382:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 8009658 <__kernel_rem_pio2+0x680>
 8009386:	f000 fac3 	bl	8009910 <scalbn>
 800938a:	00e5      	lsls	r5, r4, #3
 800938c:	ab98      	add	r3, sp, #608	; 0x260
 800938e:	eb03 0905 	add.w	r9, r3, r5
 8009392:	ec57 6b10 	vmov	r6, r7, d0
 8009396:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 800939a:	46a0      	mov	r8, r4
 800939c:	f1b8 0f00 	cmp.w	r8, #0
 80093a0:	da4d      	bge.n	800943e <__kernel_rem_pio2+0x466>
 80093a2:	ed9f 8baf 	vldr	d8, [pc, #700]	; 8009660 <__kernel_rem_pio2+0x688>
 80093a6:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 80093aa:	2300      	movs	r3, #0
 80093ac:	9304      	str	r3, [sp, #16]
 80093ae:	4657      	mov	r7, sl
 80093b0:	9b04      	ldr	r3, [sp, #16]
 80093b2:	ebb4 0903 	subs.w	r9, r4, r3
 80093b6:	d476      	bmi.n	80094a6 <__kernel_rem_pio2+0x4ce>
 80093b8:	4bab      	ldr	r3, [pc, #684]	; (8009668 <__kernel_rem_pio2+0x690>)
 80093ba:	461e      	mov	r6, r3
 80093bc:	ab70      	add	r3, sp, #448	; 0x1c0
 80093be:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80093c2:	ed8d 8b06 	vstr	d8, [sp, #24]
 80093c6:	f04f 0800 	mov.w	r8, #0
 80093ca:	e05e      	b.n	800948a <__kernel_rem_pio2+0x4b2>
 80093cc:	f1ca 0000 	rsb	r0, sl, #0
 80093d0:	ec49 8b10 	vmov	d0, r8, r9
 80093d4:	f000 fa9c 	bl	8009910 <scalbn>
 80093d8:	ec55 4b10 	vmov	r4, r5, d0
 80093dc:	2200      	movs	r2, #0
 80093de:	4ba3      	ldr	r3, [pc, #652]	; (800966c <__kernel_rem_pio2+0x694>)
 80093e0:	ee10 0a10 	vmov	r0, s0
 80093e4:	4629      	mov	r1, r5
 80093e6:	f7f7 fb51 	bl	8000a8c <__aeabi_dcmpge>
 80093ea:	b1f8      	cbz	r0, 800942c <__kernel_rem_pio2+0x454>
 80093ec:	2200      	movs	r2, #0
 80093ee:	4ba0      	ldr	r3, [pc, #640]	; (8009670 <__kernel_rem_pio2+0x698>)
 80093f0:	4620      	mov	r0, r4
 80093f2:	4629      	mov	r1, r5
 80093f4:	f7f7 f8c4 	bl	8000580 <__aeabi_dmul>
 80093f8:	f7f7 fb72 	bl	8000ae0 <__aeabi_d2iz>
 80093fc:	4606      	mov	r6, r0
 80093fe:	f7f7 f859 	bl	80004b4 <__aeabi_i2d>
 8009402:	2200      	movs	r2, #0
 8009404:	4b99      	ldr	r3, [pc, #612]	; (800966c <__kernel_rem_pio2+0x694>)
 8009406:	f7f7 f8bb 	bl	8000580 <__aeabi_dmul>
 800940a:	460b      	mov	r3, r1
 800940c:	4602      	mov	r2, r0
 800940e:	4629      	mov	r1, r5
 8009410:	4620      	mov	r0, r4
 8009412:	f7f6 ff01 	bl	8000218 <__aeabi_dsub>
 8009416:	f7f7 fb63 	bl	8000ae0 <__aeabi_d2iz>
 800941a:	1c7c      	adds	r4, r7, #1
 800941c:	ab0c      	add	r3, sp, #48	; 0x30
 800941e:	f10a 0a18 	add.w	sl, sl, #24
 8009422:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8009426:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800942a:	e7a9      	b.n	8009380 <__kernel_rem_pio2+0x3a8>
 800942c:	4620      	mov	r0, r4
 800942e:	4629      	mov	r1, r5
 8009430:	f7f7 fb56 	bl	8000ae0 <__aeabi_d2iz>
 8009434:	ab0c      	add	r3, sp, #48	; 0x30
 8009436:	463c      	mov	r4, r7
 8009438:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800943c:	e7a0      	b.n	8009380 <__kernel_rem_pio2+0x3a8>
 800943e:	ab0c      	add	r3, sp, #48	; 0x30
 8009440:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009444:	f7f7 f836 	bl	80004b4 <__aeabi_i2d>
 8009448:	4632      	mov	r2, r6
 800944a:	463b      	mov	r3, r7
 800944c:	f7f7 f898 	bl	8000580 <__aeabi_dmul>
 8009450:	2200      	movs	r2, #0
 8009452:	e969 0102 	strd	r0, r1, [r9, #-8]!
 8009456:	4b86      	ldr	r3, [pc, #536]	; (8009670 <__kernel_rem_pio2+0x698>)
 8009458:	4630      	mov	r0, r6
 800945a:	4639      	mov	r1, r7
 800945c:	f7f7 f890 	bl	8000580 <__aeabi_dmul>
 8009460:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009464:	4606      	mov	r6, r0
 8009466:	460f      	mov	r7, r1
 8009468:	e798      	b.n	800939c <__kernel_rem_pio2+0x3c4>
 800946a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800946e:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8009472:	f7f7 f885 	bl	8000580 <__aeabi_dmul>
 8009476:	4602      	mov	r2, r0
 8009478:	460b      	mov	r3, r1
 800947a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800947e:	f7f6 fecd 	bl	800021c <__adddf3>
 8009482:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009486:	f108 0801 	add.w	r8, r8, #1
 800948a:	9b00      	ldr	r3, [sp, #0]
 800948c:	4598      	cmp	r8, r3
 800948e:	dc02      	bgt.n	8009496 <__kernel_rem_pio2+0x4be>
 8009490:	9b04      	ldr	r3, [sp, #16]
 8009492:	4598      	cmp	r8, r3
 8009494:	dde9      	ble.n	800946a <__kernel_rem_pio2+0x492>
 8009496:	9b04      	ldr	r3, [sp, #16]
 8009498:	ed9d 7b06 	vldr	d7, [sp, #24]
 800949c:	3301      	adds	r3, #1
 800949e:	ecaa 7b02 	vstmia	sl!, {d7}
 80094a2:	9304      	str	r3, [sp, #16]
 80094a4:	e784      	b.n	80093b0 <__kernel_rem_pio2+0x3d8>
 80094a6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80094a8:	2b03      	cmp	r3, #3
 80094aa:	d85d      	bhi.n	8009568 <__kernel_rem_pio2+0x590>
 80094ac:	e8df f003 	tbb	[pc, r3]
 80094b0:	0226264b 	.word	0x0226264b
 80094b4:	ab98      	add	r3, sp, #608	; 0x260
 80094b6:	441d      	add	r5, r3
 80094b8:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 80094bc:	462e      	mov	r6, r5
 80094be:	46a2      	mov	sl, r4
 80094c0:	f1ba 0f00 	cmp.w	sl, #0
 80094c4:	dc6e      	bgt.n	80095a4 <__kernel_rem_pio2+0x5cc>
 80094c6:	462e      	mov	r6, r5
 80094c8:	46a2      	mov	sl, r4
 80094ca:	f1ba 0f01 	cmp.w	sl, #1
 80094ce:	f300 808a 	bgt.w	80095e6 <__kernel_rem_pio2+0x60e>
 80094d2:	2000      	movs	r0, #0
 80094d4:	2100      	movs	r1, #0
 80094d6:	2c01      	cmp	r4, #1
 80094d8:	f300 80a6 	bgt.w	8009628 <__kernel_rem_pio2+0x650>
 80094dc:	f1bb 0f00 	cmp.w	fp, #0
 80094e0:	f040 80a8 	bne.w	8009634 <__kernel_rem_pio2+0x65c>
 80094e4:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 80094e8:	9c02      	ldr	r4, [sp, #8]
 80094ea:	e9c4 2300 	strd	r2, r3, [r4]
 80094ee:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 80094f2:	e9c4 0104 	strd	r0, r1, [r4, #16]
 80094f6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80094fa:	e035      	b.n	8009568 <__kernel_rem_pio2+0x590>
 80094fc:	3508      	adds	r5, #8
 80094fe:	ab48      	add	r3, sp, #288	; 0x120
 8009500:	441d      	add	r5, r3
 8009502:	4626      	mov	r6, r4
 8009504:	2000      	movs	r0, #0
 8009506:	2100      	movs	r1, #0
 8009508:	2e00      	cmp	r6, #0
 800950a:	da3c      	bge.n	8009586 <__kernel_rem_pio2+0x5ae>
 800950c:	f1bb 0f00 	cmp.w	fp, #0
 8009510:	d03f      	beq.n	8009592 <__kernel_rem_pio2+0x5ba>
 8009512:	4602      	mov	r2, r0
 8009514:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009518:	9d02      	ldr	r5, [sp, #8]
 800951a:	e9c5 2300 	strd	r2, r3, [r5]
 800951e:	4602      	mov	r2, r0
 8009520:	460b      	mov	r3, r1
 8009522:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8009526:	f7f6 fe77 	bl	8000218 <__aeabi_dsub>
 800952a:	ae4a      	add	r6, sp, #296	; 0x128
 800952c:	2501      	movs	r5, #1
 800952e:	42ac      	cmp	r4, r5
 8009530:	da32      	bge.n	8009598 <__kernel_rem_pio2+0x5c0>
 8009532:	f1bb 0f00 	cmp.w	fp, #0
 8009536:	d002      	beq.n	800953e <__kernel_rem_pio2+0x566>
 8009538:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800953c:	4619      	mov	r1, r3
 800953e:	9b02      	ldr	r3, [sp, #8]
 8009540:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009544:	e010      	b.n	8009568 <__kernel_rem_pio2+0x590>
 8009546:	ab98      	add	r3, sp, #608	; 0x260
 8009548:	441d      	add	r5, r3
 800954a:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 800954e:	2000      	movs	r0, #0
 8009550:	2100      	movs	r1, #0
 8009552:	2c00      	cmp	r4, #0
 8009554:	da11      	bge.n	800957a <__kernel_rem_pio2+0x5a2>
 8009556:	f1bb 0f00 	cmp.w	fp, #0
 800955a:	d002      	beq.n	8009562 <__kernel_rem_pio2+0x58a>
 800955c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009560:	4619      	mov	r1, r3
 8009562:	9b02      	ldr	r3, [sp, #8]
 8009564:	e9c3 0100 	strd	r0, r1, [r3]
 8009568:	9b03      	ldr	r3, [sp, #12]
 800956a:	f003 0007 	and.w	r0, r3, #7
 800956e:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8009572:	ecbd 8b02 	vpop	{d8}
 8009576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800957a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800957e:	f7f6 fe4d 	bl	800021c <__adddf3>
 8009582:	3c01      	subs	r4, #1
 8009584:	e7e5      	b.n	8009552 <__kernel_rem_pio2+0x57a>
 8009586:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800958a:	f7f6 fe47 	bl	800021c <__adddf3>
 800958e:	3e01      	subs	r6, #1
 8009590:	e7ba      	b.n	8009508 <__kernel_rem_pio2+0x530>
 8009592:	4602      	mov	r2, r0
 8009594:	460b      	mov	r3, r1
 8009596:	e7bf      	b.n	8009518 <__kernel_rem_pio2+0x540>
 8009598:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800959c:	f7f6 fe3e 	bl	800021c <__adddf3>
 80095a0:	3501      	adds	r5, #1
 80095a2:	e7c4      	b.n	800952e <__kernel_rem_pio2+0x556>
 80095a4:	ed16 7b02 	vldr	d7, [r6, #-8]
 80095a8:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 80095ac:	ec53 2b17 	vmov	r2, r3, d7
 80095b0:	4640      	mov	r0, r8
 80095b2:	4649      	mov	r1, r9
 80095b4:	ed8d 7b00 	vstr	d7, [sp]
 80095b8:	f7f6 fe30 	bl	800021c <__adddf3>
 80095bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80095c0:	4602      	mov	r2, r0
 80095c2:	460b      	mov	r3, r1
 80095c4:	4640      	mov	r0, r8
 80095c6:	4649      	mov	r1, r9
 80095c8:	f7f6 fe26 	bl	8000218 <__aeabi_dsub>
 80095cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095d0:	f7f6 fe24 	bl	800021c <__adddf3>
 80095d4:	ed9d 7b04 	vldr	d7, [sp, #16]
 80095d8:	e966 0102 	strd	r0, r1, [r6, #-8]!
 80095dc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80095e0:	ed06 7b02 	vstr	d7, [r6, #-8]
 80095e4:	e76c      	b.n	80094c0 <__kernel_rem_pio2+0x4e8>
 80095e6:	ed16 7b02 	vldr	d7, [r6, #-8]
 80095ea:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 80095ee:	ec53 2b17 	vmov	r2, r3, d7
 80095f2:	4640      	mov	r0, r8
 80095f4:	4649      	mov	r1, r9
 80095f6:	ed8d 7b00 	vstr	d7, [sp]
 80095fa:	f7f6 fe0f 	bl	800021c <__adddf3>
 80095fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009602:	4602      	mov	r2, r0
 8009604:	460b      	mov	r3, r1
 8009606:	4640      	mov	r0, r8
 8009608:	4649      	mov	r1, r9
 800960a:	f7f6 fe05 	bl	8000218 <__aeabi_dsub>
 800960e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009612:	f7f6 fe03 	bl	800021c <__adddf3>
 8009616:	ed9d 7b04 	vldr	d7, [sp, #16]
 800961a:	e966 0102 	strd	r0, r1, [r6, #-8]!
 800961e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009622:	ed06 7b02 	vstr	d7, [r6, #-8]
 8009626:	e750      	b.n	80094ca <__kernel_rem_pio2+0x4f2>
 8009628:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800962c:	f7f6 fdf6 	bl	800021c <__adddf3>
 8009630:	3c01      	subs	r4, #1
 8009632:	e750      	b.n	80094d6 <__kernel_rem_pio2+0x4fe>
 8009634:	9a02      	ldr	r2, [sp, #8]
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	6013      	str	r3, [r2, #0]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6110      	str	r0, [r2, #16]
 800963e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009642:	6053      	str	r3, [r2, #4]
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	6093      	str	r3, [r2, #8]
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800964e:	60d3      	str	r3, [r2, #12]
 8009650:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009654:	6153      	str	r3, [r2, #20]
 8009656:	e787      	b.n	8009568 <__kernel_rem_pio2+0x590>
 8009658:	00000000 	.word	0x00000000
 800965c:	3ff00000 	.word	0x3ff00000
	...
 8009668:	08009e10 	.word	0x08009e10
 800966c:	41700000 	.word	0x41700000
 8009670:	3e700000 	.word	0x3e700000
 8009674:	00000000 	.word	0x00000000

08009678 <__kernel_sin>:
 8009678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800967c:	ec55 4b10 	vmov	r4, r5, d0
 8009680:	b085      	sub	sp, #20
 8009682:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009686:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800968a:	ed8d 1b00 	vstr	d1, [sp]
 800968e:	9002      	str	r0, [sp, #8]
 8009690:	da06      	bge.n	80096a0 <__kernel_sin+0x28>
 8009692:	ee10 0a10 	vmov	r0, s0
 8009696:	4629      	mov	r1, r5
 8009698:	f7f7 fa22 	bl	8000ae0 <__aeabi_d2iz>
 800969c:	2800      	cmp	r0, #0
 800969e:	d051      	beq.n	8009744 <__kernel_sin+0xcc>
 80096a0:	4622      	mov	r2, r4
 80096a2:	462b      	mov	r3, r5
 80096a4:	4620      	mov	r0, r4
 80096a6:	4629      	mov	r1, r5
 80096a8:	f7f6 ff6a 	bl	8000580 <__aeabi_dmul>
 80096ac:	4682      	mov	sl, r0
 80096ae:	468b      	mov	fp, r1
 80096b0:	4602      	mov	r2, r0
 80096b2:	460b      	mov	r3, r1
 80096b4:	4620      	mov	r0, r4
 80096b6:	4629      	mov	r1, r5
 80096b8:	f7f6 ff62 	bl	8000580 <__aeabi_dmul>
 80096bc:	a341      	add	r3, pc, #260	; (adr r3, 80097c4 <__kernel_sin+0x14c>)
 80096be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c2:	4680      	mov	r8, r0
 80096c4:	4689      	mov	r9, r1
 80096c6:	4650      	mov	r0, sl
 80096c8:	4659      	mov	r1, fp
 80096ca:	f7f6 ff59 	bl	8000580 <__aeabi_dmul>
 80096ce:	a33f      	add	r3, pc, #252	; (adr r3, 80097cc <__kernel_sin+0x154>)
 80096d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d4:	f7f6 fda0 	bl	8000218 <__aeabi_dsub>
 80096d8:	4652      	mov	r2, sl
 80096da:	465b      	mov	r3, fp
 80096dc:	f7f6 ff50 	bl	8000580 <__aeabi_dmul>
 80096e0:	a33c      	add	r3, pc, #240	; (adr r3, 80097d4 <__kernel_sin+0x15c>)
 80096e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e6:	f7f6 fd99 	bl	800021c <__adddf3>
 80096ea:	4652      	mov	r2, sl
 80096ec:	465b      	mov	r3, fp
 80096ee:	f7f6 ff47 	bl	8000580 <__aeabi_dmul>
 80096f2:	a33a      	add	r3, pc, #232	; (adr r3, 80097dc <__kernel_sin+0x164>)
 80096f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f8:	f7f6 fd8e 	bl	8000218 <__aeabi_dsub>
 80096fc:	4652      	mov	r2, sl
 80096fe:	465b      	mov	r3, fp
 8009700:	f7f6 ff3e 	bl	8000580 <__aeabi_dmul>
 8009704:	a337      	add	r3, pc, #220	; (adr r3, 80097e4 <__kernel_sin+0x16c>)
 8009706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970a:	f7f6 fd87 	bl	800021c <__adddf3>
 800970e:	9b02      	ldr	r3, [sp, #8]
 8009710:	4606      	mov	r6, r0
 8009712:	460f      	mov	r7, r1
 8009714:	b9db      	cbnz	r3, 800974e <__kernel_sin+0xd6>
 8009716:	4602      	mov	r2, r0
 8009718:	460b      	mov	r3, r1
 800971a:	4650      	mov	r0, sl
 800971c:	4659      	mov	r1, fp
 800971e:	f7f6 ff2f 	bl	8000580 <__aeabi_dmul>
 8009722:	a325      	add	r3, pc, #148	; (adr r3, 80097b8 <__kernel_sin+0x140>)
 8009724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009728:	f7f6 fd76 	bl	8000218 <__aeabi_dsub>
 800972c:	4642      	mov	r2, r8
 800972e:	464b      	mov	r3, r9
 8009730:	f7f6 ff26 	bl	8000580 <__aeabi_dmul>
 8009734:	4602      	mov	r2, r0
 8009736:	460b      	mov	r3, r1
 8009738:	4620      	mov	r0, r4
 800973a:	4629      	mov	r1, r5
 800973c:	f7f6 fd6e 	bl	800021c <__adddf3>
 8009740:	4604      	mov	r4, r0
 8009742:	460d      	mov	r5, r1
 8009744:	ec45 4b10 	vmov	d0, r4, r5
 8009748:	b005      	add	sp, #20
 800974a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800974e:	2200      	movs	r2, #0
 8009750:	4b1b      	ldr	r3, [pc, #108]	; (80097c0 <__kernel_sin+0x148>)
 8009752:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009756:	f7f6 ff13 	bl	8000580 <__aeabi_dmul>
 800975a:	4632      	mov	r2, r6
 800975c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009760:	463b      	mov	r3, r7
 8009762:	4640      	mov	r0, r8
 8009764:	4649      	mov	r1, r9
 8009766:	f7f6 ff0b 	bl	8000580 <__aeabi_dmul>
 800976a:	4602      	mov	r2, r0
 800976c:	460b      	mov	r3, r1
 800976e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009772:	f7f6 fd51 	bl	8000218 <__aeabi_dsub>
 8009776:	4652      	mov	r2, sl
 8009778:	465b      	mov	r3, fp
 800977a:	f7f6 ff01 	bl	8000580 <__aeabi_dmul>
 800977e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009782:	f7f6 fd49 	bl	8000218 <__aeabi_dsub>
 8009786:	a30c      	add	r3, pc, #48	; (adr r3, 80097b8 <__kernel_sin+0x140>)
 8009788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978c:	4606      	mov	r6, r0
 800978e:	460f      	mov	r7, r1
 8009790:	4640      	mov	r0, r8
 8009792:	4649      	mov	r1, r9
 8009794:	f7f6 fef4 	bl	8000580 <__aeabi_dmul>
 8009798:	4602      	mov	r2, r0
 800979a:	460b      	mov	r3, r1
 800979c:	4630      	mov	r0, r6
 800979e:	4639      	mov	r1, r7
 80097a0:	f7f6 fd3c 	bl	800021c <__adddf3>
 80097a4:	4602      	mov	r2, r0
 80097a6:	460b      	mov	r3, r1
 80097a8:	4620      	mov	r0, r4
 80097aa:	4629      	mov	r1, r5
 80097ac:	f7f6 fd34 	bl	8000218 <__aeabi_dsub>
 80097b0:	e7c6      	b.n	8009740 <__kernel_sin+0xc8>
 80097b2:	bf00      	nop
 80097b4:	f3af 8000 	nop.w
 80097b8:	55555549 	.word	0x55555549
 80097bc:	3fc55555 	.word	0x3fc55555
 80097c0:	3fe00000 	.word	0x3fe00000
 80097c4:	5acfd57c 	.word	0x5acfd57c
 80097c8:	3de5d93a 	.word	0x3de5d93a
 80097cc:	8a2b9ceb 	.word	0x8a2b9ceb
 80097d0:	3e5ae5e6 	.word	0x3e5ae5e6
 80097d4:	57b1fe7d 	.word	0x57b1fe7d
 80097d8:	3ec71de3 	.word	0x3ec71de3
 80097dc:	19c161d5 	.word	0x19c161d5
 80097e0:	3f2a01a0 	.word	0x3f2a01a0
 80097e4:	1110f8a6 	.word	0x1110f8a6
 80097e8:	3f811111 	.word	0x3f811111

080097ec <fabs>:
 80097ec:	ec53 2b10 	vmov	r2, r3, d0
 80097f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80097f4:	ec43 2b10 	vmov	d0, r2, r3
 80097f8:	4770      	bx	lr
 80097fa:	0000      	movs	r0, r0
 80097fc:	0000      	movs	r0, r0
	...

08009800 <floor>:
 8009800:	ec51 0b10 	vmov	r0, r1, d0
 8009804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009808:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800980c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009810:	2e13      	cmp	r6, #19
 8009812:	ee10 8a10 	vmov	r8, s0
 8009816:	460c      	mov	r4, r1
 8009818:	ee10 5a10 	vmov	r5, s0
 800981c:	dc35      	bgt.n	800988a <floor+0x8a>
 800981e:	2e00      	cmp	r6, #0
 8009820:	da17      	bge.n	8009852 <floor+0x52>
 8009822:	a335      	add	r3, pc, #212	; (adr r3, 80098f8 <floor+0xf8>)
 8009824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009828:	f7f6 fcf8 	bl	800021c <__adddf3>
 800982c:	2200      	movs	r2, #0
 800982e:	2300      	movs	r3, #0
 8009830:	f7f7 f936 	bl	8000aa0 <__aeabi_dcmpgt>
 8009834:	b150      	cbz	r0, 800984c <floor+0x4c>
 8009836:	2c00      	cmp	r4, #0
 8009838:	da5a      	bge.n	80098f0 <floor+0xf0>
 800983a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800983e:	ea53 0308 	orrs.w	r3, r3, r8
 8009842:	4b2f      	ldr	r3, [pc, #188]	; (8009900 <floor+0x100>)
 8009844:	f04f 0500 	mov.w	r5, #0
 8009848:	bf18      	it	ne
 800984a:	461c      	movne	r4, r3
 800984c:	4621      	mov	r1, r4
 800984e:	4628      	mov	r0, r5
 8009850:	e025      	b.n	800989e <floor+0x9e>
 8009852:	4f2c      	ldr	r7, [pc, #176]	; (8009904 <floor+0x104>)
 8009854:	4137      	asrs	r7, r6
 8009856:	ea01 0307 	and.w	r3, r1, r7
 800985a:	4303      	orrs	r3, r0
 800985c:	d01f      	beq.n	800989e <floor+0x9e>
 800985e:	a326      	add	r3, pc, #152	; (adr r3, 80098f8 <floor+0xf8>)
 8009860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009864:	f7f6 fcda 	bl	800021c <__adddf3>
 8009868:	2200      	movs	r2, #0
 800986a:	2300      	movs	r3, #0
 800986c:	f7f7 f918 	bl	8000aa0 <__aeabi_dcmpgt>
 8009870:	2800      	cmp	r0, #0
 8009872:	d0eb      	beq.n	800984c <floor+0x4c>
 8009874:	2c00      	cmp	r4, #0
 8009876:	bfbe      	ittt	lt
 8009878:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800987c:	fa43 f606 	asrlt.w	r6, r3, r6
 8009880:	19a4      	addlt	r4, r4, r6
 8009882:	ea24 0407 	bic.w	r4, r4, r7
 8009886:	2500      	movs	r5, #0
 8009888:	e7e0      	b.n	800984c <floor+0x4c>
 800988a:	2e33      	cmp	r6, #51	; 0x33
 800988c:	dd0b      	ble.n	80098a6 <floor+0xa6>
 800988e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009892:	d104      	bne.n	800989e <floor+0x9e>
 8009894:	ee10 2a10 	vmov	r2, s0
 8009898:	460b      	mov	r3, r1
 800989a:	f7f6 fcbf 	bl	800021c <__adddf3>
 800989e:	ec41 0b10 	vmov	d0, r0, r1
 80098a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098a6:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80098aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098ae:	fa23 f707 	lsr.w	r7, r3, r7
 80098b2:	4238      	tst	r0, r7
 80098b4:	d0f3      	beq.n	800989e <floor+0x9e>
 80098b6:	a310      	add	r3, pc, #64	; (adr r3, 80098f8 <floor+0xf8>)
 80098b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098bc:	f7f6 fcae 	bl	800021c <__adddf3>
 80098c0:	2200      	movs	r2, #0
 80098c2:	2300      	movs	r3, #0
 80098c4:	f7f7 f8ec 	bl	8000aa0 <__aeabi_dcmpgt>
 80098c8:	2800      	cmp	r0, #0
 80098ca:	d0bf      	beq.n	800984c <floor+0x4c>
 80098cc:	2c00      	cmp	r4, #0
 80098ce:	da02      	bge.n	80098d6 <floor+0xd6>
 80098d0:	2e14      	cmp	r6, #20
 80098d2:	d103      	bne.n	80098dc <floor+0xdc>
 80098d4:	3401      	adds	r4, #1
 80098d6:	ea25 0507 	bic.w	r5, r5, r7
 80098da:	e7b7      	b.n	800984c <floor+0x4c>
 80098dc:	2301      	movs	r3, #1
 80098de:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80098e2:	fa03 f606 	lsl.w	r6, r3, r6
 80098e6:	4435      	add	r5, r6
 80098e8:	45a8      	cmp	r8, r5
 80098ea:	bf88      	it	hi
 80098ec:	18e4      	addhi	r4, r4, r3
 80098ee:	e7f2      	b.n	80098d6 <floor+0xd6>
 80098f0:	2500      	movs	r5, #0
 80098f2:	462c      	mov	r4, r5
 80098f4:	e7aa      	b.n	800984c <floor+0x4c>
 80098f6:	bf00      	nop
 80098f8:	8800759c 	.word	0x8800759c
 80098fc:	7e37e43c 	.word	0x7e37e43c
 8009900:	bff00000 	.word	0xbff00000
 8009904:	000fffff 	.word	0x000fffff

08009908 <matherr>:
 8009908:	2000      	movs	r0, #0
 800990a:	4770      	bx	lr
 800990c:	0000      	movs	r0, r0
	...

08009910 <scalbn>:
 8009910:	b570      	push	{r4, r5, r6, lr}
 8009912:	ec55 4b10 	vmov	r4, r5, d0
 8009916:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800991a:	4606      	mov	r6, r0
 800991c:	462b      	mov	r3, r5
 800991e:	b9b2      	cbnz	r2, 800994e <scalbn+0x3e>
 8009920:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009924:	4323      	orrs	r3, r4
 8009926:	d03c      	beq.n	80099a2 <scalbn+0x92>
 8009928:	2200      	movs	r2, #0
 800992a:	4b33      	ldr	r3, [pc, #204]	; (80099f8 <scalbn+0xe8>)
 800992c:	4629      	mov	r1, r5
 800992e:	ee10 0a10 	vmov	r0, s0
 8009932:	f7f6 fe25 	bl	8000580 <__aeabi_dmul>
 8009936:	4a31      	ldr	r2, [pc, #196]	; (80099fc <scalbn+0xec>)
 8009938:	4296      	cmp	r6, r2
 800993a:	4604      	mov	r4, r0
 800993c:	460d      	mov	r5, r1
 800993e:	460b      	mov	r3, r1
 8009940:	da13      	bge.n	800996a <scalbn+0x5a>
 8009942:	a329      	add	r3, pc, #164	; (adr r3, 80099e8 <scalbn+0xd8>)
 8009944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009948:	f7f6 fe1a 	bl	8000580 <__aeabi_dmul>
 800994c:	e00a      	b.n	8009964 <scalbn+0x54>
 800994e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009952:	428a      	cmp	r2, r1
 8009954:	d10c      	bne.n	8009970 <scalbn+0x60>
 8009956:	ee10 2a10 	vmov	r2, s0
 800995a:	462b      	mov	r3, r5
 800995c:	4620      	mov	r0, r4
 800995e:	4629      	mov	r1, r5
 8009960:	f7f6 fc5c 	bl	800021c <__adddf3>
 8009964:	4604      	mov	r4, r0
 8009966:	460d      	mov	r5, r1
 8009968:	e01b      	b.n	80099a2 <scalbn+0x92>
 800996a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800996e:	3a36      	subs	r2, #54	; 0x36
 8009970:	4432      	add	r2, r6
 8009972:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009976:	428a      	cmp	r2, r1
 8009978:	dd0b      	ble.n	8009992 <scalbn+0x82>
 800997a:	ec45 4b11 	vmov	d1, r4, r5
 800997e:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80099f0 <scalbn+0xe0>
 8009982:	f000 f83f 	bl	8009a04 <copysign>
 8009986:	a31a      	add	r3, pc, #104	; (adr r3, 80099f0 <scalbn+0xe0>)
 8009988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998c:	ec51 0b10 	vmov	r0, r1, d0
 8009990:	e7da      	b.n	8009948 <scalbn+0x38>
 8009992:	2a00      	cmp	r2, #0
 8009994:	dd08      	ble.n	80099a8 <scalbn+0x98>
 8009996:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800999a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800999e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80099a2:	ec45 4b10 	vmov	d0, r4, r5
 80099a6:	bd70      	pop	{r4, r5, r6, pc}
 80099a8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80099ac:	da0d      	bge.n	80099ca <scalbn+0xba>
 80099ae:	f24c 3350 	movw	r3, #50000	; 0xc350
 80099b2:	429e      	cmp	r6, r3
 80099b4:	ec45 4b11 	vmov	d1, r4, r5
 80099b8:	dce1      	bgt.n	800997e <scalbn+0x6e>
 80099ba:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80099e8 <scalbn+0xd8>
 80099be:	f000 f821 	bl	8009a04 <copysign>
 80099c2:	a309      	add	r3, pc, #36	; (adr r3, 80099e8 <scalbn+0xd8>)
 80099c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c8:	e7e0      	b.n	800998c <scalbn+0x7c>
 80099ca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80099ce:	3236      	adds	r2, #54	; 0x36
 80099d0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80099d4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80099d8:	4620      	mov	r0, r4
 80099da:	4629      	mov	r1, r5
 80099dc:	2200      	movs	r2, #0
 80099de:	4b08      	ldr	r3, [pc, #32]	; (8009a00 <scalbn+0xf0>)
 80099e0:	e7b2      	b.n	8009948 <scalbn+0x38>
 80099e2:	bf00      	nop
 80099e4:	f3af 8000 	nop.w
 80099e8:	c2f8f359 	.word	0xc2f8f359
 80099ec:	01a56e1f 	.word	0x01a56e1f
 80099f0:	8800759c 	.word	0x8800759c
 80099f4:	7e37e43c 	.word	0x7e37e43c
 80099f8:	43500000 	.word	0x43500000
 80099fc:	ffff3cb0 	.word	0xffff3cb0
 8009a00:	3c900000 	.word	0x3c900000

08009a04 <copysign>:
 8009a04:	ec53 2b10 	vmov	r2, r3, d0
 8009a08:	ee11 0a90 	vmov	r0, s3
 8009a0c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009a10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8009a14:	ea41 0300 	orr.w	r3, r1, r0
 8009a18:	ec43 2b10 	vmov	d0, r2, r3
 8009a1c:	4770      	bx	lr
	...

08009a20 <__errno>:
 8009a20:	4b01      	ldr	r3, [pc, #4]	; (8009a28 <__errno+0x8>)
 8009a22:	6818      	ldr	r0, [r3, #0]
 8009a24:	4770      	bx	lr
 8009a26:	bf00      	nop
 8009a28:	20000018 	.word	0x20000018

08009a2c <_init>:
 8009a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a2e:	bf00      	nop
 8009a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a32:	bc08      	pop	{r3}
 8009a34:	469e      	mov	lr, r3
 8009a36:	4770      	bx	lr

08009a38 <_fini>:
 8009a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a3a:	bf00      	nop
 8009a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a3e:	bc08      	pop	{r3}
 8009a40:	469e      	mov	lr, r3
 8009a42:	4770      	bx	lr
